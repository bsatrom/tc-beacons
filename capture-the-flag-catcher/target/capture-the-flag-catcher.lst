
/Users/bsatrom/Development/particle/that-conf-beacons/capture-the-flag-catcher/target/capture-the-flag-catcher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b28  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018be0  2**0
                  CONTENTS
  3 .data         00000074  2003d8d4  000d8b40  0000d8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000ea8  2003d948  2003d948  0001d948  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d8bb4  000d8bb4  00018bb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8bdc  000d8bdc  00018bdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ea126  00000000  00000000  00018be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011b6d  00000000  00000000  00102d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001e64e  00000000  00000000  00114873  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002768  00000000  00000000  00132ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004960  00000000  00000000  00135629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00035651  00000000  00000000  00139f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000283b2  00000000  00000000  0016f5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010963b  00000000  00000000  0019798c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d1a4  00000000  00000000  002a0fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	80 84 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f8ee 	bl	d820e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f90e 	bl	d825a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d8d4 	.word	0x2003d8d4
   d4048:	000d8b40 	.word	0x000d8b40
   d404c:	2003d948 	.word	0x2003d948
   d4050:	2003d948 	.word	0x2003d948
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fea9 	bl	d7db0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8b40 	.word	0x000d8b40
   d4080:	000d8b04 	.word	0x000d8b04

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b878 	b.w	d4178 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f879 	bl	d4180 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 be5b 	b.w	d7d4c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc97 	b.w	d49c8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc9d 	b.w	d49d8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc9b 	b.w	d49d8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fbe8 	bl	d4880 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4641 	.word	0x000d4641

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f002 fd0c 	bl	d6af8 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f002 fef9 	bl	d6ed8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f003 fdaf 	bl	d7c48 <_Z16_fetch_usbserialv>
   d40ea:	f003 fda1 	bl	d7c30 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f002 fdf5 	bl	d6ce4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d84b4 	.word	0x000d84b4
   d4104:	000d849c 	.word	0x000d849c

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f003 fefb 	bl	d7f0e <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d411c:	b40e      	push	{r1, r2, r3}
   d411e:	b500      	push	{lr}
   d4120:	b08c      	sub	sp, #48	; 0x30
   d4122:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4124:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4126:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d412a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d412c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4130:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4132:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4134:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4136:	aa04      	add	r2, sp, #16
   d4138:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d413a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	f000 fbb0 	bl	d48a0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4140:	b00c      	add	sp, #48	; 0x30
   d4142:	f85d eb04 	ldr.w	lr, [sp], #4
   d4146:	b003      	add	sp, #12
   d4148:	4770      	bx	lr

000d414a <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d414a:	b40e      	push	{r1, r2, r3}
   d414c:	b500      	push	{lr}
   d414e:	b08c      	sub	sp, #48	; 0x30
   d4150:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4152:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4154:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4158:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415a:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d415e:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4160:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4162:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4164:	aa04      	add	r2, sp, #16
   d4166:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4168:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d416a:	f000 fb99 	bl	d48a0 <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
   d416e:	b00c      	add	sp, #48	; 0x30
   d4170:	f85d eb04 	ldr.w	lr, [sp], #4
   d4174:	b003      	add	sp, #12
   d4176:	4770      	bx	lr

000d4178 <setup>:
BleScanResult scanResults[SCAN_RESULT_MAX];
BlePeerDevice beacon;

void setup()
{
  pinMode(D7, OUTPUT);
   d4178:	2101      	movs	r1, #1
   d417a:	2007      	movs	r0, #7
   d417c:	f003 be56 	b.w	d7e2c <pinMode>

000d4180 <loop>:

  (void)logHandler;
}

void loop()
{
   d4180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!coolingDown)
   d4184:	4c55      	ldr	r4, [pc, #340]	; (d42dc <loop+0x15c>)
   d4186:	7823      	ldrb	r3, [r4, #0]

  (void)logHandler;
}

void loop()
{
   d4188:	b089      	sub	sp, #36	; 0x24
   d418a:	46a3      	mov	fp, r4
  if (!coolingDown)
   d418c:	2b00      	cmp	r3, #0
   d418e:	d17e      	bne.n	d428e <loop+0x10e>
  {
    if (BLE.connected())
   d4190:	f001 f9da 	bl	d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4194:	f000 ffd6 	bl	d5144 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4198:	4605      	mov	r5, r0
   d419a:	b120      	cbz	r0, d41a6 <loop+0x26>
    {
      BLE.disconnect();
   d419c:	f001 f9d4 	bl	d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41a0:	f001 f88c 	bl	d52bc <_ZNK8particle14BleLocalDevice10disconnectEv>
   d41a4:	e097      	b.n	d42d6 <loop+0x156>
    } 
    else
    {
      Log.info("Scanning for beacons...");
   d41a6:	494e      	ldr	r1, [pc, #312]	; (d42e0 <loop+0x160>)
   d41a8:	484e      	ldr	r0, [pc, #312]	; (d42e4 <loop+0x164>)
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d41aa:	4f4f      	ldr	r7, [pc, #316]	; (d42e8 <loop+0x168>)

      Log.info("Found: %i", count);
      for (int i = 0; i < count; i++) {
        BleUuid foundServiceId;

        size_t svcsAvailable = scanResults[i].advertisingData.serviceUUID(&foundServiceId, 1);
   d41ac:	f8df 913c 	ldr.w	r9, [pc, #316]	; d42ec <loop+0x16c>
    {
      BLE.disconnect();
    } 
    else
    {
      Log.info("Scanning for beacons...");
   d41b0:	f7ff ffb4 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
      int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d41b4:	f001 f9c8 	bl	d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41b8:	221e      	movs	r2, #30
   d41ba:	494c      	ldr	r1, [pc, #304]	; (d42ec <loop+0x16c>)
   d41bc:	f000 ff98 	bl	d50f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>

      Log.info("Found: %i", count);
   d41c0:	494b      	ldr	r1, [pc, #300]	; (d42f0 <loop+0x170>)
   d41c2:	4602      	mov	r2, r0
      BLE.disconnect();
    } 
    else
    {
      Log.info("Scanning for beacons...");
      int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d41c4:	4680      	mov	r8, r0

      Log.info("Found: %i", count);
   d41c6:	4847      	ldr	r0, [pc, #284]	; (d42e4 <loop+0x164>)
   d41c8:	f7ff ffa8 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d41cc:	46ba      	mov	sl, r7
      for (int i = 0; i < count; i++) {
   d41ce:	4545      	cmp	r5, r8
   d41d0:	f280 8081 	bge.w	d42d6 <loop+0x156>
   d41d4:	2454      	movs	r4, #84	; 0x54


class BleUuid {
public:
    BleUuid()
            : uuid_() {
   d41d6:	2214      	movs	r2, #20
   d41d8:	2100      	movs	r1, #0
   d41da:	a803      	add	r0, sp, #12
   d41dc:	436c      	muls	r4, r5
   d41de:	f004 f83c 	bl	d825a <memset>
        BleUuid foundServiceId;

        size_t svcsAvailable = scanResults[i].advertisingData.serviceUUID(&foundServiceId, 1);
   d41e2:	f104 0008 	add.w	r0, r4, #8
   d41e6:	2201      	movs	r2, #1
   d41e8:	a903      	add	r1, sp, #12
   d41ea:	4448      	add	r0, r9
   d41ec:	f000 fe1e 	bl	d4e2c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

        Log.info("Services Available: %i", svcsAvailable);
   d41f0:	4940      	ldr	r1, [pc, #256]	; (d42f4 <loop+0x174>)

      Log.info("Found: %i", count);
      for (int i = 0; i < count; i++) {
        BleUuid foundServiceId;

        size_t svcsAvailable = scanResults[i].advertisingData.serviceUUID(&foundServiceId, 1);
   d41f2:	4606      	mov	r6, r0

        Log.info("Services Available: %i", svcsAvailable);
   d41f4:	4602      	mov	r2, r0
   d41f6:	483b      	ldr	r0, [pc, #236]	; (d42e4 <loop+0x164>)
   d41f8:	f7ff ff90 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        
        if (svcsAvailable > 0 && foundServiceId == FLAG_BEACON_UUID) {
   d41fc:	2e00      	cmp	r6, #0
   d41fe:	d044      	beq.n	d428a <loop+0x10a>
   d4200:	493d      	ldr	r1, [pc, #244]	; (d42f8 <loop+0x178>)
   d4202:	a803      	add	r0, sp, #12
   d4204:	f000 fd14 	bl	d4c30 <_ZNK8particle7BleUuideqERKS0_>
   d4208:	2800      	cmp	r0, #0
   d420a:	d03e      	beq.n	d428a <loop+0x10a>
          Log.info("Found matching service. Connecting...");
   d420c:	493b      	ldr	r1, [pc, #236]	; (d42fc <loop+0x17c>)
   d420e:	4835      	ldr	r0, [pc, #212]	; (d42e4 <loop+0x164>)
   d4210:	f7ff ff84 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
          beacon = BLE.connect(scanResults[i].address);
   d4214:	f001 f998 	bl	d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4218:	eb09 0204 	add.w	r2, r9, r4
   d421c:	4601      	mov	r1, r0
   d421e:	a801      	add	r0, sp, #4
   d4220:	f001 fc2c 	bl	d5a7c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE>
   d4224:	9b01      	ldr	r3, [sp, #4]
   d4226:	603b      	str	r3, [r7, #0]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4228:	9e02      	ldr	r6, [sp, #8]
	if (__tmp != _M_pi)
   d422a:	687b      	ldr	r3, [r7, #4]
   d422c:	429e      	cmp	r6, r3
   d422e:	d008      	beq.n	d4242 <loop+0xc2>
	  {
	    if (__tmp != 0)
   d4230:	b116      	cbz	r6, d4238 <loop+0xb8>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4232:	6873      	ldr	r3, [r6, #4]
   d4234:	3301      	adds	r3, #1
   d4236:	6073      	str	r3, [r6, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4238:	f8da 4004 	ldr.w	r4, [sl, #4]
   d423c:	bb9c      	cbnz	r4, d42a6 <loop+0x126>
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d423e:	f8ca 6004 	str.w	r6, [sl, #4]
   d4242:	a801      	add	r0, sp, #4
   d4244:	f000 ffcf 	bl	d51e6 <_ZN8particle13BlePeerDeviceD1Ev>

          if (beacon.connected()) {
   d4248:	4827      	ldr	r0, [pc, #156]	; (d42e8 <loop+0x168>)
   d424a:	f000 ff3b 	bl	d50c4 <_ZN8particle13BlePeerDevice9connectedEv>
   d424e:	2800      	cmp	r0, #0
   d4250:	d03c      	beq.n	d42cc <loop+0x14c>
            coolingDown = true;
   d4252:	2401      	movs	r4, #1
   d4254:	f88b 4000 	strb.w	r4, [fp]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4258:	f000 f9fa 	bl	d4650 <HAL_Timer_Get_Milli_Seconds>
            cooldownStart = millis();
   d425c:	4b28      	ldr	r3, [pc, #160]	; (d4300 <loop+0x180>)

            Log.info("Made connection to beacon.");
   d425e:	4929      	ldr	r1, [pc, #164]	; (d4304 <loop+0x184>)
          Log.info("Found matching service. Connecting...");
          beacon = BLE.connect(scanResults[i].address);

          if (beacon.connected()) {
            coolingDown = true;
            cooldownStart = millis();
   d4260:	6018      	str	r0, [r3, #0]

            Log.info("Made connection to beacon.");
   d4262:	4820      	ldr	r0, [pc, #128]	; (d42e4 <loop+0x164>)
   d4264:	f7ff ff5a 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
            
            digitalWrite(D7, HIGH);
   d4268:	4621      	mov	r1, r4
   d426a:	2007      	movs	r0, #7
   d426c:	f003 fdef 	bl	d7e4e <digitalWrite>
            delay(2000);
   d4270:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4274:	f000 fbc8 	bl	d4a08 <delay>
            digitalWrite(D7, LOW);
   d4278:	2100      	movs	r1, #0
   d427a:	2007      	movs	r0, #7
   d427c:	f003 fde7 	bl	d7e4e <digitalWrite>
            
            BLE.disconnect(beacon);
   d4280:	f001 f962 	bl	d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4284:	4918      	ldr	r1, [pc, #96]	; (d42e8 <loop+0x168>)
   d4286:	f000 ff6a 	bl	d515e <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>
    {
      Log.info("Scanning for beacons...");
      int count = BLE.scan(scanResults, SCAN_RESULT_MAX);

      Log.info("Found: %i", count);
      for (int i = 0; i < count; i++) {
   d428a:	3501      	adds	r5, #1
   d428c:	e79f      	b.n	d41ce <loop+0x4e>
   d428e:	f000 f9df 	bl	d4650 <HAL_Timer_Get_Milli_Seconds>
          }
        }
      }
    }
  }
  else if (millis() > cooldownStart + COOLDOWN_DELAY)
   d4292:	4b1b      	ldr	r3, [pc, #108]	; (d4300 <loop+0x180>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
   d429a:	3360      	adds	r3, #96	; 0x60
   d429c:	4298      	cmp	r0, r3
   d429e:	d91a      	bls.n	d42d6 <loop+0x156>
  {
    coolingDown = false;
   d42a0:	2300      	movs	r3, #0
   d42a2:	7023      	strb	r3, [r4, #0]
  }
   d42a4:	e017      	b.n	d42d6 <loop+0x156>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42a6:	6863      	ldr	r3, [r4, #4]
   d42a8:	3b01      	subs	r3, #1
   d42aa:	6063      	str	r3, [r4, #4]
   d42ac:	2b00      	cmp	r3, #0
   d42ae:	d1c6      	bne.n	d423e <loop+0xbe>
        {
          _M_dispose();
   d42b0:	6823      	ldr	r3, [r4, #0]
   d42b2:	4620      	mov	r0, r4
   d42b4:	689b      	ldr	r3, [r3, #8]
   d42b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42b8:	68a3      	ldr	r3, [r4, #8]
   d42ba:	3b01      	subs	r3, #1
   d42bc:	60a3      	str	r3, [r4, #8]
   d42be:	2b00      	cmp	r3, #0
   d42c0:	d1bd      	bne.n	d423e <loop+0xbe>
            _M_destroy();
   d42c2:	6823      	ldr	r3, [r4, #0]
   d42c4:	4620      	mov	r0, r4
   d42c6:	68db      	ldr	r3, [r3, #12]
   d42c8:	4798      	blx	r3
   d42ca:	e7b8      	b.n	d423e <loop+0xbe>
            delay(2000);
            digitalWrite(D7, LOW);
            
            BLE.disconnect(beacon);
          } else {
            Log.error("Cannot connect to beacon.");
   d42cc:	490e      	ldr	r1, [pc, #56]	; (d4308 <loop+0x188>)
   d42ce:	4805      	ldr	r0, [pc, #20]	; (d42e4 <loop+0x164>)
   d42d0:	f7ff ff3b 	bl	d414a <_ZNK5spark6Logger5errorEPKcz>
   d42d4:	e7d9      	b.n	d428a <loop+0x10a>
  }
  else if (millis() > cooldownStart + COOLDOWN_DELAY)
  {
    coolingDown = false;
  }
   d42d6:	b009      	add	sp, #36	; 0x24
   d42d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d42dc:	2003d94c 	.word	0x2003d94c
   d42e0:	000d84c4 	.word	0x000d84c4
   d42e4:	2003e3d4 	.word	0x2003e3d4
   d42e8:	2003e360 	.word	0x2003e360
   d42ec:	2003d988 	.word	0x2003d988
   d42f0:	000d84dc 	.word	0x000d84dc
   d42f4:	000d84e6 	.word	0x000d84e6
   d42f8:	2003d974 	.word	0x2003d974
   d42fc:	000d8532 	.word	0x000d8532
   d4300:	2003e368 	.word	0x2003e368
   d4304:	000d84fd 	.word	0x000d84fd
   d4308:	000d8518 	.word	0x000d8518

000d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d430c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d430e:	6804      	ldr	r4, [r0, #0]
   d4310:	6843      	ldr	r3, [r0, #4]
   d4312:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4314:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4316:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d431a:	42a6      	cmp	r6, r4
   d431c:	d004      	beq.n	d4328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d431e:	4620      	mov	r0, r4
   d4320:	f003 fb05 	bl	d792e <_ZN6StringD1Ev>
   d4324:	3414      	adds	r4, #20
   d4326:	e7f8      	b.n	d431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4328:	6828      	ldr	r0, [r5, #0]
   d432a:	f000 fb55 	bl	d49d8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d432e:	4628      	mov	r0, r5
   d4330:	bd70      	pop	{r4, r5, r6, pc}

000d4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4332:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4336:	4606      	mov	r6, r0
   d4338:	460c      	mov	r4, r1
   d433a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d433c:	d916      	bls.n	d436c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d433e:	4290      	cmp	r0, r2
   d4340:	d215      	bcs.n	d436e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4342:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4346:	1a6c      	subs	r4, r5, r1
   d4348:	f1a1 0714 	sub.w	r7, r1, #20
   d434c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d434e:	42af      	cmp	r7, r5
   d4350:	d01c      	beq.n	d438c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4352:	b12c      	cbz	r4, d4360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4354:	4629      	mov	r1, r5
   d4356:	4620      	mov	r0, r4
   d4358:	f003 fad9 	bl	d790e <_ZN6StringC1EOS_>
   d435c:	7c2b      	ldrb	r3, [r5, #16]
   d435e:	7423      	strb	r3, [r4, #16]
   d4360:	4628      	mov	r0, r5
   d4362:	f003 fae4 	bl	d792e <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4366:	3d14      	subs	r5, #20
   d4368:	3c14      	subs	r4, #20
   d436a:	e7f0      	b.n	d434e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d436c:	d00e      	beq.n	d438c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d436e:	42ac      	cmp	r4, r5
   d4370:	d00c      	beq.n	d438c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4372:	b12e      	cbz	r6, d4380 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4374:	4621      	mov	r1, r4
   d4376:	4630      	mov	r0, r6
   d4378:	f003 fac9 	bl	d790e <_ZN6StringC1EOS_>
   d437c:	7c23      	ldrb	r3, [r4, #16]
   d437e:	7433      	strb	r3, [r6, #16]
   d4380:	4620      	mov	r0, r4
   d4382:	f003 fad4 	bl	d792e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4386:	3414      	adds	r4, #20
   d4388:	3614      	adds	r6, #20
   d438a:	e7f0      	b.n	d436e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4392:	2300      	movs	r3, #0
   d4394:	6003      	str	r3, [r0, #0]
   d4396:	6043      	str	r3, [r0, #4]
   d4398:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d439a:	684e      	ldr	r6, [r1, #4]
   d439c:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d439e:	4604      	mov	r4, r0
   d43a0:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d43a2:	dd24      	ble.n	d43ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d43a4:	f04f 0814 	mov.w	r8, #20
   d43a8:	fb08 f006 	mul.w	r0, r8, r6
   d43ac:	f000 fb0c 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d43b0:	4605      	mov	r5, r0
   d43b2:	b1e0      	cbz	r0, d43ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d43b4:	e894 0006 	ldmia.w	r4, {r1, r2}
   d43b8:	fb08 1202 	mla	r2, r8, r2, r1
   d43bc:	f7ff ffb9 	bl	d4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d43c0:	6820      	ldr	r0, [r4, #0]
   d43c2:	f000 fb09 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d43c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d43c8:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d43ca:	683e      	ldr	r6, [r7, #0]
   d43cc:	687b      	ldr	r3, [r7, #4]
   d43ce:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d43d2:	4546      	cmp	r6, r8
   d43d4:	d009      	beq.n	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d43d6:	b12d      	cbz	r5, d43e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d43d8:	4631      	mov	r1, r6
   d43da:	4628      	mov	r0, r5
   d43dc:	f003 fb10 	bl	d7a00 <_ZN6StringC1ERKS_>
   d43e0:	7c33      	ldrb	r3, [r6, #16]
   d43e2:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d43e4:	3614      	adds	r6, #20
   d43e6:	3514      	adds	r5, #20
   d43e8:	e7f3      	b.n	d43d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d43ea:	687b      	ldr	r3, [r7, #4]
   d43ec:	6063      	str	r3, [r4, #4]
    }
}
   d43ee:	4620      	mov	r0, r4
   d43f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d43f4 <_GLOBAL__sub_I_logHandler>:
   d43f4:	b570      	push	{r4, r5, r6, lr}
   d43f6:	b08c      	sub	sp, #48	; 0x30
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d43f8:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43fa:	f000 f931 	bl	d4660 <HAL_Pin_Map>
   d43fe:	9400      	str	r4, [sp, #0]
   d4400:	9401      	str	r4, [sp, #4]
   d4402:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4404:	f003 fc20 	bl	d7c48 <_Z16_fetch_usbserialv>
   d4408:	4669      	mov	r1, sp
   d440a:	4606      	mov	r6, r0
   d440c:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d440e:	4d28      	ldr	r5, [pc, #160]	; (d44b0 <_GLOBAL__sub_I_logHandler+0xbc>)
   d4410:	f7ff ffbd 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4414:	a903      	add	r1, sp, #12
   d4416:	a806      	add	r0, sp, #24
   d4418:	f7ff ffb9 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d441c:	4b25      	ldr	r3, [pc, #148]	; (d44b4 <_GLOBAL__sub_I_logHandler+0xc0>)
   d441e:	602b      	str	r3, [r5, #0]
   d4420:	a906      	add	r1, sp, #24
   d4422:	a809      	add	r0, sp, #36	; 0x24
   d4424:	f7ff ffb3 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4428:	aa09      	add	r2, sp, #36	; 0x24
   d442a:	2101      	movs	r1, #1
   d442c:	1d28      	adds	r0, r5, #4
   d442e:	f002 feb6 	bl	d719e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4432:	a809      	add	r0, sp, #36	; 0x24
   d4434:	f7ff ff6a 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4438:	a806      	add	r0, sp, #24
   d443a:	f7ff ff67 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d443e:	4b1e      	ldr	r3, [pc, #120]	; (d44b8 <_GLOBAL__sub_I_logHandler+0xc4>)
   d4440:	602b      	str	r3, [r5, #0]
   d4442:	622e      	str	r6, [r5, #32]
   d4444:	a803      	add	r0, sp, #12
   d4446:	f7ff ff61 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d444a:	4b1c      	ldr	r3, [pc, #112]	; (d44bc <_GLOBAL__sub_I_logHandler+0xc8>)
   d444c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d444e:	f003 fbfb 	bl	d7c48 <_Z16_fetch_usbserialv>
   d4452:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4456:	f003 fbe7 	bl	d7c28 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d445a:	f002 fb4d 	bl	d6af8 <_ZN5spark10LogManager8instanceEv>
   d445e:	4629      	mov	r1, r5
   d4460:	f002 fe30 	bl	d70c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 * Author: Brandon Satrom <brandon@particle.io>
 * Date: 07/29/2019
 */
#include "Particle.h"

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4464:	4668      	mov	r0, sp
   d4466:	f7ff ff51 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d446a:	4a15      	ldr	r2, [pc, #84]	; (d44c0 <_GLOBAL__sub_I_logHandler+0xcc>)
   d446c:	4915      	ldr	r1, [pc, #84]	; (d44c4 <_GLOBAL__sub_I_logHandler+0xd0>)
   d446e:	4628      	mov	r0, r5
   d4470:	f003 fd48 	bl	d7f04 <__aeabi_atexit>

// UUID FOR TEAM ONE (CATCHING ON BEACON TWO)
// const BleUuid FLAG_BEACON_UUID = "422b00f5-56e4-4969-9c70-52cc847f7e2c";

/// UUID FOR TEAM TWO (CATCHING ON BEACON ONE)
const BleUuid FLAG_BEACON_UUID = "107367af-834a-4690-bfc4-133c6e6ca6e4";
   d4474:	4914      	ldr	r1, [pc, #80]	; (d44c8 <_GLOBAL__sub_I_logHandler+0xd4>)
   d4476:	4815      	ldr	r0, [pc, #84]	; (d44cc <_GLOBAL__sub_I_logHandler+0xd8>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4478:	4d15      	ldr	r5, [pc, #84]	; (d44d0 <_GLOBAL__sub_I_logHandler+0xdc>)
   d447a:	f000 fb60 	bl	d4b3e <_ZN8particle7BleUuidC1EPKc>

BleScanResult scanResults[SCAN_RESULT_MAX];
   d447e:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4482:	f104 0008 	add.w	r0, r4, #8
   d4486:	4428      	add	r0, r5
   d4488:	f000 fc53 	bl	d4d32 <_ZN8particle18BleAdvertisingDataC1Ev>
   d448c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4490:	4428      	add	r0, r5
   d4492:	3454      	adds	r4, #84	; 0x54
   d4494:	f000 fc4d 	bl	d4d32 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4498:	42b4      	cmp	r4, r6
   d449a:	d1f2      	bne.n	d4482 <_GLOBAL__sub_I_logHandler+0x8e>
BlePeerDevice beacon;
   d449c:	480d      	ldr	r0, [pc, #52]	; (d44d4 <_GLOBAL__sub_I_logHandler+0xe0>)
   d449e:	f001 fae3 	bl	d5a68 <_ZN8particle13BlePeerDeviceC1Ev>
   d44a2:	4a07      	ldr	r2, [pc, #28]	; (d44c0 <_GLOBAL__sub_I_logHandler+0xcc>)
   d44a4:	490c      	ldr	r1, [pc, #48]	; (d44d8 <_GLOBAL__sub_I_logHandler+0xe4>)
   d44a6:	480b      	ldr	r0, [pc, #44]	; (d44d4 <_GLOBAL__sub_I_logHandler+0xe0>)
   d44a8:	f003 fd2c 	bl	d7f04 <__aeabi_atexit>
  }
  else if (millis() > cooldownStart + COOLDOWN_DELAY)
  {
    coolingDown = false;
  }
   d44ac:	b00c      	add	sp, #48	; 0x30
   d44ae:	bd70      	pop	{r4, r5, r6, pc}
   d44b0:	2003d950 	.word	0x2003d950
   d44b4:	000d849c 	.word	0x000d849c
   d44b8:	000d883c 	.word	0x000d883c
   d44bc:	000d84b4 	.word	0x000d84b4
   d44c0:	2003d948 	.word	0x2003d948
   d44c4:	000d40d5 	.word	0x000d40d5
   d44c8:	000d8558 	.word	0x000d8558
   d44cc:	2003d974 	.word	0x2003d974
   d44d0:	2003d988 	.word	0x2003d988
   d44d4:	2003e360 	.word	0x2003e360
   d44d8:	000d51e7 	.word	0x000d51e7

000d44dc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <hal_ble_stack_init+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	689b      	ldr	r3, [r3, #8]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030278 	.word	0x00030278

000d44ec <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_ble_set_callback_on_events+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	695b      	ldr	r3, [r3, #20]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030278 	.word	0x00030278

000d44fc <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_ble_gap_start_scan+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030278 	.word	0x00030278

000d450c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b03      	ldr	r3, [pc, #12]	; (d451c <hal_ble_gap_stop_scan+0x10>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d4516:	9301      	str	r3, [sp, #4]
   d4518:	bd08      	pop	{r3, pc}
   d451a:	0000      	.short	0x0000
   d451c:	00030278 	.word	0x00030278

000d4520 <hal_ble_gap_connect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect, int(const hal_ble_addr_t*, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b03      	ldr	r3, [pc, #12]	; (d4530 <hal_ble_gap_connect+0x10>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d452a:	9301      	str	r3, [sp, #4]
   d452c:	bd08      	pop	{r3, pc}
   d452e:	0000      	.short	0x0000
   d4530:	00030278 	.word	0x00030278

000d4534 <hal_ble_gap_disconnect>:
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b03      	ldr	r3, [pc, #12]	; (d4544 <hal_ble_gap_disconnect+0x10>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d453e:	9301      	str	r3, [sp, #4]
   d4540:	bd08      	pop	{r3, pc}
   d4542:	0000      	.short	0x0000
   d4544:	00030278 	.word	0x00030278

000d4548 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b03      	ldr	r3, [pc, #12]	; (d4558 <hal_ble_gatt_server_add_service+0x10>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4552:	9301      	str	r3, [sp, #4]
   d4554:	bd08      	pop	{r3, pc}
   d4556:	0000      	.short	0x0000
   d4558:	00030278 	.word	0x00030278

000d455c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b03      	ldr	r3, [pc, #12]	; (d456c <hal_ble_gatt_server_add_characteristic+0x10>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d4566:	9301      	str	r3, [sp, #4]
   d4568:	bd08      	pop	{r3, pc}
   d456a:	0000      	.short	0x0000
   d456c:	00030278 	.word	0x00030278

000d4570 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b03      	ldr	r3, [pc, #12]	; (d4580 <hal_ble_gatt_client_discover_all_services+0x10>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d457a:	9301      	str	r3, [sp, #4]
   d457c:	bd08      	pop	{r3, pc}
   d457e:	0000      	.short	0x0000
   d4580:	00030278 	.word	0x00030278

000d4584 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b03      	ldr	r3, [pc, #12]	; (d4594 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d458e:	9301      	str	r3, [sp, #4]
   d4590:	bd08      	pop	{r3, pc}
   d4592:	0000      	.short	0x0000
   d4594:	00030278 	.word	0x00030278

000d4598 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b03      	ldr	r3, [pc, #12]	; (d45a8 <hal_ble_gatt_client_configure_cccd+0x10>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   d45a2:	9301      	str	r3, [sp, #4]
   d45a4:	bd08      	pop	{r3, pc}
   d45a6:	0000      	.short	0x0000
   d45a8:	00030278 	.word	0x00030278

000d45ac <hal_ble_gatt_client_read>:
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b03      	ldr	r3, [pc, #12]	; (d45bc <hal_ble_gatt_client_read+0x10>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d45b6:	9301      	str	r3, [sp, #4]
   d45b8:	bd08      	pop	{r3, pc}
   d45ba:	0000      	.short	0x0000
   d45bc:	00030278 	.word	0x00030278

000d45c0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <os_thread_is_current+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	689b      	ldr	r3, [r3, #8]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030248 	.word	0x00030248

000d45d0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <os_thread_join+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	691b      	ldr	r3, [r3, #16]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030248 	.word	0x00030248

000d45e0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <os_thread_cleanup+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	695b      	ldr	r3, [r3, #20]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030248 	.word	0x00030248

000d45f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <os_mutex_create+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030248 	.word	0x00030248

000d4600 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <os_mutex_recursive_create+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030248 	.word	0x00030248

000d4610 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <os_mutex_recursive_lock+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030248 	.word	0x00030248

000d4620 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <os_mutex_recursive_unlock+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030248 	.word	0x00030248

000d4630 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_RNG_GetRandomNumber+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	685b      	ldr	r3, [r3, #4]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030218 	.word	0x00030218

000d4640 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_Delay_Microseconds+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	68db      	ldr	r3, [r3, #12]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030218 	.word	0x00030218

000d4650 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	695b      	ldr	r3, [r3, #20]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030218 	.word	0x00030218

000d4660 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_Pin_Map+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	681b      	ldr	r3, [r3, #0]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003022c 	.word	0x0003022c

000d4670 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_Pin_Mode+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	689b      	ldr	r3, [r3, #8]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	0003022c 	.word	0x0003022c

000d4680 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_Get_Pin_Mode+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	68db      	ldr	r3, [r3, #12]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003022c 	.word	0x0003022c

000d4690 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_GPIO_Write+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	691b      	ldr	r3, [r3, #16]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003022c 	.word	0x0003022c

000d46a0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_I2C_Write_Data+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6a1b      	ldr	r3, [r3, #32]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030228 	.word	0x00030228

000d46b0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_I2C_Available_Data+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030228 	.word	0x00030228

000d46c0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_I2C_Read_Data+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030228 	.word	0x00030228

000d46d0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_I2C_Peek_Data+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030228 	.word	0x00030228

000d46e0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_I2C_Flush_Data+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030228 	.word	0x00030228

000d46f0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_I2C_Is_Enabled+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030228 	.word	0x00030228

000d4700 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_I2C_Init+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030228 	.word	0x00030228

000d4710 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <inet_inet_ntop+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030264 	.word	0x00030264

000d4720 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <netdb_freeaddrinfo+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	689b      	ldr	r3, [r3, #8]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030268 	.word	0x00030268

000d4730 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <netdb_getaddrinfo+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	68db      	ldr	r3, [r3, #12]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030268 	.word	0x00030268

000d4740 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_SPI_Init+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	69db      	ldr	r3, [r3, #28]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030230 	.word	0x00030230

000d4750 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_SPI_Is_Enabled+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6a1b      	ldr	r3, [r3, #32]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030230 	.word	0x00030230

000d4760 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USART_Init+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	681b      	ldr	r3, [r3, #0]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003023c 	.word	0x0003023c

000d4770 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_USART_End+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	689b      	ldr	r3, [r3, #8]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003023c 	.word	0x0003023c

000d4780 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USART_Write_Data+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	68db      	ldr	r3, [r3, #12]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003023c 	.word	0x0003023c

000d4790 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USART_Available_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	691b      	ldr	r3, [r3, #16]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003023c 	.word	0x0003023c

000d47a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USART_Read_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	695b      	ldr	r3, [r3, #20]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003023c 	.word	0x0003023c

000d47b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USART_Peek_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	699b      	ldr	r3, [r3, #24]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003023c 	.word	0x0003023c

000d47c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USART_Flush_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	69db      	ldr	r3, [r3, #28]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003023c 	.word	0x0003023c

000d47d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USART_Is_Enabled+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6a1b      	ldr	r3, [r3, #32]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USART_Available_Data_For_Write+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USART_BeginConfig+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USB_USART_Init+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	681b      	ldr	r3, [r3, #0]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003024c 	.word	0x0003024c

000d4810 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USB_USART_Begin+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	685b      	ldr	r3, [r3, #4]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003024c 	.word	0x0003024c

000d4820 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USB_USART_End+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	689b      	ldr	r3, [r3, #8]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003024c 	.word	0x0003024c

000d4830 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USB_USART_Available_Data+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	691b      	ldr	r3, [r3, #16]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003024c 	.word	0x0003024c

000d4840 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	695b      	ldr	r3, [r3, #20]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Receive_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	699b      	ldr	r3, [r3, #24]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Send_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	69db      	ldr	r3, [r3, #28]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USB_USART_Flush_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6a1b      	ldr	r3, [r3, #32]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003024c 	.word	0x0003024c

000d4880 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <panic_+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030260 	.word	0x00030260

000d4890 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <log_message+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030260 	.word	0x00030260

000d48a0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <log_message_v+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030260 	.word	0x00030260

000d48b0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <log_level_name+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030260 	.word	0x00030260

000d48c0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <log_set_callbacks+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030260 	.word	0x00030260

000d48d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <set_system_mode+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	685b      	ldr	r3, [r3, #4]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030220 	.word	0x00030220

000d48e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <system_delay_ms+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	695b      	ldr	r3, [r3, #20]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030220 	.word	0x00030220

000d48f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b03      	ldr	r3, [pc, #12]	; (d4900 <system_ctrl_set_app_request_handler+0x10>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48fa:	9301      	str	r3, [sp, #4]
   d48fc:	bd08      	pop	{r3, pc}
   d48fe:	0000      	.short	0x0000
   d4900:	00030220 	.word	0x00030220

000d4904 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b03      	ldr	r3, [pc, #12]	; (d4914 <system_ctrl_set_result+0x10>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d490e:	9301      	str	r3, [sp, #4]
   d4910:	bd08      	pop	{r3, pc}
   d4912:	0000      	.short	0x0000
   d4914:	00030220 	.word	0x00030220

000d4918 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <spark_set_random_seed_from_cloud_handler+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030244 	.word	0x00030244

000d4928 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_connect+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	685b      	ldr	r3, [r3, #4]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_connecting+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	689b      	ldr	r3, [r3, #8]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_disconnect+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	68db      	ldr	r3, [r3, #12]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <network_ready+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	691b      	ldr	r3, [r3, #16]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030240 	.word	0x00030240

000d4968 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <network_on+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	695b      	ldr	r3, [r3, #20]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030240 	.word	0x00030240

000d4978 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <network_off+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	699b      	ldr	r3, [r3, #24]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030240 	.word	0x00030240

000d4988 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <network_listen+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	69db      	ldr	r3, [r3, #28]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030240 	.word	0x00030240

000d4998 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <network_listening+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030240 	.word	0x00030240

000d49a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <network_set_listen_timeout+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030240 	.word	0x00030240

000d49b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <network_get_listen_timeout+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030240 	.word	0x00030240

000d49c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <malloc+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	681b      	ldr	r3, [r3, #0]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	0003021c 	.word	0x0003021c

000d49d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <free+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	685b      	ldr	r3, [r3, #4]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	0003021c 	.word	0x0003021c

000d49e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <realloc+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	689b      	ldr	r3, [r3, #8]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	0003021c 	.word	0x0003021c

000d49f8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <vsnprintf+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	0003021c 	.word	0x0003021c

000d4a08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4a08:	2100      	movs	r1, #0
   d4a0a:	f7ff bf69 	b.w	d48e0 <system_delay_ms>

000d4a0e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a0e:	4770      	bx	lr

000d4a10 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4a10:	2000      	movs	r0, #0
   d4a12:	4770      	bx	lr

000d4a14 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a14:	4770      	bx	lr

000d4a16 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4a16:	2000      	movs	r0, #0
   d4a18:	4770      	bx	lr

000d4a1a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a1a:	4770      	bx	lr

000d4a1c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4a1c:	2000      	movs	r0, #0
   d4a1e:	4770      	bx	lr

000d4a20 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a20:	b510      	push	{r4, lr}
   d4a22:	2114      	movs	r1, #20
   d4a24:	4604      	mov	r4, r0
   d4a26:	f003 fa72 	bl	d7f0e <_ZdlPvj>
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	bd10      	pop	{r4, pc}

000d4a2e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4a2e:	b510      	push	{r4, lr}
   d4a30:	2114      	movs	r1, #20
   d4a32:	4604      	mov	r4, r0
   d4a34:	f003 fa6b 	bl	d7f0e <_ZdlPvj>
   d4a38:	4620      	mov	r0, r4
   d4a3a:	bd10      	pop	{r4, pc}

000d4a3c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	2114      	movs	r1, #20
   d4a40:	4604      	mov	r4, r0
   d4a42:	f003 fa64 	bl	d7f0e <_ZdlPvj>
   d4a46:	4620      	mov	r0, r4
   d4a48:	bd10      	pop	{r4, pc}

000d4a4a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4a4a:	f7ff bb26 	b.w	d409a <_ZdlPv>

000d4a4e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4a4e:	f7ff bb24 	b.w	d409a <_ZdlPv>

000d4a52 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4a52:	f7ff bb22 	b.w	d409a <_ZdlPv>

000d4a56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a56:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a58:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a5a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a5c:	689b      	ldr	r3, [r3, #8]
   d4a5e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a60:	68a3      	ldr	r3, [r4, #8]
   d4a62:	3b01      	subs	r3, #1
   d4a64:	60a3      	str	r3, [r4, #8]
   d4a66:	b92b      	cbnz	r3, d4a74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d4a68:	6823      	ldr	r3, [r4, #0]
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4a72:	4718      	bx	r3
   d4a74:	bd10      	pop	{r4, pc}

000d4a76 <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d4a76:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d4a78:	7982      	ldrb	r2, [r0, #6]
   d4a7a:	798b      	ldrb	r3, [r1, #6]
   d4a7c:	429a      	cmp	r2, r3
   d4a7e:	d106      	bne.n	d4a8e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4a80:	2206      	movs	r2, #6
   d4a82:	f003 fbb5 	bl	d81f0 <memcmp>
   d4a86:	fab0 f080 	clz	r0, r0
   d4a8a:	0940      	lsrs	r0, r0, #5
   d4a8c:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d4a8e:	2000      	movs	r0, #0
    }
   d4a90:	bd08      	pop	{r3, pc}

000d4a92 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4a92:	b510      	push	{r4, lr}
            : uuid_() {
   d4a94:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4a96:	4604      	mov	r4, r0
            : uuid_() {
   d4a98:	2100      	movs	r1, #0
   d4a9a:	f003 fbde 	bl	d825a <memset>
    }
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	bd10      	pop	{r4, pc}
	...

000d4aa4 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4aa4:	b510      	push	{r4, lr}
            locked_(false) {
   d4aa6:	2300      	movs	r3, #0
   d4aa8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4aaa:	4b04      	ldr	r3, [pc, #16]	; (d4abc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4aac:	4604      	mov	r4, r0
   d4aae:	6818      	ldr	r0, [r3, #0]
   d4ab0:	f7ff fdae 	bl	d4610 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4ab4:	2301      	movs	r3, #1
   d4ab6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4ab8:	4620      	mov	r0, r4
   d4aba:	bd10      	pop	{r4, pc}
   d4abc:	2003e394 	.word	0x2003e394

000d4ac0 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4ac0:	b510      	push	{r4, lr}
        if (locked_) {
   d4ac2:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4ac4:	4604      	mov	r4, r0
        if (locked_) {
   d4ac6:	b11b      	cbz	r3, d4ad0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4ac8:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4aca:	6818      	ldr	r0, [r3, #0]
   d4acc:	f7ff fda8 	bl	d4620 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4ad0:	4620      	mov	r0, r4
   d4ad2:	bd10      	pop	{r4, pc}
   d4ad4:	2003e394 	.word	0x2003e394

000d4ad8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
 */
BleUuid::BleUuid(const BleUuid& uuid)
        : uuid_(uuid.uuid_) {
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d4ad8:	b570      	push	{r4, r5, r6, lr}
   d4ada:	460c      	mov	r4, r1
   d4adc:	4605      	mov	r5, r0
   d4ade:	4616      	mov	r6, r2
        : BleUuid() {
   d4ae0:	f7ff ffd7 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
    if (uuid128 == nullptr) {
   d4ae4:	b92c      	cbnz	r4, d4af2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4ae6:	2210      	movs	r2, #16
   d4ae8:	4621      	mov	r1, r4
   d4aea:	4628      	mov	r0, r5
   d4aec:	f003 fbb5 	bl	d825a <memset>
   d4af0:	e016      	b.n	d4b20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d4af2:	2e01      	cmp	r6, #1
   d4af4:	d109      	bne.n	d4b0a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4af6:	462b      	mov	r3, r5
   d4af8:	f104 0210 	add.w	r2, r4, #16
   d4afc:	f854 1b04 	ldr.w	r1, [r4], #4
   d4b00:	f843 1b04 	str.w	r1, [r3], #4
   d4b04:	4294      	cmp	r4, r2
   d4b06:	d1f9      	bne.n	d4afc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4b08:	e008      	b.n	d4b1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4b0a:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (uuid128 == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4b0c:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4b0e:	5ce1      	ldrb	r1, [r4, r3]
   d4b10:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4b14:	3b01      	subs	r3, #1
   d4b16:	b2db      	uxtb	r3, r3
   d4b18:	2bff      	cmp	r3, #255	; 0xff
   d4b1a:	d1f8      	bne.n	d4b0e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4b1c:	2301      	movs	r3, #1
   d4b1e:	742b      	strb	r3, [r5, #16]
    }
}
   d4b20:	4628      	mov	r0, r5
   d4b22:	bd70      	pop	{r4, r5, r6, pc}

000d4b24 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4b24:	b538      	push	{r3, r4, r5, lr}
   d4b26:	4604      	mov	r4, r0
   d4b28:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4b2a:	461a      	mov	r2, r3
   d4b2c:	f7ff ffd4 	bl	d4ad8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d4b30:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4b32:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4b34:	0a2d      	lsrs	r5, r5, #8
   d4b36:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4b38:	7423      	strb	r3, [r4, #16]
}
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	bd38      	pop	{r3, r4, r5, pc}

000d4b3e <_ZN8particle7BleUuidC1EPKc>:

BleUuid::BleUuid(const char* uuid)
   d4b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b42:	4688      	mov	r8, r1
   d4b44:	4607      	mov	r7, r0
        : BleUuid() {
   d4b46:	f7ff ffa4 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d4b4a:	f1b8 0f00 	cmp.w	r8, #0
   d4b4e:	d002      	beq.n	d4b56 <_ZN8particle7BleUuidC1EPKc+0x18>
   d4b50:	2600      	movs	r6, #0
   d4b52:	2510      	movs	r5, #16
   d4b54:	e00f      	b.n	d4b76 <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4b56:	2210      	movs	r2, #16
   d4b58:	4641      	mov	r1, r8
   d4b5a:	4638      	mov	r0, r7
   d4b5c:	f003 fb7d 	bl	d825a <memset>
   d4b60:	e04a      	b.n	d4bf8 <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d4b62:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4b66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4b6a:	b2d1      	uxtb	r1, r2
   d4b6c:	2909      	cmp	r1, #9
   d4b6e:	d808      	bhi.n	d4b82 <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d4b70:	1c53      	adds	r3, r2, #1
   d4b72:	d114      	bne.n	d4b9e <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d4b74:	3601      	adds	r6, #1
   d4b76:	4640      	mov	r0, r8
   d4b78:	f003 fbc2 	bl	d8300 <strlen>
   d4b7c:	4286      	cmp	r6, r0
   d4b7e:	d3f0      	bcc.n	d4b62 <_ZN8particle7BleUuidC1EPKc+0x24>
   d4b80:	e033      	b.n	d4bea <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d4b82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d4b86:	2a05      	cmp	r2, #5
   d4b88:	d802      	bhi.n	d4b90 <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d4b8a:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d4b8e:	e7ef      	b.n	d4b70 <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d4b90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d4b94:	2a05      	cmp	r2, #5
   d4b96:	d8ed      	bhi.n	d4b74 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d4b98:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d4b9c:	e7e8      	b.n	d4b70 <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d4b9e:	0112      	lsls	r2, r2, #4
   d4ba0:	3d01      	subs	r5, #1
   d4ba2:	b2d4      	uxtb	r4, r2
   d4ba4:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d4ba6:	4640      	mov	r0, r8
   d4ba8:	f003 fbaa 	bl	d8300 <strlen>
   d4bac:	3601      	adds	r6, #1
   d4bae:	4286      	cmp	r6, r0
   d4bb0:	d2e0      	bcs.n	d4b74 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d4bb2:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4bb6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d4bba:	b2d9      	uxtb	r1, r3
   d4bbc:	2909      	cmp	r1, #9
   d4bbe:	d90e      	bls.n	d4bde <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d4bc0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d4bc4:	2b05      	cmp	r3, #5
   d4bc6:	d802      	bhi.n	d4bce <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d4bc8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d4bcc:	e007      	b.n	d4bde <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d4bce:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d4bd2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4bd4:	bf94      	ite	ls
   d4bd6:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d4bda:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
   d4bde:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d4be0:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d4be2:	bf1c      	itt	ne
   d4be4:	4314      	orrne	r4, r2
   d4be6:	557c      	strbne	r4, [r7, r5]
   d4be8:	e7c4      	b.n	d4b74 <_ZN8particle7BleUuidC1EPKc+0x36>
   d4bea:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d4bec:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4bee:	42bb      	cmp	r3, r7
   d4bf0:	d002      	beq.n	d4bf8 <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d4bf2:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4bf6:	e7fa      	b.n	d4bee <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4bf8:	2301      	movs	r3, #1
   d4bfa:	743b      	strb	r3, [r7, #16]
}
   d4bfc:	4638      	mov	r0, r7
   d4bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c02 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4c02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4c04:	7c03      	ldrb	r3, [r0, #16]
   d4c06:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d4c0a:	4604      	mov	r4, r0
   d4c0c:	d00a      	beq.n	d4c24 <_ZNK8particle7BleUuid7isValidEv+0x22>
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4c0e:	2210      	movs	r2, #16
   d4c10:	2100      	movs	r1, #0
   d4c12:	4668      	mov	r0, sp
   d4c14:	f003 fb21 	bl	d825a <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4c18:	2210      	movs	r2, #16
   d4c1a:	4669      	mov	r1, sp
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f003 fae7 	bl	d81f0 <memcmp>
   d4c22:	e000      	b.n	d4c26 <_ZNK8particle7BleUuid7isValidEv+0x24>
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
   d4c24:	8800      	ldrh	r0, [r0, #0]
   d4c26:	3000      	adds	r0, #0
   d4c28:	bf18      	it	ne
   d4c2a:	2001      	movne	r0, #1
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d4c2c:	b004      	add	sp, #16
   d4c2e:	bd10      	pop	{r4, pc}

000d4c30 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4c30:	b510      	push	{r4, lr}
   d4c32:	7c04      	ldrb	r4, [r0, #16]
   d4c34:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d4c38:	d006      	beq.n	d4c48 <_ZNK8particle7BleUuideqERKS0_+0x18>
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4c3a:	2210      	movs	r2, #16
   d4c3c:	f003 fad8 	bl	d81f0 <memcmp>
   d4c40:	fab0 f080 	clz	r0, r0
   d4c44:	0940      	lsrs	r0, r0, #5
   d4c46:	bd10      	pop	{r4, pc}
    }
}

bool BleUuid::operator==(const BleUuid& uuid) const {
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4c48:	8803      	ldrh	r3, [r0, #0]
   d4c4a:	8808      	ldrh	r0, [r1, #0]
   d4c4c:	1a1b      	subs	r3, r3, r0
   d4c4e:	4258      	negs	r0, r3
   d4c50:	4158      	adcs	r0, r3
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d4c52:	bd10      	pop	{r4, pc}

000d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d4c54:	b538      	push	{r3, r4, r5, lr}
   d4c56:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d4c58:	b101      	cbz	r1, d4c5c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d4c5a:	b912      	cbnz	r2, d4c62 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d4c5c:	2000      	movs	r0, #0
   d4c5e:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d4c60:	bd38      	pop	{r3, r4, r5, pc}
   d4c62:	2a1f      	cmp	r2, #31
   d4c64:	bf28      	it	cs
   d4c66:	221f      	movcs	r2, #31
   d4c68:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d4c6a:	f003 fad0 	bl	d820e <memcpy>
    selfLen_ = len;
   d4c6e:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d4c70:	4620      	mov	r0, r4
}
   d4c72:	bd38      	pop	{r3, r4, r5, pc}

000d4c74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4c76:	b18b      	cbz	r3, d4c9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4c78:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c7a:	1ce5      	adds	r5, r4, #3
   d4c7c:	428d      	cmp	r5, r1
   d4c7e:	d80f      	bhi.n	d4ca0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4c80:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4c82:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4c84:	5d87      	ldrb	r7, [r0, r6]
   d4c86:	4297      	cmp	r7, r2
   d4c88:	d105      	bne.n	d4c96 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4c8a:	442e      	add	r6, r5
   d4c8c:	42b1      	cmp	r1, r6
   d4c8e:	d307      	bcc.n	d4ca0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4c90:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4c92:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4c96:	3501      	adds	r5, #1
   d4c98:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c9a:	e7ee      	b.n	d4c7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4c9c:	4618      	mov	r0, r3
   d4c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ca0:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ca4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4ca8:	4604      	mov	r4, r0
   d4caa:	460e      	mov	r6, r1
   d4cac:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4cae:	4617      	mov	r7, r2
   d4cb0:	2a00      	cmp	r2, #0
   d4cb2:	d03a      	beq.n	d4d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4cb4:	460a      	mov	r2, r1
   d4cb6:	ab01      	add	r3, sp, #4
   d4cb8:	6a01      	ldr	r1, [r0, #32]
   d4cba:	f7ff ffdb 	bl	d4c74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4cbe:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4cc2:	6a22      	ldr	r2, [r4, #32]
   d4cc4:	bb03      	cbnz	r3, d4d08 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4cc6:	b1f8      	cbz	r0, d4d08 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4cc8:	1c96      	adds	r6, r2, #2
   d4cca:	442e      	add	r6, r5
   d4ccc:	1a36      	subs	r6, r6, r0
   d4cce:	2e1f      	cmp	r6, #31
   d4cd0:	d82b      	bhi.n	d4d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4cd2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4cd6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4cda:	ebc8 0202 	rsb	r2, r8, r2
   d4cde:	1a12      	subs	r2, r2, r0
   d4ce0:	eb00 0108 	add.w	r1, r0, r8
   d4ce4:	eb05 0009 	add.w	r0, r5, r9
   d4ce8:	b292      	uxth	r2, r2
   d4cea:	4421      	add	r1, r4
   d4cec:	4420      	add	r0, r4
   d4cee:	f003 fa99 	bl	d8224 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4cf2:	1c6b      	adds	r3, r5, #1
   d4cf4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4cf8:	462a      	mov	r2, r5
   d4cfa:	4639      	mov	r1, r7
   d4cfc:	eb04 0009 	add.w	r0, r4, r9
   d4d00:	f003 fa85 	bl	d820e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4d04:	6226      	str	r6, [r4, #32]
   d4d06:	e010      	b.n	d4d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4d08:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4d0a:	182b      	adds	r3, r5, r0
   d4d0c:	2b1f      	cmp	r3, #31
   d4d0e:	d80c      	bhi.n	d4d2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4d10:	1c6b      	adds	r3, r5, #1
   d4d12:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d14:	4422      	add	r2, r4
   d4d16:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4d18:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4d1a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4d1c:	4420      	add	r0, r4
   d4d1e:	462a      	mov	r2, r5
   d4d20:	f003 fa75 	bl	d820e <memcpy>
        selfLen_ += len;
   d4d24:	6a22      	ldr	r2, [r4, #32]
   d4d26:	442a      	add	r2, r5
   d4d28:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4d2a:	6a20      	ldr	r0, [r4, #32]
}
   d4d2c:	b003      	add	sp, #12
   d4d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4d32 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4d32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4d34:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4d36:	4603      	mov	r3, r0
   d4d38:	f100 021f 	add.w	r2, r0, #31
   d4d3c:	2000      	movs	r0, #0
   d4d3e:	f803 0b01 	strb.w	r0, [r3], #1
   d4d42:	4293      	cmp	r3, r2
   d4d44:	f04f 0100 	mov.w	r1, #0
   d4d48:	d1f9      	bne.n	d4d3e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4d4a:	aa04      	add	r2, sp, #16
   d4d4c:	2306      	movs	r3, #6
   d4d4e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d52:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4d54:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d56:	9100      	str	r1, [sp, #0]
   d4d58:	4620      	mov	r0, r4
   d4d5a:	4619      	mov	r1, r3
   d4d5c:	f7ff ffa2 	bl	d4ca4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4d60:	4620      	mov	r0, r4
   d4d62:	b004      	add	sp, #16
   d4d64:	bd10      	pop	{r4, pc}

000d4d66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d6a:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d6c:	b087      	sub	sp, #28
   d4d6e:	4606      	mov	r6, r0
   d4d70:	4688      	mov	r8, r1
   d4d72:	4617      	mov	r7, r2
   d4d74:	4699      	mov	r9, r3
    size_t offset, adsLen = 0, found = 0;
   d4d76:	462c      	mov	r4, r5
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d78:	6a31      	ldr	r1, [r6, #32]
   d4d7a:	428d      	cmp	r5, r1
   d4d7c:	d252      	bcs.n	d4e24 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xbe>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d4d7e:	466b      	mov	r3, sp
   d4d80:	4642      	mov	r2, r8
   d4d82:	1b49      	subs	r1, r1, r5
   d4d84:	1970      	adds	r0, r6, r5
   d4d86:	f7ff ff75 	bl	d4c74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d4d8a:	4682      	mov	sl, r0
   d4d8c:	2800      	cmp	r0, #0
   d4d8e:	d049      	beq.n	d4e24 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xbe>
   d4d90:	454c      	cmp	r4, r9
   d4d92:	d247      	bcs.n	d4e24 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xbe>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d4d94:	2804      	cmp	r0, #4
   d4d96:	9900      	ldr	r1, [sp, #0]
   d4d98:	d123      	bne.n	d4de2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x7c>
                uint16_t temp = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d4d9a:	4429      	add	r1, r5
   d4d9c:	4431      	add	r1, r6
        uuid_.type = BLE_UUID_TYPE_128BIT;
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
   d4d9e:	a801      	add	r0, sp, #4
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uint16_t temp = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d4da0:	788b      	ldrb	r3, [r1, #2]
   d4da2:	f891 b003 	ldrb.w	fp, [r1, #3]
   d4da6:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
        uuid_.type = BLE_UUID_TYPE_128BIT;
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
   d4daa:	f7ff fe72 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
   d4dae:	f10d 0e18 	add.w	lr, sp, #24
   d4db2:	2300      	movs	r3, #0
   d4db4:	f80e 3d04 	strb.w	r3, [lr, #-4]!
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uint16_t temp = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
                BleUuid uuid(temp);
                uuids[found++] = uuid;
   d4db8:	2314      	movs	r3, #20
   d4dba:	f104 0c01 	add.w	ip, r4, #1
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    uuid_.uuid16 = uuid16;
   d4dbe:	f8ad b004 	strh.w	fp, [sp, #4]
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uint16_t temp = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
                BleUuid uuid(temp);
                uuids[found++] = uuid;
   d4dc2:	aa01      	add	r2, sp, #4
   d4dc4:	fb03 7404 	mla	r4, r3, r4, r7
   d4dc8:	4613      	mov	r3, r2
   d4dca:	cb03      	ldmia	r3!, {r0, r1}
   d4dcc:	4573      	cmp	r3, lr
   d4dce:	6020      	str	r0, [r4, #0]
   d4dd0:	6061      	str	r1, [r4, #4]
   d4dd2:	461a      	mov	r2, r3
   d4dd4:	f104 0408 	add.w	r4, r4, #8
   d4dd8:	d1f6      	bne.n	d4dc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x62>
   d4dda:	6818      	ldr	r0, [r3, #0]
   d4ddc:	6020      	str	r0, [r4, #0]
   d4dde:	4664      	mov	r4, ip
   d4de0:	e01c      	b.n	d4e1c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xb6>
            } else if (adsLen == 18) {
   d4de2:	2812      	cmp	r0, #18
   d4de4:	d11a      	bne.n	d4e1c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xb6>
                BleUuid uuid(&selfData_[i + offset + 2]);
   d4de6:	3102      	adds	r1, #2
   d4de8:	4429      	add	r1, r5
   d4dea:	2201      	movs	r2, #1
   d4dec:	4431      	add	r1, r6
   d4dee:	a801      	add	r0, sp, #4
   d4df0:	f7ff fe72 	bl	d4ad8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                uuids[found++] = uuid;
   d4df4:	2314      	movs	r3, #20
   d4df6:	f104 0e01 	add.w	lr, r4, #1
   d4dfa:	aa01      	add	r2, sp, #4
   d4dfc:	fb03 7404 	mla	r4, r3, r4, r7
   d4e00:	eb0d 0c03 	add.w	ip, sp, r3
   d4e04:	4613      	mov	r3, r2
   d4e06:	cb03      	ldmia	r3!, {r0, r1}
   d4e08:	4563      	cmp	r3, ip
   d4e0a:	6020      	str	r0, [r4, #0]
   d4e0c:	6061      	str	r1, [r4, #4]
   d4e0e:	461a      	mov	r2, r3
   d4e10:	f104 0408 	add.w	r4, r4, #8
   d4e14:	d1f6      	bne.n	d4e04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x9e>
   d4e16:	6818      	ldr	r0, [r3, #0]
   d4e18:	6020      	str	r0, [r4, #0]
   d4e1a:	4674      	mov	r4, lr
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4e1c:	9b00      	ldr	r3, [sp, #0]
   d4e1e:	4453      	add	r3, sl
   d4e20:	441d      	add	r5, r3
   d4e22:	e7a9      	b.n	d4d78 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x12>
            continue;
        }
        break;
    }
    return found;
}
   d4e24:	4620      	mov	r0, r4
   d4e26:	b007      	add	sp, #28
   d4e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e2c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e30:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4e32:	460d      	mov	r5, r1
   d4e34:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e36:	460a      	mov	r2, r1
   d4e38:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4e3a:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e3c:	f7ff ff93 	bl	d4d66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4e40:	f04f 0814 	mov.w	r8, #20
   d4e44:	1a33      	subs	r3, r6, r0
   d4e46:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e4a:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4e4c:	2103      	movs	r1, #3
   d4e4e:	4638      	mov	r0, r7
   d4e50:	f7ff ff89 	bl	d4d66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4e54:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e56:	1b33      	subs	r3, r6, r4
   d4e58:	fb08 5204 	mla	r2, r8, r4, r5
   d4e5c:	2106      	movs	r1, #6
   d4e5e:	4638      	mov	r0, r7
   d4e60:	f7ff ff81 	bl	d4d66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4e64:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d4e66:	1b33      	subs	r3, r6, r4
   d4e68:	fb08 5204 	mla	r2, r8, r4, r5
   d4e6c:	2107      	movs	r1, #7
   d4e6e:	4638      	mov	r0, r7
   d4e70:	f7ff ff79 	bl	d4d66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d4e74:	4420      	add	r0, r4
   d4e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4e7c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e7c:	b538      	push	{r3, r4, r5, lr}
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d4e7e:	2500      	movs	r5, #0
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4e80:	4604      	mov	r4, r0
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d4e82:	f800 5b02 	strb.w	r5, [r0], #2
   d4e86:	f7ff fe04 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
   d4e8a:	f104 0016 	add.w	r0, r4, #22
   d4e8e:	f7ff fe00 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
   d4e92:	4909      	ldr	r1, [pc, #36]	; (d4eb8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d4e94:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e98:	f002 fd90 	bl	d79bc <_ZN6StringC1EPK19__FlashStringHelper>
   d4e9c:	2301      	movs	r3, #1
   d4e9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4ea6:	64e5      	str	r5, [r4, #76]	; 0x4c
   d4ea8:	6525      	str	r5, [r4, #80]	; 0x50
   d4eaa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   d4eae:	65a5      	str	r5, [r4, #88]	; 0x58
   d4eb0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    }
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bd38      	pop	{r3, r4, r5, pc}
   d4eb8:	000d876e 	.word	0x000d876e

000d4ebc <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d4ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4ec0:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4ec4:	460d      	mov	r5, r1
   d4ec6:	4617      	mov	r7, r2
   d4ec8:	4698      	mov	r8, r3
   d4eca:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4ece:	42a6      	cmp	r6, r4
   d4ed0:	d033      	beq.n	d4f3a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d4ed2:	6823      	ldr	r3, [r4, #0]
   d4ed4:	699a      	ldr	r2, [r3, #24]
   d4ed6:	69d9      	ldr	r1, [r3, #28]
   d4ed8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d4edc:	4291      	cmp	r1, r2
   d4ede:	d01b      	beq.n	d4f18 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4ee0:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d4ee2:	b19b      	cbz	r3, d4f0c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d4ee4:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d4ee8:	42a8      	cmp	r0, r5
   d4eea:	d011      	beq.n	d4f10 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d4eec:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d4ef0:	42a8      	cmp	r0, r5
   d4ef2:	d00d      	beq.n	d4f10 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d4ef4:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d4ef8:	42a8      	cmp	r0, r5
   d4efa:	d009      	beq.n	d4f10 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d4efc:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d4f00:	42a8      	cmp	r0, r5
   d4f02:	d005      	beq.n	d4f10 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d4f04:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d4f08:	42a8      	cmp	r0, r5
   d4f0a:	d001      	beq.n	d4f10 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d4f0c:	3208      	adds	r2, #8
   d4f0e:	e7e5      	b.n	d4edc <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d4f10:	b117      	cbz	r7, d4f18 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f12:	f1b8 0f00 	cmp.w	r8, #0
   d4f16:	d101      	bne.n	d4f1c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d4f18:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d4f1a:	e7d8      	b.n	d4ece <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d4f1c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d4f20:	f1b9 0f00 	cmp.w	r9, #0
   d4f24:	d0f8      	beq.n	d4f18 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f26:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d4f2a:	42aa      	cmp	r2, r5
   d4f2c:	d1f4      	bne.n	d4f18 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d4f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f30:	9a08      	ldr	r2, [sp, #32]
   d4f32:	4641      	mov	r1, r8
   d4f34:	4638      	mov	r0, r7
   d4f36:	47c8      	blx	r9
   d4f38:	e7ee      	b.n	d4f18 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f3e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>:
            }
        }
    }

private:
    BleService* getService(const BleUuid& uuid) {
   d4f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f40:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4f44:	460f      	mov	r7, r1
   d4f46:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4f4a:	42b4      	cmp	r4, r6
   d4f4c:	4625      	mov	r5, r4
   d4f4e:	d008      	beq.n	d4f62 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0x24>
            if (service.impl()->uuid == uuid) {
   d4f50:	4639      	mov	r1, r7
   d4f52:	f854 0b08 	ldr.w	r0, [r4], #8
   d4f56:	f7ff fe6b 	bl	d4c30 <_ZNK8particle7BleUuideqERKS0_>
   d4f5a:	2800      	cmp	r0, #0
   d4f5c:	d0f5      	beq.n	d4f4a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0xc>
   d4f5e:	4628      	mov	r0, r5
   d4f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return &service;
            }
        }
        return nullptr;
   d4f62:	2000      	movs	r0, #0
    }
   d4f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4f68 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE>:
class BleGattClientImpl {
public:
    BleGattClientImpl() = default;
    ~BleGattClientImpl() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   d4f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f6c:	b093      	sub	sp, #76	; 0x4c
   d4f6e:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering services.");
   d4f70:	2400      	movs	r4, #0
   d4f72:	4b4e      	ldr	r3, [pc, #312]	; (d50ac <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x144>)
   d4f74:	9300      	str	r3, [sp, #0]
   d4f76:	aa0a      	add	r2, sp, #40	; 0x28
   d4f78:	4623      	mov	r3, r4
   d4f7a:	494d      	ldr	r1, [pc, #308]	; (d50b0 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x148>)
   d4f7c:	940b      	str	r4, [sp, #44]	; 0x2c
   d4f7e:	2001      	movs	r0, #1
   d4f80:	2520      	movs	r5, #32
   d4f82:	950a      	str	r5, [sp, #40]	; 0x28
   d4f84:	f7ff fc84 	bl	d4890 <log_message>
        int ret = hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle, onServicesDiscovered, &peer, nullptr);
   d4f88:	6830      	ldr	r0, [r6, #0]
   d4f8a:	494a      	ldr	r1, [pc, #296]	; (d50b4 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x14c>)
   d4f8c:	8ac0      	ldrh	r0, [r0, #22]
   d4f8e:	4623      	mov	r3, r4
   d4f90:	4632      	mov	r2, r6
   d4f92:	f7ff faed 	bl	d4570 <hal_ble_gatt_client_discover_all_services>
        if (ret == SYSTEM_ERROR_NONE) {
   d4f96:	4680      	mov	r8, r0
   d4f98:	2800      	cmp	r0, #0
   d4f9a:	d178      	bne.n	d508e <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x126>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f9c:	6833      	ldr	r3, [r6, #0]
            for (auto& service : peer.impl()->gattsProxy->services()) {
                hal_ble_svc_t halService;
                halService.size = sizeof(hal_ble_svc_t);
                halService.start_handle = service.impl()->startHandle;
                halService.end_handle = service.impl()->endHandle;
                LOG(TRACE, "Start discovering characteristics.");
   d4f9e:	f8df b120 	ldr.w	fp, [pc, #288]	; d50c0 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x158>
   d4fa2:	69db      	ldr	r3, [r3, #28]
   d4fa4:	681d      	ldr	r5, [r3, #0]
   d4fa6:	685b      	ldr	r3, [r3, #4]
   d4fa8:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
   d4fac:	3508      	adds	r5, #8
   d4fae:	f1a5 0708 	sub.w	r7, r5, #8

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        int ret = hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle, onServicesDiscovered, &peer, nullptr);
        if (ret == SYSTEM_ERROR_NONE) {
            for (auto& service : peer.impl()->gattsProxy->services()) {
   d4fb2:	45b9      	cmp	r9, r7
   d4fb4:	d076      	beq.n	d50a4 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x13c>
                hal_ble_svc_t halService;
                halService.size = sizeof(hal_ble_svc_t);
   d4fb6:	231c      	movs	r3, #28
   d4fb8:	f8ad 300e 	strh.w	r3, [sp, #14]
                halService.start_handle = service.impl()->startHandle;
   d4fbc:	f855 3c08 	ldr.w	r3, [r5, #-8]
                halService.end_handle = service.impl()->endHandle;
                LOG(TRACE, "Start discovering characteristics.");
   d4fc0:	493b      	ldr	r1, [pc, #236]	; (d50b0 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x148>)
        int ret = hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle, onServicesDiscovered, &peer, nullptr);
        if (ret == SYSTEM_ERROR_NONE) {
            for (auto& service : peer.impl()->gattsProxy->services()) {
                hal_ble_svc_t halService;
                halService.size = sizeof(hal_ble_svc_t);
                halService.start_handle = service.impl()->startHandle;
   d4fc2:	8a9b      	ldrh	r3, [r3, #20]
   d4fc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
                halService.end_handle = service.impl()->endHandle;
   d4fc8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d4fcc:	8adb      	ldrh	r3, [r3, #22]
   d4fce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                LOG(TRACE, "Start discovering characteristics.");
   d4fd2:	2400      	movs	r4, #0
   d4fd4:	2320      	movs	r3, #32
   d4fd6:	930a      	str	r3, [sp, #40]	; 0x28
   d4fd8:	aa0a      	add	r2, sp, #40	; 0x28
   d4fda:	4623      	mov	r3, r4
   d4fdc:	2001      	movs	r0, #1
   d4fde:	f8cd b000 	str.w	fp, [sp]
   d4fe2:	940b      	str	r4, [sp, #44]	; 0x2c
   d4fe4:	f7ff fc54 	bl	d4890 <log_message>
                ret = hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle, &halService, onCharacteristicsDiscovered, &service, nullptr);
   d4fe8:	6833      	ldr	r3, [r6, #0]
   d4fea:	4a33      	ldr	r2, [pc, #204]	; (d50b8 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x150>)
   d4fec:	8ad8      	ldrh	r0, [r3, #22]
   d4fee:	9400      	str	r4, [sp, #0]
   d4ff0:	463b      	mov	r3, r7
   d4ff2:	a903      	add	r1, sp, #12
   d4ff4:	f7ff fac6 	bl	d4584 <hal_ble_gatt_client_discover_characteristics>
                if (ret != SYSTEM_ERROR_NONE) {
   d4ff8:	b108      	cbz	r0, d4ffe <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x96>
                hal_ble_svc_t halService;
                halService.size = sizeof(hal_ble_svc_t);
                halService.start_handle = service.impl()->startHandle;
                halService.end_handle = service.impl()->endHandle;
                LOG(TRACE, "Start discovering characteristics.");
                ret = hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle, &halService, onCharacteristicsDiscovered, &service, nullptr);
   d4ffa:	4680      	mov	r8, r0
   d4ffc:	e052      	b.n	d50a4 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x13c>
   d4ffe:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d5002:	699c      	ldr	r4, [r3, #24]
   d5004:	69db      	ldr	r3, [r3, #28]
                    // Enable notification or indication if presented.
                    if (characteristic.impl()->attrHandles.cccd_handle != BLE_INVALID_ATTR_HANDLE) {
                        if ((characteristic.impl()->properties & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
                            hal_ble_gatt_client_configure_cccd(peer.impl()->connHandle, characteristic.impl()->attrHandles.cccd_handle, BLE_SIG_CCCD_VAL_NOTIFICATION, nullptr);
                        } else if ((characteristic.impl()->properties & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE) {
                            hal_ble_gatt_client_configure_cccd(peer.impl()->connHandle, characteristic.impl()->attrHandles.cccd_handle, BLE_SIG_CCCD_VAL_INDICATION, nullptr);
   d5006:	4607      	mov	r7, r0
   d5008:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
   d500c:	3408      	adds	r4, #8
                LOG(TRACE, "Start discovering characteristics.");
                ret = hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle, &halService, onCharacteristicsDiscovered, &service, nullptr);
                if (ret != SYSTEM_ERROR_NONE) {
                    return ret;
                }
                for (auto& characteristic : service.impl()->characteristics()) {
   d500e:	f1a4 0308 	sub.w	r3, r4, #8
   d5012:	459a      	cmp	sl, r3
   d5014:	d039      	beq.n	d508a <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x122>
   d5016:	f854 3c08 	ldr.w	r3, [r4, #-8]
                    // Enable notification or indication if presented.
                    if (characteristic.impl()->attrHandles.cccd_handle != BLE_INVALID_ATTR_HANDLE) {
   d501a:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
   d501e:	b191      	cbz	r1, d5046 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0xde>
                        if ((characteristic.impl()->properties & BleCharacteristicProperty::NOTIFY) == BleCharacteristicProperty::NOTIFY) {
   d5020:	781b      	ldrb	r3, [r3, #0]
   d5022:	f043 0210 	orr.w	r2, r3, #16
   d5026:	2a10      	cmp	r2, #16
   d5028:	d103      	bne.n	d5032 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0xca>
                            hal_ble_gatt_client_configure_cccd(peer.impl()->connHandle, characteristic.impl()->attrHandles.cccd_handle, BLE_SIG_CCCD_VAL_NOTIFICATION, nullptr);
   d502a:	6830      	ldr	r0, [r6, #0]
   d502c:	2300      	movs	r3, #0
   d502e:	2201      	movs	r2, #1
   d5030:	e006      	b.n	d5040 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0xd8>
                        } else if ((characteristic.impl()->properties & BleCharacteristicProperty::INDICATE) == BleCharacteristicProperty::INDICATE) {
   d5032:	f043 0320 	orr.w	r3, r3, #32
   d5036:	2b20      	cmp	r3, #32
   d5038:	d105      	bne.n	d5046 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0xde>
                            hal_ble_gatt_client_configure_cccd(peer.impl()->connHandle, characteristic.impl()->attrHandles.cccd_handle, BLE_SIG_CCCD_VAL_INDICATION, nullptr);
   d503a:	6830      	ldr	r0, [r6, #0]
   d503c:	2300      	movs	r3, #0
   d503e:	2202      	movs	r2, #2
   d5040:	8ac0      	ldrh	r0, [r0, #22]
   d5042:	f7ff faa9 	bl	d4598 <hal_ble_gatt_client_configure_cccd>
                        }
                    }
                    // Read the user description string if presented.
                    if (characteristic.impl()->attrHandles.user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d5046:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d504a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
   d504e:	b1d3      	cbz	r3, d5086 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x11e>
                        char desc[32]; // FIXME: use macro definition instead.
                        memset(desc, 0x00, sizeof(desc));
   d5050:	2220      	movs	r2, #32
   d5052:	2100      	movs	r1, #0
   d5054:	a80a      	add	r0, sp, #40	; 0x28
   d5056:	f003 f900 	bl	d825a <memset>
                        size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle, characteristic.impl()->attrHandles.user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d505a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d505e:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
   d5062:	6833      	ldr	r3, [r6, #0]
   d5064:	aa0a      	add	r2, sp, #40	; 0x28
   d5066:	8ad8      	ldrh	r0, [r3, #22]
   d5068:	9700      	str	r7, [sp, #0]
   d506a:	231f      	movs	r3, #31
   d506c:	f7ff fa9e 	bl	d45ac <hal_ble_gatt_client_read>
                        if (len > 0) {
   d5070:	b148      	cbz	r0, d5086 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x11e>
                            desc[len] = '\0';
   d5072:	ab12      	add	r3, sp, #72	; 0x48
   d5074:	4418      	add	r0, r3
                            characteristic.impl()->description = desc;
   d5076:	a90a      	add	r1, sp, #40	; 0x28
                    if (characteristic.impl()->attrHandles.user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                        char desc[32]; // FIXME: use macro definition instead.
                        memset(desc, 0x00, sizeof(desc));
                        size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle, characteristic.impl()->attrHandles.user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                        if (len > 0) {
                            desc[len] = '\0';
   d5078:	f800 7c20 	strb.w	r7, [r0, #-32]
                            characteristic.impl()->description = desc;
   d507c:	f854 0c08 	ldr.w	r0, [r4, #-8]
   d5080:	302c      	adds	r0, #44	; 0x2c
   d5082:	f002 fcc8 	bl	d7a16 <_ZN6StringaSEPKc>
   d5086:	3408      	adds	r4, #8
                LOG(TRACE, "Start discovering characteristics.");
                ret = hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle, &halService, onCharacteristicsDiscovered, &service, nullptr);
                if (ret != SYSTEM_ERROR_NONE) {
                    return ret;
                }
                for (auto& characteristic : service.impl()->characteristics()) {
   d5088:	e7c1      	b.n	d500e <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0xa6>
   d508a:	3508      	adds	r5, #8

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        int ret = hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle, onServicesDiscovered, &peer, nullptr);
        if (ret == SYSTEM_ERROR_NONE) {
            for (auto& service : peer.impl()->gattsProxy->services()) {
   d508c:	e78f      	b.n	d4fae <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x46>
                    }
                }
            }
        }
        else {
            LOG(ERROR, "hal_ble_gatt_client_discover_all_services() failed; %d", ret);
   d508e:	4b0b      	ldr	r3, [pc, #44]	; (d50bc <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x154>)
   d5090:	9001      	str	r0, [sp, #4]
   d5092:	9300      	str	r3, [sp, #0]
   d5094:	aa0a      	add	r2, sp, #40	; 0x28
   d5096:	4623      	mov	r3, r4
   d5098:	4905      	ldr	r1, [pc, #20]	; (d50b0 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE+0x148>)
   d509a:	950a      	str	r5, [sp, #40]	; 0x28
   d509c:	2032      	movs	r0, #50	; 0x32
   d509e:	940b      	str	r4, [sp, #44]	; 0x2c
   d50a0:	f7ff fbf6 	bl	d4890 <log_message>
        }
        return ret;
    }
   d50a4:	4640      	mov	r0, r8
   d50a6:	b013      	add	sp, #76	; 0x4c
   d50a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50ac:	000d85ef 	.word	0x000d85ef
   d50b0:	000d85e4 	.word	0x000d85e4
   d50b4:	000d5f29 	.word	0x000d5f29
   d50b8:	000d5d03 	.word	0x000d5d03
   d50bc:	000d862e 	.word	0x000d862e
   d50c0:	000d860b 	.word	0x000d860b

000d50c4 <_ZN8particle13BlePeerDevice9connectedEv>:
BleCharacteristic BlePeerDevice::getCharacteristicByUUID(const BleUuid& uuid) {
    return impl()->gattsProxy->getCharacteristic(uuid);
}

bool BlePeerDevice::connected() {
    return impl()->connHandle != BLE_INVALID_CONN_HANDLE;
   d50c4:	6803      	ldr	r3, [r0, #0]
   d50c6:	8ad8      	ldrh	r0, [r3, #22]
}
   d50c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d50cc:	1ac0      	subs	r0, r0, r3
   d50ce:	bf18      	it	ne
   d50d0:	2001      	movne	r0, #1
   d50d2:	4770      	bx	lr

000d50d4 <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d50d4:	b508      	push	{r3, lr}
   d50d6:	6800      	ldr	r0, [r0, #0]
   d50d8:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d50da:	8ac2      	ldrh	r2, [r0, #22]
   d50dc:	8acb      	ldrh	r3, [r1, #22]
   d50de:	429a      	cmp	r2, r3
   d50e0:	d104      	bne.n	d50ec <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d50e2:	3101      	adds	r1, #1
   d50e4:	3001      	adds	r0, #1
   d50e6:	f7ff fcc6 	bl	d4a76 <_ZNK8particle10BleAddresseqERKS0_>
   d50ea:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d50ec:	2000      	movs	r0, #0
}
   d50ee:	bd08      	pop	{r3, pc}

000d50f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d50f0:	b530      	push	{r4, r5, lr}
   d50f2:	b08b      	sub	sp, #44	; 0x2c
   d50f4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d50f6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d50f8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d50fa:	f7ff fcd3 	bl	d4aa4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d50fe:	b1b5      	cbz	r5, d512e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d5100:	b1ac      	cbz	r4, d512e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5102:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5104:	a902      	add	r1, sp, #8
   d5106:	480d      	ldr	r0, [pc, #52]	; (d513c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d5108:	9406      	str	r4, [sp, #24]
   d510a:	9202      	str	r2, [sp, #8]
   d510c:	9203      	str	r2, [sp, #12]
   d510e:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d5110:	9207      	str	r2, [sp, #28]
   d5112:	9208      	str	r2, [sp, #32]
   d5114:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d5116:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5118:	f7ff f9f0 	bl	d44fc <hal_ble_gap_start_scan>
   d511c:	2800      	cmp	r0, #0
   d511e:	bfb8      	it	lt
   d5120:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5122:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5124:	bfa8      	it	ge
   d5126:	9c07      	ldrge	r4, [sp, #28]
   d5128:	f7ff fc56 	bl	d49d8 <free>
   d512c:	e000      	b.n	d5130 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d512e:	4c04      	ldr	r4, [pc, #16]	; (d5140 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d5130:	a801      	add	r0, sp, #4
   d5132:	f7ff fcc5 	bl	d4ac0 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5136:	4620      	mov	r0, r4
   d5138:	b00b      	add	sp, #44	; 0x2c
   d513a:	bd30      	pop	{r4, r5, pc}
   d513c:	000d55d5 	.word	0x000d55d5
   d5140:	fffffef2 	.word	0xfffffef2

000d5144 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5144:	6983      	ldr	r3, [r0, #24]
    return (peripheralProxy_->connected() || centralProxy_->connected());
   d5146:	685b      	ldr	r3, [r3, #4]
   d5148:	2b00      	cmp	r3, #0
   d514a:	dc06      	bgt.n	d515a <_ZNK8particle14BleLocalDevice9connectedEv+0x16>
   d514c:	69c3      	ldr	r3, [r0, #28]
   d514e:	6858      	ldr	r0, [r3, #4]
   d5150:	2800      	cmp	r0, #0
   d5152:	bfd4      	ite	le
   d5154:	2000      	movle	r0, #0
   d5156:	2001      	movgt	r0, #1
   d5158:	4770      	bx	lr
   d515a:	2001      	movs	r0, #1
}
   d515c:	4770      	bx	lr

000d515e <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE>:
int BleLocalDevice::disconnect() const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return peripheralProxy_->disconnect();
}

int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
   d515e:	b510      	push	{r4, lr}
   d5160:	69c2      	ldr	r2, [r0, #28]
   d5162:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5164:	6852      	ldr	r2, [r2, #4]
   d5166:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        }
        return pseudo;
    }

    int disconnect(const BlePeerDevice& peer) {
        for (auto& peripheral : peripherals_) {
   d516a:	4293      	cmp	r3, r2
   d516c:	4618      	mov	r0, r3
   d516e:	d00a      	beq.n	d5186 <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE+0x28>
            if (peripheral.impl()->connHandle == peer.impl()->connHandle) {
   d5170:	680c      	ldr	r4, [r1, #0]
   d5172:	6800      	ldr	r0, [r0, #0]
   d5174:	8ae4      	ldrh	r4, [r4, #22]
   d5176:	8ac0      	ldrh	r0, [r0, #22]
   d5178:	42a0      	cmp	r0, r4
   d517a:	f103 0308 	add.w	r3, r3, #8
   d517e:	d1f4      	bne.n	d516a <_ZNK8particle14BleLocalDevice10disconnectERKNS_13BlePeerDeviceE+0xc>
                hal_ble_gap_disconnect(peer.impl()->connHandle, nullptr);
   d5180:	2100      	movs	r1, #0
   d5182:	f7ff f9d7 	bl	d4534 <hal_ble_gap_disconnect>
}

int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}
   d5186:	2000      	movs	r0, #0
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d518a:	b530      	push	{r4, r5, lr}
   d518c:	6983      	ldr	r3, [r0, #24]
   d518e:	e893 0014 	ldmia.w	r3, {r2, r4}
   d5192:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d5196:	42a2      	cmp	r2, r4
   d5198:	4613      	mov	r3, r2
   d519a:	d007      	beq.n	d51ac <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d519c:	681d      	ldr	r5, [r3, #0]
   d519e:	8aed      	ldrh	r5, [r5, #22]
   d51a0:	428d      	cmp	r5, r1
   d51a2:	f102 0208 	add.w	r2, r2, #8
   d51a6:	d1f6      	bne.n	d5196 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d51a8:	4618      	mov	r0, r3
   d51aa:	bd30      	pop	{r4, r5, pc}
   d51ac:	69c2      	ldr	r2, [r0, #28]
   d51ae:	6813      	ldr	r3, [r2, #0]
   d51b0:	6852      	ldr	r2, [r2, #4]
   d51b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d51b6:	429a      	cmp	r2, r3
   d51b8:	4618      	mov	r0, r3
   d51ba:	d006      	beq.n	d51ca <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d51bc:	6804      	ldr	r4, [r0, #0]
   d51be:	8ae4      	ldrh	r4, [r4, #22]
   d51c0:	428c      	cmp	r4, r1
   d51c2:	f103 0308 	add.w	r3, r3, #8
   d51c6:	d1f6      	bne.n	d51b6 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d51c8:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d51ca:	2000      	movs	r0, #0
}
   d51cc:	bd30      	pop	{r4, r5, pc}

000d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d51ce:	b510      	push	{r4, lr}
   d51d0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d51d2:	6800      	ldr	r0, [r0, #0]
   d51d4:	b128      	cbz	r0, d51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d51d6:	6843      	ldr	r3, [r0, #4]
   d51d8:	3b01      	subs	r3, #1
   d51da:	6043      	str	r3, [r0, #4]
   d51dc:	b90b      	cbnz	r3, d51e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d51de:	f7ff fc3a 	bl	d4a56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d51e2:	4620      	mov	r0, r4
   d51e4:	bd10      	pop	{r4, pc}

000d51e6 <_ZN8particle13BlePeerDeviceD1Ev>:
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}

BlePeerDevice::~BlePeerDevice() {
   d51e6:	b510      	push	{r4, lr}
   d51e8:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51ea:	3004      	adds	r0, #4
   d51ec:	f7ff ffef 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d51f0:	4620      	mov	r0, r4
   d51f2:	bd10      	pop	{r4, pc}

000d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d51f4:	680b      	ldr	r3, [r1, #0]
   d51f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d51f8:	b113      	cbz	r3, d5200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d51fa:	685a      	ldr	r2, [r3, #4]
   d51fc:	3201      	adds	r2, #1
   d51fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5200:	4770      	bx	lr

000d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5202:	b510      	push	{r4, lr}
   d5204:	f851 3b04 	ldr.w	r3, [r1], #4
   d5208:	4604      	mov	r4, r0
   d520a:	f840 3b04 	str.w	r3, [r0], #4
   d520e:	f7ff fff1 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5212:	4620      	mov	r0, r4
   d5214:	bd10      	pop	{r4, pc}

000d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5216:	b510      	push	{r4, lr}
   d5218:	f851 3b04 	ldr.w	r3, [r1], #4
   d521c:	4604      	mov	r4, r0
   d521e:	f840 3b04 	str.w	r3, [r0], #4
   d5222:	f7ff ffe7 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5226:	4620      	mov	r0, r4
   d5228:	bd10      	pop	{r4, pc}

000d522a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d522a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d522c:	6804      	ldr	r4, [r0, #0]
   d522e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5230:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5232:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5236:	42a6      	cmp	r6, r4
   d5238:	d004      	beq.n	d5244 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d523a:	1d20      	adds	r0, r4, #4
   d523c:	f7ff ffc7 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5240:	3408      	adds	r4, #8
   d5242:	e7f8      	b.n	d5236 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5244:	6828      	ldr	r0, [r5, #0]
   d5246:	f7ff fbc7 	bl	d49d8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d524a:	4628      	mov	r0, r5
   d524c:	bd70      	pop	{r4, r5, r6, pc}

000d524e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d524e:	b538      	push	{r3, r4, r5, lr}
   d5250:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5252:	2010      	movs	r0, #16
   d5254:	780d      	ldrb	r5, [r1, #0]
   d5256:	f7fe ff1e 	bl	d4096 <_Znwj>
   d525a:	b120      	cbz	r0, d5266 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d525c:	2300      	movs	r3, #0
   d525e:	6003      	str	r3, [r0, #0]
   d5260:	6043      	str	r3, [r0, #4]
   d5262:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d5264:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5266:	6020      	str	r0, [r4, #0]
   d5268:	4620      	mov	r0, r4
   d526a:	bd38      	pop	{r3, r4, r5, pc}

000d526c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d526c:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d526e:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d5270:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5272:	b134      	cbz	r4, d5282 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d5274:	4620      	mov	r0, r4
   d5276:	f7ff ffd8 	bl	d522a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d527a:	2110      	movs	r1, #16
   d527c:	4620      	mov	r0, r4
   d527e:	f002 fe46 	bl	d7f0e <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d5282:	4628      	mov	r0, r5
   d5284:	bd38      	pop	{r3, r4, r5, pc}

000d5286 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5286:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5288:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d528a:	f104 001c 	add.w	r0, r4, #28
   d528e:	f7ff ffed 	bl	d526c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d5292:	4620      	mov	r0, r4
   d5294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5298:	f7fe beff 	b.w	d409a <_ZdlPv>

000d529c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d529c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d529e:	6804      	ldr	r4, [r0, #0]
   d52a0:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d52a2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d52a4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d52a8:	42a6      	cmp	r6, r4
   d52aa:	d004      	beq.n	d52b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52ac:	1d20      	adds	r0, r4, #4
   d52ae:	f7ff ff8e 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52b2:	3408      	adds	r4, #8
   d52b4:	e7f8      	b.n	d52a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d52b6:	2300      	movs	r3, #0
   d52b8:	606b      	str	r3, [r5, #4]
   d52ba:	bd70      	pop	{r4, r5, r6, pc}

000d52bc <_ZNK8particle14BleLocalDevice10disconnectEv>:
        gattcProxy_->discoverAllServices(peer);
    }
    return peer;
}

int BleLocalDevice::disconnect() const {
   d52bc:	b570      	push	{r4, r5, r6, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52be:	6985      	ldr	r5, [r0, #24]
   d52c0:	682c      	ldr	r4, [r5, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d52c2:	686b      	ldr	r3, [r5, #4]
   d52c4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
    Vector<BlePeerDevice>& centrals() {
        return centrals_;
    }

    int disconnect() {
        for (const BlePeerDevice& central : centrals_) {
   d52c8:	42a6      	cmp	r6, r4
   d52ca:	d006      	beq.n	d52da <_ZNK8particle14BleLocalDevice10disconnectEv+0x1e>
            hal_ble_gap_disconnect(central.impl()->connHandle, nullptr);
   d52cc:	f854 3b08 	ldr.w	r3, [r4], #8
   d52d0:	2100      	movs	r1, #0
   d52d2:	8ad8      	ldrh	r0, [r3, #22]
   d52d4:	f7ff f92e 	bl	d4534 <hal_ble_gap_disconnect>
   d52d8:	e7f6      	b.n	d52c8 <_ZNK8particle14BleLocalDevice10disconnectEv+0xc>
        }
        centrals_.clear();
   d52da:	4628      	mov	r0, r5
   d52dc:	f7ff ffde 	bl	d529c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
}

int BleLocalDevice::disconnect() const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return peripheralProxy_->disconnect();
}
   d52e0:	2000      	movs	r0, #0
   d52e2:	bd70      	pop	{r4, r5, r6, pc}

000d52e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d52e4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d52e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52e8:	4606      	mov	r6, r0
   d52ea:	460c      	mov	r4, r1
   d52ec:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d52ee:	d914      	bls.n	d531a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d52f0:	4290      	cmp	r0, r2
   d52f2:	d213      	bcs.n	d531c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d52f4:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d52f8:	1a6c      	subs	r4, r5, r1
   d52fa:	f1a1 0708 	sub.w	r7, r1, #8
   d52fe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5300:	42af      	cmp	r7, r5
   d5302:	d018      	beq.n	d5336 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5304:	b11c      	cbz	r4, d530e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5306:	4629      	mov	r1, r5
   d5308:	4620      	mov	r0, r4
   d530a:	f7ff ff84 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d530e:	1d28      	adds	r0, r5, #4
   d5310:	f7ff ff5d 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5314:	3d08      	subs	r5, #8
   d5316:	3c08      	subs	r4, #8
   d5318:	e7f2      	b.n	d5300 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d531a:	d00c      	beq.n	d5336 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d531c:	42ac      	cmp	r4, r5
   d531e:	d00a      	beq.n	d5336 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5320:	b11e      	cbz	r6, d532a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5322:	4621      	mov	r1, r4
   d5324:	4630      	mov	r0, r6
   d5326:	f7ff ff76 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d532a:	1d20      	adds	r0, r4, #4
   d532c:	f7ff ff4f 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5330:	3408      	adds	r4, #8
   d5332:	3608      	adds	r6, #8
   d5334:	e7f2      	b.n	d531c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5338 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d533a:	680b      	ldr	r3, [r1, #0]
   d533c:	69da      	ldr	r2, [r3, #28]
   d533e:	460e      	mov	r6, r1
   d5340:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5342:	6851      	ldr	r1, [r2, #4]
   d5344:	4605      	mov	r5, r0
   d5346:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d534a:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d534c:	4299      	cmp	r1, r3
   d534e:	d00d      	beq.n	d536c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d5350:	6818      	ldr	r0, [r3, #0]
   d5352:	6982      	ldr	r2, [r0, #24]
   d5354:	69c0      	ldr	r0, [r0, #28]
   d5356:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d535a:	4290      	cmp	r0, r2
   d535c:	d004      	beq.n	d5368 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d535e:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5362:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d5366:	e7f8      	b.n	d535a <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d5368:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d536a:	e7ef      	b.n	d534c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d536c:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d536e:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5372:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5374:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d5376:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5378:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d537a:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d537c:	f8c3 200a 	str.w	r2, [r3, #10]
   d5380:	f8c3 200e 	str.w	r2, [r3, #14]
   d5384:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d5388:	682c      	ldr	r4, [r5, #0]
   d538a:	686b      	ldr	r3, [r5, #4]
   d538c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5390:	42bc      	cmp	r4, r7
   d5392:	d016      	beq.n	d53c2 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d5394:	4631      	mov	r1, r6
   d5396:	4620      	mov	r0, r4
   d5398:	f7ff fe9c 	bl	d50d4 <_ZN8particle13BlePeerDeviceeqERKS0_>
   d539c:	b908      	cbnz	r0, d53a2 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d539e:	3408      	adds	r4, #8
   d53a0:	e7f6      	b.n	d5390 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d53a2:	b174      	cbz	r4, d53c2 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d53a4:	1d20      	adds	r0, r4, #4
   d53a6:	f7ff ff12 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d53aa:	682b      	ldr	r3, [r5, #0]
   d53ac:	686a      	ldr	r2, [r5, #4]
   d53ae:	f104 0108 	add.w	r1, r4, #8
   d53b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d53b6:	4620      	mov	r0, r4
   d53b8:	f7ff ff94 	bl	d52e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d53bc:	686b      	ldr	r3, [r5, #4]
   d53be:	3b01      	subs	r3, #1
   d53c0:	606b      	str	r3, [r5, #4]
   d53c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d53c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d53c6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d53c8:	6846      	ldr	r6, [r0, #4]
   d53ca:	4668      	mov	r0, sp
   d53cc:	f7ff ff23 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d53d0:	6867      	ldr	r7, [r4, #4]
   d53d2:	68a3      	ldr	r3, [r4, #8]
   d53d4:	429f      	cmp	r7, r3
   d53d6:	db14      	blt.n	d5402 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d53d8:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d53da:	2f00      	cmp	r7, #0
   d53dc:	dd0b      	ble.n	d53f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d53de:	00f8      	lsls	r0, r7, #3
   d53e0:	f7ff faf2 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d53e4:	4605      	mov	r5, r0
   d53e6:	b300      	cbz	r0, d542a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d53e8:	e894 0006 	ldmia.w	r4, {r1, r2}
   d53ec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d53f0:	f7ff ff78 	bl	d52e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d53f4:	e000      	b.n	d53f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d53f6:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53f8:	6820      	ldr	r0, [r4, #0]
   d53fa:	f7ff faed 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d53fe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5400:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5402:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5404:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5406:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d540a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d540e:	4629      	mov	r1, r5
   d5410:	f105 0008 	add.w	r0, r5, #8
   d5414:	f7ff ff66 	bl	d52e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5418:	b11d      	cbz	r5, d5422 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d541a:	4669      	mov	r1, sp
   d541c:	4628      	mov	r0, r5
   d541e:	f7ff fefa 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5422:	6863      	ldr	r3, [r4, #4]
   d5424:	3301      	adds	r3, #1
   d5426:	6063      	str	r3, [r4, #4]
   d5428:	2501      	movs	r5, #1
   d542a:	a801      	add	r0, sp, #4
   d542c:	f7ff fecf 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5430:	4628      	mov	r0, r5
   d5432:	b003      	add	sp, #12
   d5434:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5436 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5436:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5438:	6804      	ldr	r4, [r0, #0]
   d543a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d543c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d543e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5442:	42a6      	cmp	r6, r4
   d5444:	d004      	beq.n	d5450 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5446:	1d20      	adds	r0, r4, #4
   d5448:	f7ff fec1 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d544c:	3408      	adds	r4, #8
   d544e:	e7f8      	b.n	d5442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5450:	6828      	ldr	r0, [r5, #0]
   d5452:	f7ff fac1 	bl	d49d8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5456:	4628      	mov	r0, r5
   d5458:	bd70      	pop	{r4, r5, r6, pc}

000d545a <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d545a:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d545c:	4604      	mov	r4, r0
   d545e:	b138      	cbz	r0, d5470 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d5460:	f7ff ffe9 	bl	d5436 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d5464:	4620      	mov	r0, r4
   d5466:	210c      	movs	r1, #12
      }
   d5468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d546c:	f002 bd4f 	b.w	d7f0e <_ZdlPvj>
   d5470:	bd10      	pop	{r4, pc}

000d5472 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5472:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5474:	4604      	mov	r4, r0
   d5476:	b138      	cbz	r0, d5488 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d5478:	f7ff ffdd 	bl	d5436 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d547c:	4620      	mov	r0, r4
   d547e:	210c      	movs	r1, #12
      }
   d5480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5484:	f002 bd43 	b.w	d7f0e <_ZdlPvj>
   d5488:	bd10      	pop	{r4, pc}
	...

000d548c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d548c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d548e:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5490:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d5492:	6005      	str	r5, [r0, #0]
   d5494:	6045      	str	r5, [r0, #4]
   d5496:	6085      	str	r5, [r0, #8]
   d5498:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d549a:	6105      	str	r5, [r0, #16]
   d549c:	6145      	str	r5, [r0, #20]
   d549e:	6185      	str	r5, [r0, #24]
   d54a0:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d54a2:	4628      	mov	r0, r5
   d54a4:	f7ff f81a 	bl	d44dc <hal_ble_stack_init>
   d54a8:	b120      	cbz	r0, d54b4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d54aa:	4a25      	ldr	r2, [pc, #148]	; (d5540 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d54ac:	4629      	mov	r1, r5
   d54ae:	200a      	movs	r0, #10
   d54b0:	f7ff f9e6 	bl	d4880 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d54b4:	2301      	movs	r3, #1
   d54b6:	f10d 0103 	add.w	r1, sp, #3
   d54ba:	a801      	add	r0, sp, #4
   d54bc:	f88d 3003 	strb.w	r3, [sp, #3]
   d54c0:	f7ff fec5 	bl	d524e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54c4:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d54c6:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d54c8:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d54ca:	2200      	movs	r2, #0
   d54cc:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d54ce:	b135      	cbz	r5, d54de <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d54d0:	4628      	mov	r0, r5
   d54d2:	f7ff feaa 	bl	d522a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54d6:	2110      	movs	r1, #16
   d54d8:	4628      	mov	r0, r5
   d54da:	f002 fd18 	bl	d7f0e <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d54de:	a801      	add	r0, sp, #4
   d54e0:	f7ff fec4 	bl	d526c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d54e4:	2001      	movs	r0, #1
   d54e6:	f7fe fdd6 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ea:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d54ec:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d54ee:	b11b      	cbz	r3, d54f8 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54f0:	2101      	movs	r1, #1
   d54f2:	4618      	mov	r0, r3
   d54f4:	f002 fd0b 	bl	d7f0e <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d54f8:	200c      	movs	r0, #12
   d54fa:	f7fe fdcc 	bl	d4096 <_Znwj>
   d54fe:	4603      	mov	r3, r0
   d5500:	b118      	cbz	r0, d550a <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d5502:	2200      	movs	r2, #0
   d5504:	6002      	str	r2, [r0, #0]
   d5506:	6042      	str	r2, [r0, #4]
   d5508:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d550a:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d550c:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d550e:	b108      	cbz	r0, d5514 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d5510:	f7ff ffa3 	bl	d545a <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5514:	200c      	movs	r0, #12
   d5516:	f7fe fdbe 	bl	d4096 <_Znwj>
   d551a:	4603      	mov	r3, r0
   d551c:	b118      	cbz	r0, d5526 <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d551e:	2200      	movs	r2, #0
   d5520:	6002      	str	r2, [r0, #0]
   d5522:	6042      	str	r2, [r0, #4]
   d5524:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5526:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5528:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d552a:	b108      	cbz	r0, d5530 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d552c:	f7ff ffa1 	bl	d5472 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d5530:	2200      	movs	r2, #0
   d5532:	4621      	mov	r1, r4
   d5534:	4803      	ldr	r0, [pc, #12]	; (d5544 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d5536:	f7fe ffd9 	bl	d44ec <hal_ble_set_callback_on_events>
}
   d553a:	4620      	mov	r0, r4
   d553c:	b003      	add	sp, #12
   d553e:	bd30      	pop	{r4, r5, pc}
   d5540:	000d4641 	.word	0x000d4641
   d5544:	000d5b05 	.word	0x000d5b05

000d5548 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5548:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d554a:	4c0a      	ldr	r4, [pc, #40]	; (d5574 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d554c:	6823      	ldr	r3, [r4, #0]
   d554e:	07db      	lsls	r3, r3, #31
   d5550:	d40e      	bmi.n	d5570 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5552:	4620      	mov	r0, r4
   d5554:	f7fe fdb0 	bl	d40b8 <__cxa_guard_acquire>
   d5558:	b150      	cbz	r0, d5570 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d555a:	4807      	ldr	r0, [pc, #28]	; (d5578 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d555c:	f7ff ff96 	bl	d548c <_ZN8particle14BleLocalDeviceC1Ev>
   d5560:	4620      	mov	r0, r4
   d5562:	f7fe fdae 	bl	d40c2 <__cxa_guard_release>
   d5566:	4a05      	ldr	r2, [pc, #20]	; (d557c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5568:	4905      	ldr	r1, [pc, #20]	; (d5580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d556a:	4803      	ldr	r0, [pc, #12]	; (d5578 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d556c:	f002 fcca 	bl	d7f04 <__aeabi_atexit>
    return instance;
}
   d5570:	4801      	ldr	r0, [pc, #4]	; (d5578 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5572:	bd10      	pop	{r4, pc}
   d5574:	2003e38c 	.word	0x2003e38c
   d5578:	2003e36c 	.word	0x2003e36c
   d557c:	2003d948 	.word	0x2003d948
   d5580:	000d5585 	.word	0x000d5585

000d5584 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5584:	b510      	push	{r4, lr}
   d5586:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5588:	69c0      	ldr	r0, [r0, #28]
   d558a:	b108      	cbz	r0, d5590 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d558c:	f7ff ff71 	bl	d5472 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5590:	69a0      	ldr	r0, [r4, #24]
   d5592:	b108      	cbz	r0, d5598 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d5594:	f7ff ff61 	bl	d545a <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5598:	6960      	ldr	r0, [r4, #20]
   d559a:	b110      	cbz	r0, d55a2 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d559c:	2101      	movs	r1, #1
   d559e:	f002 fcb6 	bl	d7f0e <_ZdlPvj>
   d55a2:	f104 0010 	add.w	r0, r4, #16
   d55a6:	f7ff fe61 	bl	d526c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d55aa:	4620      	mov	r0, r4
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d55ae:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d55b0:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d55b2:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d55b4:	dd06      	ble.n	d55c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d55b6:	2154      	movs	r1, #84	; 0x54
   d55b8:	4369      	muls	r1, r5
   d55ba:	6800      	ldr	r0, [r0, #0]
   d55bc:	f7ff fa14 	bl	d49e8 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d55c0:	b920      	cbnz	r0, d55cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d55c2:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d55c4:	6800      	ldr	r0, [r0, #0]
   d55c6:	f7ff fa07 	bl	d49d8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d55ca:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d55cc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d55ce:	60a5      	str	r5, [r4, #8]
        return true;
   d55d0:	2001      	movs	r0, #1
    }
   d55d2:	bd38      	pop	{r3, r4, r5, pc}

000d55d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_gap_on_scan_result_evt_t* event, void* context) {
   d55d4:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d55d6:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_gap_on_scan_result_evt_t* event, void* context) {
   d55d8:	b0c2      	sub	sp, #264	; 0x108
   d55da:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d55dc:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_gap_on_scan_result_evt_t* event, void* context) {
   d55de:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d55e0:	a803      	add	r0, sp, #12
   d55e2:	2100      	movs	r1, #0
   d55e4:	f002 fe39 	bl	d825a <memset>
   d55e8:	a805      	add	r0, sp, #20
   d55ea:	f7ff fba2 	bl	d4d32 <_ZN8particle18BleAdvertisingDataC1Ev>
   d55ee:	a80e      	add	r0, sp, #56	; 0x38
   d55f0:	f7ff fb9f 	bl	d4d32 <_ZN8particle18BleAdvertisingDataC1Ev>
   d55f4:	462a      	mov	r2, r5
   d55f6:	7da9      	ldrb	r1, [r5, #22]
   d55f8:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d55fc:	9001      	str	r0, [sp, #4]
   d55fe:	8892      	ldrh	r2, [r2, #4]
   d5600:	f8ad 2008 	strh.w	r2, [sp, #8]
   d5604:	ab01      	add	r3, sp, #4
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d5606:	f88d 1012 	strb.w	r1, [sp, #18]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d560a:	e893 0003 	ldmia.w	r3, {r0, r1}
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d560e:	89ea      	ldrh	r2, [r5, #14]
     */
    static void onScanResultCallback(const hal_ble_gap_on_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5610:	782b      	ldrb	r3, [r5, #0]
   d5612:	9003      	str	r0, [sp, #12]
   d5614:	f8ad 1010 	strh.w	r1, [sp, #16]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5618:	a80e      	add	r0, sp, #56	; 0x38
   d561a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_gap_on_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d561c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5620:	f7ff fb18 	bl	d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5624:	89aa      	ldrh	r2, [r5, #12]
   d5626:	6869      	ldr	r1, [r5, #4]
   d5628:	a805      	add	r0, sp, #20
   d562a:	f7ff fb13 	bl	d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d562e:	69a5      	ldr	r5, [r4, #24]
   d5630:	b11d      	cbz	r5, d563a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0x66>
            delegator->callback_(&result, delegator->context_);
   d5632:	69e1      	ldr	r1, [r4, #28]
   d5634:	a803      	add	r0, sp, #12
   d5636:	47a8      	blx	r5
   d5638:	e028      	b.n	d568c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xb8>
            delegator->foundCount_++;
        } else if (delegator->resultsPtr_) {
   d563a:	68e0      	ldr	r0, [r4, #12]
   d563c:	b198      	cbz	r0, d5666 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0x92>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d563e:	6963      	ldr	r3, [r4, #20]
   d5640:	6922      	ldr	r2, [r4, #16]
   d5642:	4293      	cmp	r3, r2
   d5644:	d23b      	bcs.n	d56be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xea>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5646:	1c5a      	adds	r2, r3, #1
   d5648:	6162      	str	r2, [r4, #20]
   d564a:	fb06 0003 	mla	r0, r6, r3, r0
   d564e:	2251      	movs	r2, #81	; 0x51
   d5650:	a903      	add	r1, sp, #12
   d5652:	f002 fddc 	bl	d820e <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5656:	6962      	ldr	r2, [r4, #20]
   d5658:	6923      	ldr	r3, [r4, #16]
   d565a:	429a      	cmp	r2, r3
   d565c:	d32f      	bcc.n	d56be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xea>
                    hal_ble_gap_stop_scan(nullptr);
   d565e:	4628      	mov	r0, r5
   d5660:	f7fe ff54 	bl	d450c <hal_ble_gap_stop_scan>
   d5664:	e02b      	b.n	d56be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xea>
   d5666:	4632      	mov	r2, r6
   d5668:	a903      	add	r1, sp, #12
   d566a:	a818      	add	r0, sp, #96	; 0x60
   d566c:	f002 fdcf 	bl	d820e <memcpy>
   d5670:	4632      	mov	r2, r6
   d5672:	a918      	add	r1, sp, #96	; 0x60
   d5674:	a82d      	add	r0, sp, #180	; 0xb4
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5676:	6865      	ldr	r5, [r4, #4]
   d5678:	f002 fdc9 	bl	d820e <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d567c:	68a3      	ldr	r3, [r4, #8]
   d567e:	429d      	cmp	r5, r3
   d5680:	db08      	blt.n	d5694 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xc0>
   d5682:	1c69      	adds	r1, r5, #1
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff ff92 	bl	d55ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d568a:	b918      	cbnz	r0, d5694 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xc0>
                }
            }
        } else {
            delegator->resultsVector_.append(result);
            delegator->foundCount_++;
   d568c:	6963      	ldr	r3, [r4, #20]
   d568e:	3301      	adds	r3, #1
   d5690:	6163      	str	r3, [r4, #20]
        }
    }
   d5692:	e014      	b.n	d56be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xea>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5694:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5696:	6822      	ldr	r2, [r4, #0]
   d5698:	2654      	movs	r6, #84	; 0x54
   d569a:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d569e:	fb06 2203 	mla	r2, r6, r3, r2
   d56a2:	1b52      	subs	r2, r2, r5
   d56a4:	4629      	mov	r1, r5
   d56a6:	19a8      	adds	r0, r5, r6
   d56a8:	f002 fdbc 	bl	d8224 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d56ac:	4632      	mov	r2, r6
   d56ae:	a92d      	add	r1, sp, #180	; 0xb4
   d56b0:	4628      	mov	r0, r5
   d56b2:	f002 fdac 	bl	d820e <memcpy>
    ++size_;
   d56b6:	6863      	ldr	r3, [r4, #4]
   d56b8:	3301      	adds	r3, #1
   d56ba:	6063      	str	r3, [r4, #4]
   d56bc:	e7e6      	b.n	d568c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK32hal_ble_gap_on_scan_result_evt_tPv+0xb8>
   d56be:	b042      	add	sp, #264	; 0x108
   d56c0:	bd70      	pop	{r4, r5, r6, pc}

000d56c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d56c2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56c6:	4606      	mov	r6, r0
   d56c8:	460c      	mov	r4, r1
   d56ca:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d56cc:	d914      	bls.n	d56f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d56ce:	4290      	cmp	r0, r2
   d56d0:	d213      	bcs.n	d56fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d56d2:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d56d6:	1a6c      	subs	r4, r5, r1
   d56d8:	f1a1 0708 	sub.w	r7, r1, #8
   d56dc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d56de:	42af      	cmp	r7, r5
   d56e0:	d018      	beq.n	d5714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d56e2:	b11c      	cbz	r4, d56ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d56e4:	4629      	mov	r1, r5
   d56e6:	4620      	mov	r0, r4
   d56e8:	f7ff fd8b 	bl	d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d56ec:	1d28      	adds	r0, r5, #4
   d56ee:	f7ff fd6e 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d56f2:	3d08      	subs	r5, #8
   d56f4:	3c08      	subs	r4, #8
   d56f6:	e7f2      	b.n	d56de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d56f8:	d00c      	beq.n	d5714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d56fa:	42ac      	cmp	r4, r5
   d56fc:	d00a      	beq.n	d5714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d56fe:	b11e      	cbz	r6, d5708 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5700:	4621      	mov	r1, r4
   d5702:	4630      	mov	r0, r6
   d5704:	f7ff fd7d 	bl	d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5708:	1d20      	adds	r0, r4, #4
   d570a:	f7ff fd60 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d570e:	3408      	adds	r4, #8
   d5710:	3608      	adds	r6, #8
   d5712:	e7f2      	b.n	d56fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5716 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5718:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d571a:	6846      	ldr	r6, [r0, #4]
   d571c:	4668      	mov	r0, sp
   d571e:	f7ff fd70 	bl	d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5722:	6867      	ldr	r7, [r4, #4]
   d5724:	68a3      	ldr	r3, [r4, #8]
   d5726:	429f      	cmp	r7, r3
   d5728:	db14      	blt.n	d5754 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d572a:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d572c:	2f00      	cmp	r7, #0
   d572e:	dd0b      	ble.n	d5748 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5730:	00f8      	lsls	r0, r7, #3
   d5732:	f7ff f949 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5736:	4605      	mov	r5, r0
   d5738:	b300      	cbz	r0, d577c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d573a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d573e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5742:	f7ff ffbe 	bl	d56c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5746:	e000      	b.n	d574a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5748:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d574a:	6820      	ldr	r0, [r4, #0]
   d574c:	f7ff f944 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5750:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5752:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5754:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5756:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5758:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d575c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5760:	4629      	mov	r1, r5
   d5762:	f105 0008 	add.w	r0, r5, #8
   d5766:	f7ff ffac 	bl	d56c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d576a:	b11d      	cbz	r5, d5774 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d576c:	4669      	mov	r1, sp
   d576e:	4628      	mov	r0, r5
   d5770:	f7ff fd47 	bl	d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5774:	6863      	ldr	r3, [r4, #4]
   d5776:	3301      	adds	r3, #1
   d5778:	6063      	str	r3, [r4, #4]
   d577a:	2501      	movs	r5, #1
   d577c:	a801      	add	r0, sp, #4
   d577e:	f7ff fd26 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5782:	4628      	mov	r0, r5
   d5784:	b003      	add	sp, #12
   d5786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5788 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>:
            }
        }
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d5788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d578c:	680c      	ldr	r4, [r1, #0]
   d578e:	b08b      	sub	sp, #44	; 0x2c
   d5790:	4606      	mov	r6, r0
   d5792:	460f      	mov	r7, r1
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d5794:	b314      	cbz	r4, d57dc <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
   d5796:	6985      	ldr	r5, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5798:	69c3      	ldr	r3, [r0, #28]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d579a:	f104 0a02 	add.w	sl, r4, #2
   d579e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
                && svcUuid == impl.svcUuid
   d57a2:	f104 0b16 	add.w	fp, r4, #22
    BleAttributeHandle endHandle;

private:
    bool contains(const BleCharacteristic& characteristic) {
        if (characteristic.impl() != nullptr) {
            for (const auto& stubChar : characteristics_) {
   d57a6:	45a8      	cmp	r8, r5
   d57a8:	d016      	beq.n	d57d8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x50>
   d57aa:	f8d5 9000 	ldr.w	r9, [r5]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d57ae:	4650      	mov	r0, sl
   d57b0:	f109 0102 	add.w	r1, r9, #2
   d57b4:	f7ff fa3c 	bl	d4c30 <_ZNK8particle7BleUuideqERKS0_>
                && svcUuid == impl.svcUuid
                && isLocal == impl.isLocal) {
   d57b8:	2800      	cmp	r0, #0
   d57ba:	d06b      	beq.n	d5894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
                && svcUuid == impl.svcUuid
   d57bc:	f109 0116 	add.w	r1, r9, #22
   d57c0:	4658      	mov	r0, fp
   d57c2:	f7ff fa35 	bl	d4c30 <_ZNK8particle7BleUuideqERKS0_>
   d57c6:	2800      	cmp	r0, #0
   d57c8:	d064      	beq.n	d5894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
                && isLocal == impl.isLocal) {
   d57ca:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d57ce:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
   d57d2:	429a      	cmp	r2, r3
   d57d4:	d15e      	bne.n	d5894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
   d57d6:	e001      	b.n	d57dc <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d57d8:	7823      	ldrb	r3, [r4, #0]
   d57da:	b90b      	cbnz	r3, d57e0 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x58>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d57dc:	4830      	ldr	r0, [pc, #192]	; (d58a0 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x118>)
   d57de:	e05b      	b.n	d5898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
        }
        if (characteristic.impl()->isLocal) {
   d57e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d57e4:	2b00      	cmp	r3, #0
   d57e6:	d041      	beq.n	d586c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xe4>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
   d57e8:	3402      	adds	r4, #2
   d57ea:	4620      	mov	r0, r4
   d57ec:	f7ff fa09 	bl	d4c02 <_ZNK8particle7BleUuid7isValidEv>
   d57f0:	b9b0      	cbnz	r0, d5820 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x98>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d57f2:	4b2c      	ldr	r3, [pc, #176]	; (d58a4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x11c>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d57f4:	492c      	ldr	r1, [pc, #176]	; (d58a8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x120>)
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d57f6:	881a      	ldrh	r2, [r3, #0]
   d57f8:	3201      	adds	r2, #1
   d57fa:	b292      	uxth	r2, r2
   d57fc:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d57fe:	a801      	add	r0, sp, #4
   d5800:	2301      	movs	r3, #1
   d5802:	f7ff f98f 	bl	d4b24 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            uuid = newUuid;
   d5806:	ad05      	add	r5, sp, #20
   d5808:	aa01      	add	r2, sp, #4
   d580a:	4613      	mov	r3, r2
   d580c:	cb03      	ldmia	r3!, {r0, r1}
   d580e:	42ab      	cmp	r3, r5
   d5810:	6020      	str	r0, [r4, #0]
   d5812:	6061      	str	r1, [r4, #4]
   d5814:	461a      	mov	r2, r3
   d5816:	f104 0408 	add.w	r4, r4, #8
   d581a:	d1f6      	bne.n	d580a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x82>
   d581c:	6818      	ldr	r0, [r3, #0]
   d581e:	6020      	str	r0, [r4, #0]
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (characteristic.impl()->isLocal) {
            characteristic.impl()->assignUuidIfNeeded();
            hal_ble_char_init_t char_init = {};
   d5820:	2424      	movs	r4, #36	; 0x24
   d5822:	4622      	mov	r2, r4
   d5824:	2100      	movs	r1, #0
   d5826:	a801      	add	r0, sp, #4
   d5828:	f002 fd17 	bl	d825a <memset>
            char_init.size = sizeof(hal_ble_char_init_t);
   d582c:	f8ad 4006 	strh.w	r4, [sp, #6]
   d5830:	683c      	ldr	r4, [r7, #0]
            char_init.uuid = characteristic.impl()->uuid.UUID();
   d5832:	aa04      	add	r2, sp, #16
   d5834:	1ca3      	adds	r3, r4, #2
   d5836:	f104 0e12 	add.w	lr, r4, #18
   d583a:	6818      	ldr	r0, [r3, #0]
   d583c:	6859      	ldr	r1, [r3, #4]
   d583e:	4615      	mov	r5, r2
   d5840:	c503      	stmia	r5!, {r0, r1}
   d5842:	3308      	adds	r3, #8
   d5844:	4573      	cmp	r3, lr
   d5846:	462a      	mov	r2, r5
   d5848:	d1f7      	bne.n	d583a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xb2>
   d584a:	6818      	ldr	r0, [r3, #0]
   d584c:	6028      	str	r0, [r5, #0]
            char_init.properties = static_cast<uint8_t>(characteristic.impl()->properties);
   d584e:	7823      	ldrb	r3, [r4, #0]
   d5850:	f88d 3008 	strb.w	r3, [sp, #8]
            char_init.service_handle = startHandle;
   d5854:	8ab3      	ldrh	r3, [r6, #20]
   d5856:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            char_init.description = characteristic.impl()->description.c_str();
   d585a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d585c:	9303      	str	r3, [sp, #12]
            int ret = hal_ble_gatt_server_add_characteristic(&char_init, &characteristic.impl()->attrHandles, nullptr);
   d585e:	2200      	movs	r2, #0
   d5860:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   d5864:	a801      	add	r0, sp, #4
   d5866:	f7fe fe79 	bl	d455c <hal_ble_gatt_server_add_characteristic>
            if (ret != SYSTEM_ERROR_NONE) {
   d586a:	b9a8      	cbnz	r0, d5898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d586c:	683b      	ldr	r3, [r7, #0]
                return ret;
            }
        }
        characteristic.impl()->svcImpl = this;
   d586e:	659e      	str	r6, [r3, #88]	; 0x58
   d5870:	683b      	ldr	r3, [r7, #0]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5872:	2201      	movs	r2, #1
   d5874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   d5878:	4639      	mov	r1, r7
   d587a:	a801      	add	r0, sp, #4
   d587c:	f7ff fcc1 	bl	d5202 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            }
        }
        characteristic.impl()->svcImpl = this;
        characteristic.impl()->setValid(true);
        LOG_DEBUG(TRACE, "characteristics.append(characteristic)");
        characteristics_.append(characteristic);
   d5880:	a901      	add	r1, sp, #4
   d5882:	f106 0018 	add.w	r0, r6, #24
   d5886:	f7ff ff46 	bl	d5716 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d588a:	a802      	add	r0, sp, #8
   d588c:	f7ff fc9f 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return SYSTEM_ERROR_NONE;
   d5890:	2000      	movs	r0, #0
   d5892:	e001      	b.n	d5898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d5894:	3508      	adds	r5, #8
   d5896:	e786      	b.n	d57a6 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x1e>
    }
   d5898:	b00b      	add	sp, #44	; 0x2c
   d589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d589e:	bf00      	nop
   d58a0:	fffffef2 	.word	0xfffffef2
   d58a4:	2003e390 	.word	0x2003e390
   d58a8:	000d85d4 	.word	0x000d85d4

000d58ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d58ac:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d58ae:	b570      	push	{r4, r5, r6, lr}
   d58b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d58b2:	d91a      	bls.n	d58ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d58b4:	4290      	cmp	r0, r2
   d58b6:	d219      	bcs.n	d58ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d58b8:	f1a1 0608 	sub.w	r6, r1, #8
   d58bc:	1a51      	subs	r1, r2, r1
   d58be:	3904      	subs	r1, #4
   d58c0:	1f15      	subs	r5, r2, #4
   d58c2:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d58c4:	1f2b      	subs	r3, r5, #4
   d58c6:	429e      	cmp	r6, r3
   d58c8:	d025      	beq.n	d5916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d58ca:	2c04      	cmp	r4, #4
   d58cc:	d007      	beq.n	d58de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d58d2:	f844 3c04 	str.w	r3, [r4, #-4]
   d58d6:	4629      	mov	r1, r5
   d58d8:	4620      	mov	r0, r4
   d58da:	f7ff fc8b 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58de:	4628      	mov	r0, r5
   d58e0:	f7ff fc75 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58e4:	3d08      	subs	r5, #8
   d58e6:	3c08      	subs	r4, #8
   d58e8:	e7ec      	b.n	d58c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d58ea:	d014      	beq.n	d5916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d58ec:	1d0c      	adds	r4, r1, #4
   d58ee:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d58f0:	1f23      	subs	r3, r4, #4
   d58f2:	429d      	cmp	r5, r3
   d58f4:	d00f      	beq.n	d5916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d58f6:	2e04      	cmp	r6, #4
   d58f8:	d007      	beq.n	d590a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d58fe:	f846 3c04 	str.w	r3, [r6, #-4]
   d5902:	4621      	mov	r1, r4
   d5904:	4630      	mov	r0, r6
   d5906:	f7ff fc75 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d590a:	4620      	mov	r0, r4
   d590c:	f7ff fc5f 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5910:	3408      	adds	r4, #8
   d5912:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5914:	e7ec      	b.n	d58f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5916:	bd70      	pop	{r4, r5, r6, pc}

000d5918 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>:

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d5918:	b5f0      	push	{r4, r5, r6, r7, lr}
   d591a:	680f      	ldr	r7, [r1, #0]
   d591c:	b089      	sub	sp, #36	; 0x24
   d591e:	460d      	mov	r5, r1
        if (getService(svc.impl()->uuid) != nullptr) {
   d5920:	4639      	mov	r1, r7

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d5922:	4604      	mov	r4, r0
        if (getService(svc.impl()->uuid) != nullptr) {
   d5924:	f7ff fb0b 	bl	d4f3e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
   d5928:	2800      	cmp	r0, #0
   d592a:	d15e      	bne.n	d59ea <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd2>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (local_) {
   d592c:	7b23      	ldrb	r3, [r4, #12]
   d592e:	b1bb      	cbz	r3, d5960 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x48>
            hal_ble_uuid_t halUuid = svc.impl()->uuid.UUID();
   d5930:	ae03      	add	r6, sp, #12
   d5932:	463b      	mov	r3, r7
   d5934:	f107 0c10 	add.w	ip, r7, #16
   d5938:	46b6      	mov	lr, r6
   d593a:	6818      	ldr	r0, [r3, #0]
   d593c:	6859      	ldr	r1, [r3, #4]
   d593e:	4632      	mov	r2, r6
   d5940:	c203      	stmia	r2!, {r0, r1}
   d5942:	3308      	adds	r3, #8
   d5944:	4563      	cmp	r3, ip
   d5946:	4616      	mov	r6, r2
   d5948:	d1f7      	bne.n	d593a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x22>
   d594a:	6818      	ldr	r0, [r3, #0]
   d594c:	6010      	str	r0, [r2, #0]
            int ret = hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle, nullptr);
   d594e:	2300      	movs	r3, #0
   d5950:	f107 0214 	add.w	r2, r7, #20
   d5954:	4671      	mov	r1, lr
   d5956:	2001      	movs	r0, #1
   d5958:	f7fe fdf6 	bl	d4548 <hal_ble_gatt_server_add_service>
            if (ret != SYSTEM_ERROR_NONE) {
   d595c:	2800      	cmp	r0, #0
   d595e:	d145      	bne.n	d59ec <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5960:	4629      	mov	r1, r5
   d5962:	a802      	add	r0, sp, #8
   d5964:	f851 3b04 	ldr.w	r3, [r1], #4
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	f7ff fc43 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d596e:	9b01      	ldr	r3, [sp, #4]
   d5970:	9303      	str	r3, [sp, #12]
   d5972:	a902      	add	r1, sp, #8
   d5974:	a804      	add	r0, sp, #16
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5976:	6867      	ldr	r7, [r4, #4]
   d5978:	f7ff fc3c 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d597c:	6865      	ldr	r5, [r4, #4]
   d597e:	68a3      	ldr	r3, [r4, #8]
   d5980:	429d      	cmp	r5, r3
   d5982:	db14      	blt.n	d59ae <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x96>
   d5984:	3501      	adds	r5, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5986:	2d00      	cmp	r5, #0
   d5988:	dd0b      	ble.n	d59a2 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8a>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d598a:	00e8      	lsls	r0, r5, #3
   d598c:	f7ff f81c 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5990:	4606      	mov	r6, r0
   d5992:	b310      	cbz	r0, d59da <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xc2>
                return false;
            }
            move(d, data_, data_ + size_);
   d5994:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5998:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d599c:	f7ff ff86 	bl	d58ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d59a0:	e000      	b.n	d59a4 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8c>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d59a2:	2600      	movs	r6, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d59a4:	6820      	ldr	r0, [r4, #0]
   d59a6:	f7ff f817 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d59aa:	6026      	str	r6, [r4, #0]
        capacity_ = n;
   d59ac:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d59ae:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d59b0:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d59b2:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d59b6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d59ba:	4629      	mov	r1, r5
   d59bc:	f105 0008 	add.w	r0, r5, #8
   d59c0:	f7ff ff74 	bl	d58ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d59c4:	b135      	cbz	r5, d59d4 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xbc>
   d59c6:	9b03      	ldr	r3, [sp, #12]
   d59c8:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d59cc:	a904      	add	r1, sp, #16
   d59ce:	1d28      	adds	r0, r5, #4
   d59d0:	f7ff fc10 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d59d4:	6863      	ldr	r3, [r4, #4]
   d59d6:	3301      	adds	r3, #1
   d59d8:	6063      	str	r3, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59da:	a804      	add	r0, sp, #16
   d59dc:	f7ff fbf7 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59e0:	a802      	add	r0, sp, #8
   d59e2:	f7ff fbf4 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                return ret;
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
   d59e6:	2000      	movs	r0, #0
   d59e8:	e000      	b.n	d59ec <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
        return services_;
    }

    int addService(BleService& svc) {
        if (getService(svc.impl()->uuid) != nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d59ea:	4801      	ldr	r0, [pc, #4]	; (d59f0 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd8>)
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }
   d59ec:	b009      	add	sp, #36	; 0x24
   d59ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d59f0:	fffffef2 	.word	0xfffffef2

000d59f4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d59f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d59f6:	2500      	movs	r5, #0
   d59f8:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d59fa:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d59fc:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59fe:	2020      	movs	r0, #32
   d5a00:	f7fe fb49 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a04:	4604      	mov	r4, r0
   d5a06:	b1b0      	cbz	r0, d5a36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d5a08:	4603      	mov	r3, r0
   d5a0a:	a901      	add	r1, sp, #4
   d5a0c:	f803 5b01 	strb.w	r5, [r3], #1
   d5a10:	f8c0 5001 	str.w	r5, [r0, #1]
   d5a14:	605d      	str	r5, [r3, #4]
   d5a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5a1a:	82c3      	strh	r3, [r0, #22]
   d5a1c:	237f      	movs	r3, #127	; 0x7f
   d5a1e:	f8c0 500a 	str.w	r5, [r0, #10]
   d5a22:	f8c0 500e 	str.w	r5, [r0, #14]
   d5a26:	f8c0 5012 	str.w	r5, [r0, #18]
   d5a2a:	7603      	strb	r3, [r0, #24]
   d5a2c:	301c      	adds	r0, #28
   d5a2e:	f88d 5004 	strb.w	r5, [sp, #4]
   d5a32:	f7ff fc0c 	bl	d524e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5a36:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a38:	2014      	movs	r0, #20
   d5a3a:	9301      	str	r3, [sp, #4]
   d5a3c:	f7fe fb2b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5a40:	b128      	cbz	r0, d5a4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5a42:	2301      	movs	r3, #1
   d5a44:	6043      	str	r3, [r0, #4]
   d5a46:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5a48:	4b06      	ldr	r3, [pc, #24]	; (d5a64 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d5a4a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5a4c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a4e:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5a50:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a52:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a54:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a56:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a58:	f7ff fbb9 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d5a5c:	4630      	mov	r0, r6
   d5a5e:	b002      	add	sp, #8
   d5a60:	bd70      	pop	{r4, r5, r6, pc}
   d5a62:	bf00      	nop
   d5a64:	000d85c0 	.word	0x000d85c0

000d5a68 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5a68:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d5a6a:	f04f 0100 	mov.w	r1, #0
   d5a6e:	aa01      	add	r2, sp, #4
   d5a70:	4604      	mov	r4, r0
   d5a72:	f7ff ffbf 	bl	d59f4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d5a76:	4620      	mov	r0, r4
   d5a78:	b002      	add	sp, #8
   d5a7a:	bd10      	pop	{r4, pc}

000d5a7c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE>:
    connParams.conn_sup_timeout = timeout;
    hal_ble_gap_set_ppcp(&connParams, nullptr);
    return connect(addr);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr) const {
   d5a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a80:	b08d      	sub	sp, #52	; 0x34
   d5a82:	4690      	mov	r8, r2
   d5a84:	4605      	mov	r5, r0
    Vector<BlePeerDevice>& peripherals() {
        return peripherals_;
    }

    BlePeerDevice connect(const BleAddress& addr) {
        BlePeerDevice pseudo;
   d5a86:	a802      	add	r0, sp, #8
    connParams.conn_sup_timeout = timeout;
    hal_ble_gap_set_ppcp(&connParams, nullptr);
    return connect(addr);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr) const {
   d5a88:	460f      	mov	r7, r1
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a8a:	69ce      	ldr	r6, [r1, #28]
    Vector<BlePeerDevice>& peripherals() {
        return peripherals_;
    }

    BlePeerDevice connect(const BleAddress& addr) {
        BlePeerDevice pseudo;
   d5a8c:	f7ff ffec 	bl	d5a68 <_ZN8particle13BlePeerDeviceC1Ev>
        int ret = hal_ble_gap_connect(&addr, nullptr);
   d5a90:	2100      	movs	r1, #0
   d5a92:	4640      	mov	r0, r8
   d5a94:	f7fe fd44 	bl	d4520 <hal_ble_gap_connect>
        if (ret != SYSTEM_ERROR_NONE) {
   d5a98:	b108      	cbz	r0, d5a9e <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x22>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5a9a:	a902      	add	r1, sp, #8
   d5a9c:	e019      	b.n	d5ad2 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x56>
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a9e:	ce50      	ldmia	r6, {r4, r6}
   d5aa0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
            LOG_DEBUG(TRACE, "hal_ble_gap_connect failed: %d", ret);
            return pseudo;
        }
        for (auto& peripheral : peripherals_) {
   d5aa4:	42a6      	cmp	r6, r4
   d5aa6:	46a1      	mov	r9, r4
   d5aa8:	d0f7      	beq.n	d5a9a <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x1e>
            if (peripheral.impl()->address == addr) {
   d5aaa:	f854 0b08 	ldr.w	r0, [r4], #8
   d5aae:	4641      	mov	r1, r8
   d5ab0:	3001      	adds	r0, #1
   d5ab2:	f7fe ffe0 	bl	d4a76 <_ZNK8particle10BleAddresseqERKS0_>
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	d0f4      	beq.n	d5aa4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x28>
                LOG(TRACE, "New peripheral connected.");
   d5aba:	2320      	movs	r3, #32
   d5abc:	4a0f      	ldr	r2, [pc, #60]	; (d5afc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x80>)
   d5abe:	9304      	str	r3, [sp, #16]
   d5ac0:	9200      	str	r2, [sp, #0]
   d5ac2:	2300      	movs	r3, #0
   d5ac4:	490e      	ldr	r1, [pc, #56]	; (d5b00 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x84>)
   d5ac6:	9305      	str	r3, [sp, #20]
   d5ac8:	aa04      	add	r2, sp, #16
   d5aca:	2001      	movs	r0, #1
   d5acc:	f7fe fee0 	bl	d4890 <log_message>
   d5ad0:	4649      	mov	r1, r9
   d5ad2:	4628      	mov	r0, r5
   d5ad4:	f7ff fb9f 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ad8:	a803      	add	r0, sp, #12
   d5ada:	f7ff fb78 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
BleCharacteristic BlePeerDevice::getCharacteristicByUUID(const BleUuid& uuid) {
    return impl()->gattsProxy->getCharacteristic(uuid);
}

bool BlePeerDevice::connected() {
    return impl()->connHandle != BLE_INVALID_CONN_HANDLE;
   d5ade:	682b      	ldr	r3, [r5, #0]

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer = centralProxy_->connect(addr);
    // Automatically discover services and characteristics.
    if (peer.connected()) {
   d5ae0:	8ada      	ldrh	r2, [r3, #22]
   d5ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5ae6:	429a      	cmp	r2, r3
   d5ae8:	d003      	beq.n	d5af2 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressE+0x76>
        gattcProxy_->discoverAllServices(peer);
   d5aea:	4629      	mov	r1, r5
   d5aec:	6978      	ldr	r0, [r7, #20]
   d5aee:	f7ff fa3b 	bl	d4f68 <_ZN8particle17BleGattClientImpl19discoverAllServicesERNS_13BlePeerDeviceE>
    }
    return peer;
}
   d5af2:	4628      	mov	r0, r5
   d5af4:	b00d      	add	sp, #52	; 0x34
   d5af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5afa:	bf00      	nop
   d5afc:	000d8665 	.word	0x000d8665
   d5b00:	000d85e4 	.word	0x000d85e4

000d5b04 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d5b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5b06:	4604      	mov	r4, r0
   d5b08:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d5b0a:	460d      	mov	r5, r1
   d5b0c:	2900      	cmp	r1, #0
   d5b0e:	f000 80a5 	beq.w	d5c5c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d5b12:	a803      	add	r0, sp, #12
   d5b14:	f7fe ffc6 	bl	d4aa4 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d5b18:	6863      	ldr	r3, [r4, #4]
   d5b1a:	3b03      	subs	r3, #3
   d5b1c:	2b07      	cmp	r3, #7
   d5b1e:	f200 809a 	bhi.w	d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d5b22:	e8df f003 	tbb	[pc, r3]
   d5b26:	4404      	.short	0x4404
   d5b28:	98989898 	.word	0x98989898
   d5b2c:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d5b2e:	a806      	add	r0, sp, #24
   d5b30:	f7ff ff9a 	bl	d5a68 <_ZN8particle13BlePeerDeviceC1Ev>
   d5b34:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d5b36:	89a2      	ldrh	r2, [r4, #12]
   d5b38:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d5b3a:	8962      	ldrh	r2, [r4, #10]
   d5b3c:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d5b3e:	8922      	ldrh	r2, [r4, #8]
   d5b40:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d5b42:	8922      	ldrh	r2, [r4, #8]
   d5b44:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d5b46:	8b22      	ldrh	r2, [r4, #24]
   d5b48:	82da      	strh	r2, [r3, #22]
   d5b4a:	4622      	mov	r2, r4
   d5b4c:	7da1      	ldrb	r1, [r4, #22]
   d5b4e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5b52:	9004      	str	r0, [sp, #16]
   d5b54:	8892      	ldrh	r2, [r2, #4]
   d5b56:	f8ad 2014 	strh.w	r2, [sp, #20]
   d5b5a:	9804      	ldr	r0, [sp, #16]
   d5b5c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d5b60:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d5b62:	f8c3 0001 	str.w	r0, [r3, #1]
   d5b66:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d5b6a:	682b      	ldr	r3, [r5, #0]
   d5b6c:	b113      	cbz	r3, d5b74 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d5b6e:	68a9      	ldr	r1, [r5, #8]
   d5b70:	a806      	add	r0, sp, #24
   d5b72:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d5b74:	7ba3      	ldrb	r3, [r4, #14]
   d5b76:	2b01      	cmp	r3, #1
   d5b78:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d5b7a:	bf0b      	itete	eq
   d5b7c:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d5b7e:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d5b80:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d5b82:	701a      	strbne	r2, [r3, #0]
   d5b84:	bf0c      	ite	eq
   d5b86:	69ac      	ldreq	r4, [r5, #24]
   d5b88:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d5b8a:	6863      	ldr	r3, [r4, #4]
   d5b8c:	2b00      	cmp	r3, #0
   d5b8e:	dc0a      	bgt.n	d5ba6 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
   d5b90:	a906      	add	r1, sp, #24
   d5b92:	a808      	add	r0, sp, #32
   d5b94:	f7ff fb3f 	bl	d5216 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d5b98:	a908      	add	r1, sp, #32
   d5b9a:	4620      	mov	r0, r4
   d5b9c:	f7ff fc12 	bl	d53c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5ba0:	a809      	add	r0, sp, #36	; 0x24
   d5ba2:	f7ff fb14 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ba6:	a807      	add	r0, sp, #28
   d5ba8:	f7ff fb11 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bac:	e053      	b.n	d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d5bae:	89a1      	ldrh	r1, [r4, #12]
   d5bb0:	4628      	mov	r0, r5
   d5bb2:	f7ff faea 	bl	d518a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d5bb6:	4604      	mov	r4, r0
   d5bb8:	2800      	cmp	r0, #0
   d5bba:	d04c      	beq.n	d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d5bbc:	686b      	ldr	r3, [r5, #4]
   d5bbe:	b10b      	cbz	r3, d5bc4 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d5bc0:	68e9      	ldr	r1, [r5, #12]
   d5bc2:	4798      	blx	r3
   d5bc4:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d5bc6:	781a      	ldrb	r2, [r3, #0]
   d5bc8:	2a01      	cmp	r2, #1
   d5bca:	d104      	bne.n	d5bd6 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d5bcc:	4621      	mov	r1, r4
   d5bce:	69e8      	ldr	r0, [r5, #28]
   d5bd0:	f7ff fbb2 	bl	d5338 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d5bd4:	e03f      	b.n	d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d5bd6:	69da      	ldr	r2, [r3, #28]
   d5bd8:	69a8      	ldr	r0, [r5, #24]
   d5bda:	6813      	ldr	r3, [r2, #0]
   d5bdc:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5bde:	2600      	movs	r6, #0
   d5be0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d5be4:	4299      	cmp	r1, r3
   d5be6:	d00d      	beq.n	d5c04 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d5be8:	681d      	ldr	r5, [r3, #0]
   d5bea:	69aa      	ldr	r2, [r5, #24]
   d5bec:	69ed      	ldr	r5, [r5, #28]
   d5bee:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d5bf2:	4295      	cmp	r5, r2
   d5bf4:	d004      	beq.n	d5c00 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d5bf6:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d5bfa:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d5bfe:	e7f8      	b.n	d5bf2 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d5c00:	3308      	adds	r3, #8
   d5c02:	e7ef      	b.n	d5be4 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d5c04:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5c0a:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d5c0c:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d5c0e:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d5c10:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d5c12:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d5c14:	f8c3 200a 	str.w	r2, [r3, #10]
   d5c18:	f8c3 200e 	str.w	r2, [r3, #14]
   d5c1c:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d5c20:	f7ff fb3c 	bl	d529c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d5c24:	e017      	b.n	d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d5c26:	8aa1      	ldrh	r1, [r4, #20]
   d5c28:	4628      	mov	r0, r5
   d5c2a:	f7ff faae 	bl	d518a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d5c2e:	b190      	cbz	r0, d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d5c30:	8ae1      	ldrh	r1, [r4, #22]
   d5c32:	9000      	str	r0, [sp, #0]
   d5c34:	68e3      	ldr	r3, [r4, #12]
   d5c36:	6922      	ldr	r2, [r4, #16]
   d5c38:	6928      	ldr	r0, [r5, #16]
   d5c3a:	e00a      	b.n	d5c52 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d5c3c:	8aa1      	ldrh	r1, [r4, #20]
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f7ff faa3 	bl	d518a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d5c44:	b138      	cbz	r0, d5c56 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d5c46:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d5c48:	8ae1      	ldrh	r1, [r4, #22]
   d5c4a:	9000      	str	r0, [sp, #0]
   d5c4c:	68e3      	ldr	r3, [r4, #12]
   d5c4e:	6922      	ldr	r2, [r4, #16]
   d5c50:	69e8      	ldr	r0, [r5, #28]
   d5c52:	f7ff f933 	bl	d4ebc <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d5c56:	a803      	add	r0, sp, #12
   d5c58:	f7fe ff32 	bl	d4ac0 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d5c5c:	b00b      	add	sp, #44	; 0x2c
   d5c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c60 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5c60:	b510      	push	{r4, lr}
   d5c62:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	b108      	cbz	r0, d5c6c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5c68:	f7fe fa17 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	bd10      	pop	{r4, pc}

000d5c70 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5c70:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5c72:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5c74:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5c76:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
        this->svcUuid = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5c7a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   d5c7e:	f001 fe56 	bl	d792e <_ZN6StringD1Ev>
   d5c82:	4668      	mov	r0, sp
   d5c84:	f7ff ffec 	bl	d5c60 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5c88:	b003      	add	sp, #12
   d5c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5c90:	b538      	push	{r3, r4, r5, lr}
   d5c92:	2300      	movs	r3, #0
   d5c94:	4604      	mov	r4, r0
   d5c96:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5c98:	2014      	movs	r0, #20
   d5c9a:	460d      	mov	r5, r1
   d5c9c:	f7fe f9fb 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5ca0:	b128      	cbz	r0, d5cae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5ca2:	2301      	movs	r3, #1
   d5ca4:	6043      	str	r3, [r0, #4]
   d5ca6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5ca8:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5caa:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5cac:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5cae:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	bd38      	pop	{r3, r4, r5, pc}
   d5cb4:	000d8588 	.word	0x000d8588

000d5cb8 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d5cb8:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5cba:	2500      	movs	r5, #0
   d5cbc:	b086      	sub	sp, #24
   d5cbe:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5cc0:	6045      	str	r5, [r0, #4]
   d5cc2:	4604      	mov	r4, r0
   d5cc4:	2060      	movs	r0, #96	; 0x60
   d5cc6:	f7fe f9e6 	bl	d4096 <_Znwj>
   d5cca:	f8cd d010 	str.w	sp, [sp, #16]
   d5cce:	4606      	mov	r6, r0
   d5cd0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5cd2:	b108      	cbz	r0, d5cd8 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d5cd4:	f7ff f8d2 	bl	d4e7c <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5cd8:	4631      	mov	r1, r6
   d5cda:	ab01      	add	r3, sp, #4
   d5cdc:	aa02      	add	r2, sp, #8
   d5cde:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5ce0:	9505      	str	r5, [sp, #20]
   d5ce2:	f7ff ffd5 	bl	d5c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ce6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5ce8:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5cea:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5cec:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5cee:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5cf0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5cf2:	f7ff fa6c 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5cf6:	a804      	add	r0, sp, #16
   d5cf8:	f7ff ffb2 	bl	d5c60 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	b006      	add	sp, #24
   d5d00:	bd70      	pop	{r4, r5, r6, pc}

000d5d02 <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_gattc_on_char_disc_evt_t* event, void* context) {
   d5d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        BleService* service = static_cast<BleService*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5d06:	f04f 0900 	mov.w	r9, #0
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_gattc_on_char_disc_evt_t* event, void* context) {
   d5d0a:	b089      	sub	sp, #36	; 0x24
   d5d0c:	4605      	mov	r5, r0
   d5d0e:	460e      	mov	r6, r1
        BleService* service = static_cast<BleService*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->isLocal = false;
   d5d10:	464f      	mov	r7, r9
   d5d12:	f04f 082a 	mov.w	r8, #42	; 0x2a
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_gattc_on_char_disc_evt_t* event, void* context) {
        BleService* service = static_cast<BleService*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5d16:	682b      	ldr	r3, [r5, #0]
   d5d18:	4599      	cmp	r9, r3
   d5d1a:	f080 8094 	bcs.w	d5e46 <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv+0x144>
            BleCharacteristic characteristic;
   d5d1e:	a801      	add	r0, sp, #4
   d5d20:	f7ff ffca 	bl	d5cb8 <_ZN8particle17BleCharacteristicC1Ev>
   d5d24:	9b01      	ldr	r3, [sp, #4]
            characteristic.impl()->isLocal = false;
   d5d26:	f883 703c 	strb.w	r7, [r3, #60]	; 0x3c
            characteristic.impl()->connHandle = event->conn_handle;
   d5d2a:	892a      	ldrh	r2, [r5, #8]
   d5d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
   d5d30:	6834      	ldr	r4, [r6, #0]
            characteristic.impl()->svcUuid = service->impl()->uuid;
   d5d32:	f103 0216 	add.w	r2, r3, #22
   d5d36:	f104 0c10 	add.w	ip, r4, #16
   d5d3a:	46a6      	mov	lr, r4
   d5d3c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   d5d40:	45e6      	cmp	lr, ip
   d5d42:	6010      	str	r0, [r2, #0]
   d5d44:	6051      	str	r1, [r2, #4]
   d5d46:	4674      	mov	r4, lr
   d5d48:	f102 0208 	add.w	r2, r2, #8
   d5d4c:	d1f5      	bne.n	d5d3a <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv+0x38>
   d5d4e:	f8de 0000 	ldr.w	r0, [lr]
   d5d52:	6010      	str	r0, [r2, #0]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d5d54:	686a      	ldr	r2, [r5, #4]
   d5d56:	fb08 f409 	mul.w	r4, r8, r9
   d5d5a:	4422      	add	r2, r4
   d5d5c:	7e52      	ldrb	r2, [r2, #25]
   d5d5e:	0792      	lsls	r2, r2, #30

inline BleCharacteristicProperty& operator|=(BleCharacteristicProperty& lhs, BleCharacteristicProperty rhs) {
    lhs = static_cast<BleCharacteristicProperty> (
        static_cast<std::underlying_type<BleCharacteristicProperty>::type>(lhs) |
        static_cast<std::underlying_type<BleCharacteristicProperty>::type>(rhs)
    );
   d5d60:	bf42      	ittt	mi
   d5d62:	781a      	ldrbmi	r2, [r3, #0]
   d5d64:	f042 0202 	orrmi.w	r2, r2, #2
   d5d68:	701a      	strbmi	r2, [r3, #0]
                characteristic.impl()->properties |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d5d6a:	686b      	ldr	r3, [r5, #4]
   d5d6c:	4423      	add	r3, r4
   d5d6e:	7e5b      	ldrb	r3, [r3, #25]
   d5d70:	0758      	lsls	r0, r3, #29
   d5d72:	bf41      	itttt	mi
   d5d74:	9a01      	ldrmi	r2, [sp, #4]
   d5d76:	7813      	ldrbmi	r3, [r2, #0]
   d5d78:	f043 0304 	orrmi.w	r3, r3, #4
   d5d7c:	7013      	strbmi	r3, [r2, #0]
                characteristic.impl()->properties |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d5d7e:	686b      	ldr	r3, [r5, #4]
   d5d80:	4423      	add	r3, r4
                characteristic.impl()->properties |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties |= BleCharacteristicProperty::INDICATE;
            }
            BleUuid charUUID;
   d5d82:	a803      	add	r0, sp, #12
                characteristic.impl()->properties |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
                characteristic.impl()->properties |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d5d84:	7e5b      	ldrb	r3, [r3, #25]
   d5d86:	0719      	lsls	r1, r3, #28
   d5d88:	bf41      	itttt	mi
   d5d8a:	9a01      	ldrmi	r2, [sp, #4]
   d5d8c:	7813      	ldrbmi	r3, [r2, #0]
   d5d8e:	f043 0308 	orrmi.w	r3, r3, #8
   d5d92:	7013      	strbmi	r3, [r2, #0]
                characteristic.impl()->properties |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY){
   d5d94:	686b      	ldr	r3, [r5, #4]
   d5d96:	4423      	add	r3, r4
   d5d98:	7e5b      	ldrb	r3, [r3, #25]
   d5d9a:	06da      	lsls	r2, r3, #27
   d5d9c:	bf41      	itttt	mi
   d5d9e:	9a01      	ldrmi	r2, [sp, #4]
   d5da0:	7813      	ldrbmi	r3, [r2, #0]
   d5da2:	f043 0310 	orrmi.w	r3, r3, #16
   d5da6:	7013      	strbmi	r3, [r2, #0]
                characteristic.impl()->properties |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d5da8:	686b      	ldr	r3, [r5, #4]
   d5daa:	4423      	add	r3, r4
   d5dac:	7e5b      	ldrb	r3, [r3, #25]
   d5dae:	069b      	lsls	r3, r3, #26
   d5db0:	bf41      	itttt	mi
   d5db2:	9a01      	ldrmi	r2, [sp, #4]
   d5db4:	7813      	ldrbmi	r3, [r2, #0]
   d5db6:	f043 0320 	orrmi.w	r3, r3, #32
   d5dba:	7013      	strbmi	r3, [r2, #0]
                characteristic.impl()->properties |= BleCharacteristicProperty::INDICATE;
            }
            BleUuid charUUID;
   d5dbc:	f7fe fe69 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
            charUUID.UUID() = event->characteristics[i].uuid;
   d5dc0:	686a      	ldr	r2, [r5, #4]
   d5dc2:	4422      	add	r2, r4
   d5dc4:	1d13      	adds	r3, r2, #4
   d5dc6:	f10d 0e0c 	add.w	lr, sp, #12
   d5dca:	3214      	adds	r2, #20
   d5dcc:	6818      	ldr	r0, [r3, #0]
   d5dce:	6859      	ldr	r1, [r3, #4]
   d5dd0:	46f4      	mov	ip, lr
   d5dd2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d5dd6:	3308      	adds	r3, #8
   d5dd8:	4293      	cmp	r3, r2
   d5dda:	46e6      	mov	lr, ip
   d5ddc:	d1f6      	bne.n	d5dcc <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv+0xca>
   d5dde:	6818      	ldr	r0, [r3, #0]
   d5de0:	f8cc 0000 	str.w	r0, [ip]
            characteristic.impl()->uuid = charUUID;
   d5de4:	9a01      	ldr	r2, [sp, #4]
   d5de6:	ab03      	add	r3, sp, #12
   d5de8:	3202      	adds	r2, #2
   d5dea:	f10d 0c1c 	add.w	ip, sp, #28
   d5dee:	469e      	mov	lr, r3
   d5df0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   d5df4:	45e6      	cmp	lr, ip
   d5df6:	6010      	str	r0, [r2, #0]
   d5df8:	6051      	str	r1, [r2, #4]
   d5dfa:	4673      	mov	r3, lr
   d5dfc:	f102 0208 	add.w	r2, r2, #8
   d5e00:	d1f5      	bne.n	d5dee <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv+0xec>
   d5e02:	f8de 0000 	ldr.w	r0, [lr]
   d5e06:	6010      	str	r0, [r2, #0]
            characteristic.impl()->attrHandles = event->characteristics[i].charHandles;
   d5e08:	686a      	ldr	r2, [r5, #4]
   d5e0a:	9b01      	ldr	r3, [sp, #4]
   d5e0c:	4414      	add	r4, r2
            if (service->impl()->addCharacteristic(characteristic) == SYSTEM_ERROR_NONE) {
   d5e0e:	a901      	add	r1, sp, #4
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d5e10:	8be2      	ldrh	r2, [r4, #30]
   d5e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        this->decl_handle = halHandles.decl_handle;
   d5e16:	8c22      	ldrh	r2, [r4, #32]
   d5e18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        this->value_handle = halHandles.value_handle;
   d5e1c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d5e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        this->user_desc_handle = halHandles.user_desc_handle;
   d5e22:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d5e24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        this->cccd_handle = halHandles.cccd_handle;
   d5e28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d5e2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        this->sccd_handle = halHandles.sccd_handle;
   d5e2e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d5e30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
   d5e34:	6830      	ldr	r0, [r6, #0]
   d5e36:	f7ff fca7 	bl	d5788 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e3a:	a802      	add	r0, sp, #8
   d5e3c:	f7ff f9c7 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_gattc_on_char_disc_evt_t* event, void* context) {
        BleService* service = static_cast<BleService*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5e40:	f109 0901 	add.w	r9, r9, #1
   d5e44:	e767      	b.n	d5d16 <_ZN8particle17BleGattClientImpl27onCharacteristicsDiscoveredEPK32hal_ble_gattc_on_char_disc_evt_tPv+0x14>
            characteristic.impl()->attrHandles = event->characteristics[i].charHandles;
            if (service->impl()->addCharacteristic(characteristic) == SYSTEM_ERROR_NONE) {
                LOG_DEBUG(TRACE, "New characteristic found.");
            }
        }
    }
   d5e46:	b009      	add	sp, #36	; 0x24
   d5e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5e4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5e4c:	b510      	push	{r4, lr}
   d5e4e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5e50:	6840      	ldr	r0, [r0, #4]
   d5e52:	b108      	cbz	r0, d5e58 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5e54:	f7fe f921 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5e58:	4620      	mov	r0, r4
   d5e5a:	bd10      	pop	{r4, pc}

000d5e5c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5e5e:	6905      	ldr	r5, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5e60:	300c      	adds	r0, #12
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5e62:	69ac      	ldr	r4, [r5, #24]
   d5e64:	69eb      	ldr	r3, [r5, #28]
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5e66:	e88d 0021 	stmia.w	sp, {r0, r5}
   d5e6a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e6e:	42a6      	cmp	r6, r4
   d5e70:	d004      	beq.n	d5e7c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x20>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e72:	1d20      	adds	r0, r4, #4
   d5e74:	f7ff f9ab 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e78:	3408      	adds	r4, #8
   d5e7a:	e7f8      	b.n	d5e6e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5e7c:	69a8      	ldr	r0, [r5, #24]
   d5e7e:	f7fe fdab 	bl	d49d8 <free>
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5e82:	4668      	mov	r0, sp
   d5e84:	f7ff ffe2 	bl	d5e4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5e88:	b002      	add	sp, #8
   d5e8a:	bd70      	pop	{r4, r5, r6, pc}

000d5e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5e8c:	b538      	push	{r3, r4, r5, lr}
   d5e8e:	2300      	movs	r3, #0
   d5e90:	4604      	mov	r4, r0
   d5e92:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5e94:	2014      	movs	r0, #20
   d5e96:	460d      	mov	r5, r1
   d5e98:	f7fe f8fd 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5e9c:	b128      	cbz	r0, d5eaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5e9e:	2301      	movs	r3, #1
   d5ea0:	6043      	str	r3, [r0, #4]
   d5ea2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5ea4:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5ea6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5ea8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5eaa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5eac:	4620      	mov	r0, r4
   d5eae:	bd38      	pop	{r3, r4, r5, pc}
   d5eb0:	000d85a4 	.word	0x000d85a4

000d5eb4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
   d5eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5eb6:	2600      	movs	r6, #0
   d5eb8:	b087      	sub	sp, #28
   d5eba:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ebc:	6046      	str	r6, [r0, #4]
   d5ebe:	4607      	mov	r7, r0
   d5ec0:	2024      	movs	r0, #36	; 0x24
   d5ec2:	460d      	mov	r5, r1
   d5ec4:	f7fe f8e7 	bl	d4096 <_Znwj>
   d5ec8:	f8cd d010 	str.w	sp, [sp, #16]
   d5ecc:	4604      	mov	r4, r0
   d5ece:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5ed0:	b1a0      	cbz	r0, d5efc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x48>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid(),
              startHandle(BLE_INVALID_ATTR_HANDLE),
              endHandle(BLE_INVALID_ATTR_HANDLE) {
   d5ed2:	f7fe fdde 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
   d5ed6:	82a6      	strh	r6, [r4, #20]
   d5ed8:	82e6      	strh	r6, [r4, #22]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5eda:	61a6      	str	r6, [r4, #24]
   d5edc:	61e6      	str	r6, [r4, #28]
   d5ede:	6226      	str	r6, [r4, #32]
    }
    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid = svcUuid;
   d5ee0:	462b      	mov	r3, r5
   d5ee2:	4622      	mov	r2, r4
   d5ee4:	f105 0610 	add.w	r6, r5, #16
   d5ee8:	6818      	ldr	r0, [r3, #0]
   d5eea:	6859      	ldr	r1, [r3, #4]
   d5eec:	4615      	mov	r5, r2
   d5eee:	c503      	stmia	r5!, {r0, r1}
   d5ef0:	3308      	adds	r3, #8
   d5ef2:	42b3      	cmp	r3, r6
   d5ef4:	462a      	mov	r2, r5
   d5ef6:	d1f7      	bne.n	d5ee8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x34>
   d5ef8:	6818      	ldr	r0, [r3, #0]
   d5efa:	6028      	str	r0, [r5, #0]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5efc:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5efe:	4621      	mov	r1, r4
   d5f00:	9305      	str	r3, [sp, #20]
   d5f02:	aa02      	add	r2, sp, #8
   d5f04:	ab01      	add	r3, sp, #4
   d5f06:	a803      	add	r0, sp, #12
   d5f08:	f7ff ffc0 	bl	d5e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f0c:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5f0e:	687a      	ldr	r2, [r7, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5f10:	603c      	str	r4, [r7, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5f12:	607b      	str	r3, [r7, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f14:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5f16:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f18:	f7ff f959 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5f1c:	a804      	add	r0, sp, #16
   d5f1e:	f7ff ff95 	bl	d5e4c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
}
   d5f22:	4638      	mov	r0, r7
   d5f24:	b007      	add	sp, #28
   d5f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f28 <_ZN8particle17BleGattClientImpl20onServicesDiscoveredEPK31hal_ble_gattc_on_svc_disc_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_gattc_on_svc_disc_evt_t* event, void* context) {
   d5f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f2c:	4680      	mov	r8, r0
   d5f2e:	b088      	sub	sp, #32
   d5f30:	460d      	mov	r5, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5f32:	2700      	movs	r7, #0
   d5f34:	261c      	movs	r6, #28
   d5f36:	f8d8 3000 	ldr.w	r3, [r8]
   d5f3a:	429f      	cmp	r7, r3
   d5f3c:	d230      	bcs.n	d5fa0 <_ZN8particle17BleGattClientImpl20onServicesDiscoveredEPK31hal_ble_gattc_on_svc_disc_evt_tPv+0x78>
            BleUuid svcUUID;
   d5f3e:	a803      	add	r0, sp, #12
   d5f40:	f7fe fda7 	bl	d4a92 <_ZN8particle7BleUuidC1Ev>
            svcUUID.UUID() = event->services[i].uuid;
   d5f44:	f8d8 2004 	ldr.w	r2, [r8, #4]
   d5f48:	fb06 f407 	mul.w	r4, r6, r7
   d5f4c:	4422      	add	r2, r4
   d5f4e:	1d13      	adds	r3, r2, #4
   d5f50:	f10d 0e0c 	add.w	lr, sp, #12
   d5f54:	3214      	adds	r2, #20
   d5f56:	6818      	ldr	r0, [r3, #0]
   d5f58:	6859      	ldr	r1, [r3, #4]
   d5f5a:	46f4      	mov	ip, lr
   d5f5c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d5f60:	3308      	adds	r3, #8
   d5f62:	4293      	cmp	r3, r2
   d5f64:	46e6      	mov	lr, ip
   d5f66:	d1f6      	bne.n	d5f56 <_ZN8particle17BleGattClientImpl20onServicesDiscoveredEPK31hal_ble_gattc_on_svc_disc_evt_tPv+0x2e>
   d5f68:	6818      	ldr	r0, [r3, #0]
   d5f6a:	f8cc 0000 	str.w	r0, [ip]
            BleService service(svcUUID);
   d5f6e:	a903      	add	r1, sp, #12
   d5f70:	a801      	add	r0, sp, #4
   d5f72:	f7ff ff9f 	bl	d5eb4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
            service.impl()->startHandle = event->services[i].start_handle;
   d5f76:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d5f7a:	9a01      	ldr	r2, [sp, #4]
   d5f7c:	4423      	add	r3, r4
            service.impl()->endHandle = event->services[i].end_handle;
            if (peer->impl()->gattsProxy->addService(service) == SYSTEM_ERROR_NONE) {
   d5f7e:	a901      	add	r1, sp, #4
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleUuid svcUUID;
            svcUUID.UUID() = event->services[i].uuid;
            BleService service(svcUUID);
            service.impl()->startHandle = event->services[i].start_handle;
   d5f80:	8b1b      	ldrh	r3, [r3, #24]
   d5f82:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle = event->services[i].end_handle;
   d5f84:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d5f88:	441c      	add	r4, r3
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_gattc_on_svc_disc_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5f8a:	3701      	adds	r7, #1
            BleUuid svcUUID;
            svcUUID.UUID() = event->services[i].uuid;
            BleService service(svcUUID);
            service.impl()->startHandle = event->services[i].start_handle;
            service.impl()->endHandle = event->services[i].end_handle;
   d5f8c:	8b63      	ldrh	r3, [r4, #26]
   d5f8e:	82d3      	strh	r3, [r2, #22]
   d5f90:	682b      	ldr	r3, [r5, #0]
            if (peer->impl()->gattsProxy->addService(service) == SYSTEM_ERROR_NONE) {
   d5f92:	69d8      	ldr	r0, [r3, #28]
   d5f94:	f7ff fcc0 	bl	d5918 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5f98:	a802      	add	r0, sp, #8
   d5f9a:	f7ff f918 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_gattc_on_svc_disc_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d5f9e:	e7ca      	b.n	d5f36 <_ZN8particle17BleGattClientImpl20onServicesDiscoveredEPK31hal_ble_gattc_on_svc_disc_evt_tPv+0xe>
            service.impl()->endHandle = event->services[i].end_handle;
            if (peer->impl()->gattsProxy->addService(service) == SYSTEM_ERROR_NONE) {
                LOG_DEBUG(TRACE, "New service found.");
            }
        }
    }
   d5fa0:	b008      	add	sp, #32
   d5fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5fa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5fa8:	4802      	ldr	r0, [pc, #8]	; (d5fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5faa:	2300      	movs	r3, #0
   d5fac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5fae:	f7fe bb27 	b.w	d4600 <os_mutex_recursive_create>
   d5fb2:	bf00      	nop
   d5fb4:	2003e394 	.word	0x2003e394

000d5fb8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5fb8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5fba:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5fbc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5fbe:	b113      	cbz	r3, d5fc6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fc0:	2203      	movs	r2, #3
   d5fc2:	4601      	mov	r1, r0
   d5fc4:	4798      	blx	r3
    }
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	bd10      	pop	{r4, pc}

000d5fca <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fca:	2200      	movs	r2, #0
   d5fcc:	4611      	mov	r1, r2
   d5fce:	6840      	ldr	r0, [r0, #4]
   d5fd0:	f7fe bce2 	b.w	d4998 <network_listening>

000d5fd4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fd4:	2200      	movs	r2, #0
   d5fd6:	4611      	mov	r1, r2
   d5fd8:	6840      	ldr	r0, [r0, #4]
   d5fda:	f7fe bced 	b.w	d49b8 <network_get_listen_timeout>

000d5fde <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fde:	2200      	movs	r2, #0
   d5fe0:	6840      	ldr	r0, [r0, #4]
   d5fe2:	f7fe bce1 	b.w	d49a8 <network_set_listen_timeout>

000d5fe6 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fe6:	2200      	movs	r2, #0
   d5fe8:	f081 0101 	eor.w	r1, r1, #1
   d5fec:	6840      	ldr	r0, [r0, #4]
   d5fee:	f7fe bccb 	b.w	d4988 <network_listen>

000d5ff2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ff2:	2300      	movs	r3, #0
   d5ff4:	461a      	mov	r2, r3
   d5ff6:	4619      	mov	r1, r3
   d5ff8:	6840      	ldr	r0, [r0, #4]
   d5ffa:	f7fe bcbd 	b.w	d4978 <network_off>

000d5ffe <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ffe:	2300      	movs	r3, #0
   d6000:	461a      	mov	r2, r3
   d6002:	4619      	mov	r1, r3
   d6004:	6840      	ldr	r0, [r0, #4]
   d6006:	f7fe bcaf 	b.w	d4968 <network_on>

000d600a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d600a:	2200      	movs	r2, #0
   d600c:	4611      	mov	r1, r2
   d600e:	6840      	ldr	r0, [r0, #4]
   d6010:	f7fe bca2 	b.w	d4958 <network_ready>

000d6014 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6014:	2200      	movs	r2, #0
   d6016:	4611      	mov	r1, r2
   d6018:	6840      	ldr	r0, [r0, #4]
   d601a:	f7fe bc8d 	b.w	d4938 <network_connecting>

000d601e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d601e:	2200      	movs	r2, #0
   d6020:	2102      	movs	r1, #2
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	f7fe bc90 	b.w	d4948 <network_disconnect>

000d6028 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6028:	2300      	movs	r3, #0
   d602a:	461a      	mov	r2, r3
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	f7fe bc7b 	b.w	d4928 <network_connect>
	...

000d6034 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6034:	4b02      	ldr	r3, [pc, #8]	; (d6040 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6036:	2203      	movs	r2, #3
   d6038:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d603a:	4a02      	ldr	r2, [pc, #8]	; (d6044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d603c:	601a      	str	r2, [r3, #0]
   d603e:	4770      	bx	lr
   d6040:	2003e398 	.word	0x2003e398
   d6044:	000d8688 	.word	0x000d8688

000d6048 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6048:	4770      	bx	lr

000d604a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d604a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d604c:	4606      	mov	r6, r0
   d604e:	4615      	mov	r5, r2
   d6050:	460c      	mov	r4, r1
   d6052:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6054:	42bc      	cmp	r4, r7
   d6056:	d006      	beq.n	d6066 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6058:	6833      	ldr	r3, [r6, #0]
   d605a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d605e:	689b      	ldr	r3, [r3, #8]
   d6060:	4630      	mov	r0, r6
   d6062:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6064:	e7f6      	b.n	d6054 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6066:	4628      	mov	r0, r5
   d6068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d606a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d606a:	2200      	movs	r2, #0
   d606c:	7c00      	ldrb	r0, [r0, #16]
   d606e:	f7fe bb17 	b.w	d46a0 <HAL_I2C_Write_Data>

000d6072 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6072:	2100      	movs	r1, #0
   d6074:	7c00      	ldrb	r0, [r0, #16]
   d6076:	f7fe bb1b 	b.w	d46b0 <HAL_I2C_Available_Data>

000d607a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d607a:	2100      	movs	r1, #0
   d607c:	7c00      	ldrb	r0, [r0, #16]
   d607e:	f7fe bb1f 	b.w	d46c0 <HAL_I2C_Read_Data>

000d6082 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6082:	2100      	movs	r1, #0
   d6084:	7c00      	ldrb	r0, [r0, #16]
   d6086:	f7fe bb23 	b.w	d46d0 <HAL_I2C_Peek_Data>

000d608a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d608a:	2100      	movs	r1, #0
   d608c:	7c00      	ldrb	r0, [r0, #16]
   d608e:	f7fe bb27 	b.w	d46e0 <HAL_I2C_Flush_Data>

000d6092 <_ZN7TwoWireD0Ev>:
   d6092:	b510      	push	{r4, lr}
   d6094:	2114      	movs	r1, #20
   d6096:	4604      	mov	r4, r0
   d6098:	f001 ff39 	bl	d7f0e <_ZdlPvj>
   d609c:	4620      	mov	r0, r4
   d609e:	bd10      	pop	{r4, pc}

000d60a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60a0:	b510      	push	{r4, lr}
   d60a2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d60a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d60a8:	4608      	mov	r0, r1
   d60aa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d60ac:	2100      	movs	r1, #0
   d60ae:	4b04      	ldr	r3, [pc, #16]	; (d60c0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d60b0:	7420      	strb	r0, [r4, #16]
   d60b2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d60b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d60b6:	f7fe fb23 	bl	d4700 <HAL_I2C_Init>

}
   d60ba:	4620      	mov	r0, r4
   d60bc:	bd10      	pop	{r4, pc}
   d60be:	bf00      	nop
   d60c0:	000d86bc 	.word	0x000d86bc

000d60c4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d60c4:	2100      	movs	r1, #0
   d60c6:	7c00      	ldrb	r0, [r0, #16]
   d60c8:	f7fe bb12 	b.w	d46f0 <HAL_I2C_Is_Enabled>

000d60cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60cc:	4770      	bx	lr

000d60ce <_ZN9IPAddressD0Ev>:
   d60ce:	b510      	push	{r4, lr}
   d60d0:	2118      	movs	r1, #24
   d60d2:	4604      	mov	r4, r0
   d60d4:	f001 ff1b 	bl	d7f0e <_ZdlPvj>
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}

000d60dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60de:	7d03      	ldrb	r3, [r0, #20]
   d60e0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60e2:	b08d      	sub	sp, #52	; 0x34
   d60e4:	460e      	mov	r6, r1
   d60e6:	f100 0704 	add.w	r7, r0, #4
   d60ea:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60ee:	d002      	beq.n	d60f6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d60f0:	f100 0508 	add.w	r5, r0, #8
   d60f4:	e018      	b.n	d6128 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60f6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60f8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d60fa:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60fe:	232f      	movs	r3, #47	; 0x2f
   d6100:	462a      	mov	r2, r5
   d6102:	200a      	movs	r0, #10
   d6104:	f7fe fb04 	bl	d4710 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6108:	4628      	mov	r0, r5
   d610a:	f002 f8f9 	bl	d8300 <strlen>
   d610e:	6833      	ldr	r3, [r6, #0]
   d6110:	4602      	mov	r2, r0
   d6112:	68db      	ldr	r3, [r3, #12]
   d6114:	4629      	mov	r1, r5
   d6116:	4630      	mov	r0, r6
   d6118:	4798      	blx	r3
   d611a:	e00f      	b.n	d613c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d611c:	b124      	cbz	r4, d6128 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d611e:	212e      	movs	r1, #46	; 0x2e
   d6120:	4630      	mov	r0, r6
   d6122:	f001 fb49 	bl	d77b8 <_ZN5Print5printEc>
   d6126:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6128:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d612c:	220a      	movs	r2, #10
   d612e:	4630      	mov	r0, r6
   d6130:	f001 fb7e 	bl	d7830 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6134:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6136:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6138:	d1f0      	bne.n	d611c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d613a:	4620      	mov	r0, r4
    }
    return n;
}
   d613c:	b00d      	add	sp, #52	; 0x34
   d613e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6140 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6140:	b510      	push	{r4, lr}
   d6142:	4b05      	ldr	r3, [pc, #20]	; (d6158 <_ZN9IPAddressC1Ev+0x18>)
   d6144:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6146:	2211      	movs	r2, #17
   d6148:	f840 3b04 	str.w	r3, [r0], #4
   d614c:	2100      	movs	r1, #0
   d614e:	f002 f884 	bl	d825a <memset>
{
    clear();
}
   d6152:	4620      	mov	r0, r4
   d6154:	bd10      	pop	{r4, pc}
   d6156:	bf00      	nop
   d6158:	000d86e4 	.word	0x000d86e4

000d615c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d615c:	4603      	mov	r3, r0
   d615e:	4a07      	ldr	r2, [pc, #28]	; (d617c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6160:	b510      	push	{r4, lr}
   d6162:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6166:	f101 0210 	add.w	r2, r1, #16
   d616a:	f851 4b04 	ldr.w	r4, [r1], #4
   d616e:	f843 4b04 	str.w	r4, [r3], #4
   d6172:	4291      	cmp	r1, r2
   d6174:	d1f9      	bne.n	d616a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6176:	780a      	ldrb	r2, [r1, #0]
   d6178:	701a      	strb	r2, [r3, #0]
}
   d617a:	bd10      	pop	{r4, pc}
   d617c:	000d86e4 	.word	0x000d86e4

000d6180 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6180:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6182:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6186:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d618a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d618e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6192:	2304      	movs	r3, #4
   d6194:	6041      	str	r1, [r0, #4]
   d6196:	7503      	strb	r3, [r0, #20]
   d6198:	bd10      	pop	{r4, pc}

000d619a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d619a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d619c:	780d      	ldrb	r5, [r1, #0]
   d619e:	788b      	ldrb	r3, [r1, #2]
   d61a0:	784a      	ldrb	r2, [r1, #1]
   d61a2:	78c9      	ldrb	r1, [r1, #3]
   d61a4:	9100      	str	r1, [sp, #0]
   d61a6:	4629      	mov	r1, r5
   d61a8:	f7ff ffea 	bl	d6180 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d61ac:	b003      	add	sp, #12
   d61ae:	bd30      	pop	{r4, r5, pc}

000d61b0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d61b0:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d61b4:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d61b6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d61ba:	2901      	cmp	r1, #1
   d61bc:	4610      	mov	r0, r2
   d61be:	d104      	bne.n	d61ca <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d61c0:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d61c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d61c8:	e004      	b.n	d61d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d61ca:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d61cc:	bf04      	itt	eq
   d61ce:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d61d2:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d61d4:	3b01      	subs	r3, #1
   d61d6:	f102 0210 	add.w	r2, r2, #16
   d61da:	d1ec      	bne.n	d61b6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d61dc:	4770      	bx	lr

000d61de <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d61de:	b40e      	push	{r1, r2, r3}
   d61e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61e4:	b087      	sub	sp, #28
   d61e6:	af00      	add	r7, sp, #0
   d61e8:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d61ec:	4605      	mov	r5, r0
   d61ee:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d61f2:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d61f4:	4623      	mov	r3, r4
   d61f6:	4632      	mov	r2, r6
   d61f8:	2110      	movs	r1, #16
   d61fa:	f107 0008 	add.w	r0, r7, #8
   d61fe:	f7fe fbfb 	bl	d49f8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6202:	280f      	cmp	r0, #15
   d6204:	d916      	bls.n	d6234 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d6206:	f100 0308 	add.w	r3, r0, #8
   d620a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d620e:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d6210:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6214:	4632      	mov	r2, r6
   d6216:	1c41      	adds	r1, r0, #1
   d6218:	4623      	mov	r3, r4
   d621a:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d621c:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d621e:	f7fe fbeb 	bl	d49f8 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d6222:	1e02      	subs	r2, r0, #0
   d6224:	dd04      	ble.n	d6230 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d6226:	682b      	ldr	r3, [r5, #0]
   d6228:	4669      	mov	r1, sp
   d622a:	689b      	ldr	r3, [r3, #8]
   d622c:	4628      	mov	r0, r5
   d622e:	4798      	blx	r3
   d6230:	46c5      	mov	sp, r8
   d6232:	e007      	b.n	d6244 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6234:	b130      	cbz	r0, d6244 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d6236:	682b      	ldr	r3, [r5, #0]
   d6238:	4602      	mov	r2, r0
   d623a:	689b      	ldr	r3, [r3, #8]
   d623c:	f107 0108 	add.w	r1, r7, #8
   d6240:	4628      	mov	r0, r5
   d6242:	4798      	blx	r3
    }
}
   d6244:	371c      	adds	r7, #28
   d6246:	46bd      	mov	sp, r7
   d6248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d624c:	b003      	add	sp, #12
   d624e:	4770      	bx	lr

000d6250 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6250:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6252:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6254:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6256:	689b      	ldr	r3, [r3, #8]
   d6258:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d625a:	68a3      	ldr	r3, [r4, #8]
   d625c:	3b01      	subs	r3, #1
   d625e:	60a3      	str	r3, [r4, #8]
   d6260:	b92b      	cbnz	r3, d626e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
   d6262:	6823      	ldr	r3, [r4, #0]
   d6264:	4620      	mov	r0, r4
   d6266:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d626c:	4718      	bx	r3
   d626e:	bd10      	pop	{r4, pc}

000d6270 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6270:	b513      	push	{r0, r1, r4, lr}
   d6272:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6274:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6276:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d627a:	6894      	ldr	r4, [r2, #8]
   d627c:	4619      	mov	r1, r3
   d627e:	2201      	movs	r2, #1
   d6280:	47a0      	blx	r4
}
   d6282:	b002      	add	sp, #8
   d6284:	bd10      	pop	{r4, pc}

000d6286 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6286:	6883      	ldr	r3, [r0, #8]
   d6288:	b1fb      	cbz	r3, d62ca <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d628a:	781a      	ldrb	r2, [r3, #0]
   d628c:	2a03      	cmp	r2, #3
   d628e:	d81a      	bhi.n	d62c6 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6290:	e8df f002 	tbb	[pc, r2]
   d6294:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d6298:	2005      	movs	r0, #5
   d629a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d629c:	6802      	ldr	r2, [r0, #0]
   d629e:	685b      	ldr	r3, [r3, #4]
   d62a0:	6852      	ldr	r2, [r2, #4]
   d62a2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d62a4:	282d      	cmp	r0, #45	; 0x2d
   d62a6:	d014      	beq.n	d62d2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d62a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d62ac:	2b09      	cmp	r3, #9
   d62ae:	d910      	bls.n	d62d2 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d62b0:	2874      	cmp	r0, #116	; 0x74
   d62b2:	d010      	beq.n	d62d6 <_ZNK5spark9JSONValue4typeEv+0x50>
   d62b4:	2866      	cmp	r0, #102	; 0x66
   d62b6:	d00e      	beq.n	d62d6 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d62b8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d62bc:	4258      	negs	r0, r3
   d62be:	4158      	adcs	r0, r3
   d62c0:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d62c2:	2006      	movs	r0, #6
   d62c4:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d62c6:	2000      	movs	r0, #0
   d62c8:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d62ca:	4618      	mov	r0, r3
   d62cc:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d62ce:	2004      	movs	r0, #4
   d62d0:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d62d2:	2003      	movs	r0, #3
   d62d4:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d62d6:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d62d8:	4770      	bx	lr

000d62da <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d62da:	b510      	push	{r4, lr}
   d62dc:	4604      	mov	r4, r0
    switch (type()) {
   d62de:	f7ff ffd2 	bl	d6286 <_ZNK5spark9JSONValue4typeEv>
   d62e2:	2802      	cmp	r0, #2
   d62e4:	d00d      	beq.n	d6302 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d62e6:	d316      	bcc.n	d6316 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d62e8:	2804      	cmp	r0, #4
   d62ea:	d814      	bhi.n	d6316 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d62ec:	6822      	ldr	r2, [r4, #0]
   d62ee:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d62f0:	6850      	ldr	r0, [r2, #4]
   d62f2:	685b      	ldr	r3, [r3, #4]
   d62f4:	220a      	movs	r2, #10
   d62f6:	2100      	movs	r1, #0
   d62f8:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d62fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d62fe:	f002 b8b5 	b.w	d846c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d6302:	6822      	ldr	r2, [r4, #0]
   d6304:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6306:	6852      	ldr	r2, [r2, #4]
   d6308:	685b      	ldr	r3, [r3, #4]
   d630a:	5cd0      	ldrb	r0, [r2, r3]
   d630c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6310:	4258      	negs	r0, r3
   d6312:	4158      	adcs	r0, r3
   d6314:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6316:	2000      	movs	r0, #0
    }
}
   d6318:	bd10      	pop	{r4, pc}

000d631a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d631a:	b510      	push	{r4, lr}
    if (!n_) {
   d631c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d631e:	4604      	mov	r4, r0
    if (!n_) {
   d6320:	b15b      	cbz	r3, d633a <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d6322:	6880      	ldr	r0, [r0, #8]
   d6324:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6326:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6328:	3010      	adds	r0, #16
   d632a:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d632c:	6120      	str	r0, [r4, #16]
    --n_;
   d632e:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6330:	b12b      	cbz	r3, d633e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d6332:	f7ff ff3d 	bl	d61b0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6336:	60a0      	str	r0, [r4, #8]
   d6338:	e001      	b.n	d633e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d633a:	4618      	mov	r0, r3
   d633c:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d633e:	2001      	movs	r0, #1
}
   d6340:	bd10      	pop	{r4, pc}

000d6342 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6342:	b510      	push	{r4, lr}
    write('}');
   d6344:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6346:	4604      	mov	r4, r0
    write('}');
   d6348:	f7ff ff92 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d634c:	2301      	movs	r3, #1
   d634e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6350:	4620      	mov	r0, r4
   d6352:	bd10      	pop	{r4, pc}

000d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6354:	b508      	push	{r3, lr}
    switch (state_) {
   d6356:	7903      	ldrb	r3, [r0, #4]
   d6358:	2b01      	cmp	r3, #1
   d635a:	d002      	beq.n	d6362 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d635c:	2b02      	cmp	r3, #2
   d635e:	d002      	beq.n	d6366 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d6360:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d6362:	212c      	movs	r1, #44	; 0x2c
   d6364:	e000      	b.n	d6368 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6366:	213a      	movs	r1, #58	; 0x3a
   d6368:	f7ff ff82 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
   d636c:	bd08      	pop	{r3, pc}

000d636e <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d636e:	b510      	push	{r4, lr}
   d6370:	4604      	mov	r4, r0
    writeSeparator();
   d6372:	f7ff ffef 	bl	d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6376:	4620      	mov	r0, r4
   d6378:	217b      	movs	r1, #123	; 0x7b
   d637a:	f7ff ff79 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d637e:	2300      	movs	r3, #0
   d6380:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6382:	4620      	mov	r0, r4
   d6384:	bd10      	pop	{r4, pc}
	...

000d6388 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6388:	b538      	push	{r3, r4, r5, lr}
   d638a:	4604      	mov	r4, r0
   d638c:	460d      	mov	r5, r1
    writeSeparator();
   d638e:	f7ff ffe1 	bl	d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6392:	6823      	ldr	r3, [r4, #0]
   d6394:	4904      	ldr	r1, [pc, #16]	; (d63a8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6396:	68db      	ldr	r3, [r3, #12]
   d6398:	4620      	mov	r0, r4
   d639a:	462a      	mov	r2, r5
   d639c:	4798      	blx	r3
    state_ = NEXT;
   d639e:	2301      	movs	r3, #1
   d63a0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d63a2:	4620      	mov	r0, r4
   d63a4:	bd38      	pop	{r3, r4, r5, pc}
   d63a6:	bf00      	nop
   d63a8:	000d8662 	.word	0x000d8662

000d63ac <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d63ac:	b538      	push	{r3, r4, r5, lr}
   d63ae:	4604      	mov	r4, r0
   d63b0:	460d      	mov	r5, r1
    writeSeparator();
   d63b2:	f7ff ffcf 	bl	d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d63b6:	6823      	ldr	r3, [r4, #0]
   d63b8:	4904      	ldr	r1, [pc, #16]	; (d63cc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d63ba:	68db      	ldr	r3, [r3, #12]
   d63bc:	4620      	mov	r0, r4
   d63be:	462a      	mov	r2, r5
   d63c0:	4798      	blx	r3
    state_ = NEXT;
   d63c2:	2301      	movs	r3, #1
   d63c4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d63c6:	4620      	mov	r0, r4
   d63c8:	bd38      	pop	{r3, r4, r5, pc}
   d63ca:	bf00      	nop
   d63cc:	000d86ff 	.word	0x000d86ff

000d63d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d63d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63d2:	460d      	mov	r5, r1
   d63d4:	4617      	mov	r7, r2
    write('"');
   d63d6:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d63d8:	4604      	mov	r4, r0
   d63da:	442f      	add	r7, r5
    write('"');
   d63dc:	f7ff ff48 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
   d63e0:	462a      	mov	r2, r5
    const char* const end = str + size;
   d63e2:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d63e4:	42ba      	cmp	r2, r7
   d63e6:	d038      	beq.n	d645a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d63e8:	4616      	mov	r6, r2
   d63ea:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d63ee:	2d22      	cmp	r5, #34	; 0x22
   d63f0:	d003      	beq.n	d63fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d63f2:	2d5c      	cmp	r5, #92	; 0x5c
   d63f4:	d001      	beq.n	d63fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d63f6:	2d1f      	cmp	r5, #31
   d63f8:	d82d      	bhi.n	d6456 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d63fa:	6823      	ldr	r3, [r4, #0]
   d63fc:	1a52      	subs	r2, r2, r1
   d63fe:	689b      	ldr	r3, [r3, #8]
   d6400:	4620      	mov	r0, r4
   d6402:	4798      	blx	r3
            write('\\');
   d6404:	215c      	movs	r1, #92	; 0x5c
   d6406:	4620      	mov	r0, r4
   d6408:	f7ff ff32 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d640c:	2d0c      	cmp	r5, #12
   d640e:	d019      	beq.n	d6444 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d6410:	d807      	bhi.n	d6422 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d6412:	2d09      	cmp	r5, #9
   d6414:	d00f      	beq.n	d6436 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d6416:	2d0a      	cmp	r5, #10
   d6418:	d012      	beq.n	d6440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d641a:	2d08      	cmp	r5, #8
   d641c:	d114      	bne.n	d6448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d641e:	2162      	movs	r1, #98	; 0x62
   d6420:	e00a      	b.n	d6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d6422:	2d22      	cmp	r5, #34	; 0x22
   d6424:	d005      	beq.n	d6432 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6426:	2d5c      	cmp	r5, #92	; 0x5c
   d6428:	d003      	beq.n	d6432 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d642a:	2d0d      	cmp	r5, #13
   d642c:	d10c      	bne.n	d6448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d642e:	2172      	movs	r1, #114	; 0x72
   d6430:	e002      	b.n	d6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d6432:	4629      	mov	r1, r5
   d6434:	e000      	b.n	d6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d6436:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6438:	4620      	mov	r0, r4
   d643a:	f7ff ff19 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
                break;
   d643e:	e009      	b.n	d6454 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d6440:	216e      	movs	r1, #110	; 0x6e
   d6442:	e7f9      	b.n	d6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6444:	2166      	movs	r1, #102	; 0x66
   d6446:	e7f7      	b.n	d6438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6448:	6823      	ldr	r3, [r4, #0]
   d644a:	490a      	ldr	r1, [pc, #40]	; (d6474 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d644c:	68db      	ldr	r3, [r3, #12]
   d644e:	462a      	mov	r2, r5
   d6450:	4620      	mov	r0, r4
   d6452:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6454:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d6456:	4632      	mov	r2, r6
   d6458:	e7c4      	b.n	d63e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d645a:	4291      	cmp	r1, r2
   d645c:	d004      	beq.n	d6468 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d645e:	6823      	ldr	r3, [r4, #0]
   d6460:	1a52      	subs	r2, r2, r1
   d6462:	689d      	ldr	r5, [r3, #8]
   d6464:	4620      	mov	r0, r4
   d6466:	47a8      	blx	r5
    }
    write('"');
   d6468:	2122      	movs	r1, #34	; 0x22
   d646a:	4620      	mov	r0, r4
   d646c:	f7ff ff00 	bl	d6270 <_ZN5spark10JSONWriter5writeEc>
   d6470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6472:	bf00      	nop
   d6474:	000d870a 	.word	0x000d870a

000d6478 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6478:	b570      	push	{r4, r5, r6, lr}
   d647a:	4604      	mov	r4, r0
   d647c:	460d      	mov	r5, r1
   d647e:	4616      	mov	r6, r2
    writeSeparator();
   d6480:	f7ff ff68 	bl	d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6484:	4620      	mov	r0, r4
   d6486:	4632      	mov	r2, r6
   d6488:	4629      	mov	r1, r5
   d648a:	f7ff ffa1 	bl	d63d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d648e:	2302      	movs	r3, #2
   d6490:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6492:	4620      	mov	r0, r4
   d6494:	bd70      	pop	{r4, r5, r6, pc}

000d6496 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6496:	b570      	push	{r4, r5, r6, lr}
   d6498:	4604      	mov	r4, r0
   d649a:	460d      	mov	r5, r1
   d649c:	4616      	mov	r6, r2
    writeSeparator();
   d649e:	f7ff ff59 	bl	d6354 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d64a2:	4620      	mov	r0, r4
   d64a4:	4632      	mov	r2, r6
   d64a6:	4629      	mov	r1, r5
   d64a8:	f7ff ff92 	bl	d63d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d64ac:	2301      	movs	r3, #1
   d64ae:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d64b0:	4620      	mov	r0, r4
   d64b2:	bd70      	pop	{r4, r5, r6, pc}

000d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d64b4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d64b6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d64b8:	6803      	ldr	r3, [r0, #0]
   d64ba:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d64bc:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d64be:	d00c      	beq.n	d64da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d64c0:	b114      	cbz	r4, d64c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d64c2:	6863      	ldr	r3, [r4, #4]
   d64c4:	3301      	adds	r3, #1
   d64c6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d64c8:	6828      	ldr	r0, [r5, #0]
   d64ca:	b128      	cbz	r0, d64d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d64cc:	6843      	ldr	r3, [r0, #4]
   d64ce:	3b01      	subs	r3, #1
   d64d0:	6043      	str	r3, [r0, #4]
   d64d2:	b90b      	cbnz	r3, d64d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d64d4:	f7ff febc 	bl	d6250 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d64d8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d64da:	4628      	mov	r0, r5
   d64dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d64e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d64e0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d64e2:	2300      	movs	r3, #0
   d64e4:	4604      	mov	r4, r0
   d64e6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d64e8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d64ea:	4810      	ldr	r0, [pc, #64]	; (d652c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d64ec:	60a0      	str	r0, [r4, #8]
   d64ee:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d64f0:	b1d1      	cbz	r1, d6528 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d64f2:	780b      	ldrb	r3, [r1, #0]
   d64f4:	2b03      	cmp	r3, #3
   d64f6:	d006      	beq.n	d6506 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d64f8:	b9b3      	cbnz	r3, d6528 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d64fa:	6813      	ldr	r3, [r2, #0]
   d64fc:	6858      	ldr	r0, [r3, #4]
   d64fe:	684b      	ldr	r3, [r1, #4]
   d6500:	5cc3      	ldrb	r3, [r0, r3]
   d6502:	2b6e      	cmp	r3, #110	; 0x6e
   d6504:	d008      	beq.n	d6518 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d6506:	6813      	ldr	r3, [r2, #0]
   d6508:	6858      	ldr	r0, [r3, #4]
   d650a:	684b      	ldr	r3, [r1, #4]
   d650c:	4403      	add	r3, r0
   d650e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d6510:	688b      	ldr	r3, [r1, #8]
   d6512:	6849      	ldr	r1, [r1, #4]
   d6514:	1a5b      	subs	r3, r3, r1
   d6516:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6518:	4611      	mov	r1, r2
   d651a:	4620      	mov	r0, r4
   d651c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6520:	f840 3b04 	str.w	r3, [r0], #4
   d6524:	f7ff ffc6 	bl	d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d6528:	4620      	mov	r0, r4
   d652a:	bd10      	pop	{r4, pc}
   d652c:	000d876e 	.word	0x000d876e

000d6530 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6530:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6532:	b510      	push	{r4, lr}
   d6534:	4604      	mov	r4, r0
   d6536:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6538:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d653a:	6083      	str	r3, [r0, #8]
   d653c:	60c3      	str	r3, [r0, #12]
   d653e:	6103      	str	r3, [r0, #16]
   d6540:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d6542:	b171      	cbz	r1, d6562 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d6544:	780b      	ldrb	r3, [r1, #0]
   d6546:	2b01      	cmp	r3, #1
   d6548:	d10b      	bne.n	d6562 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d654a:	f101 0310 	add.w	r3, r1, #16
   d654e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6550:	68cb      	ldr	r3, [r1, #12]
   d6552:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6554:	4611      	mov	r1, r2
   d6556:	f851 3b04 	ldr.w	r3, [r1], #4
   d655a:	f840 3b04 	str.w	r3, [r0], #4
   d655e:	f7ff ffa9 	bl	d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d6562:	4620      	mov	r0, r4
   d6564:	bd10      	pop	{r4, pc}

000d6566 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6566:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6568:	b510      	push	{r4, lr}
   d656a:	4604      	mov	r4, r0
   d656c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d656e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6570:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d6572:	b131      	cbz	r1, d6582 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6574:	4611      	mov	r1, r2
   d6576:	f851 3b04 	ldr.w	r3, [r1], #4
   d657a:	f840 3b04 	str.w	r3, [r0], #4
   d657e:	f7ff ff99 	bl	d64b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d6582:	4620      	mov	r0, r4
   d6584:	bd10      	pop	{r4, pc}

000d6586 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6586:	6880      	ldr	r0, [r0, #8]
   d6588:	6803      	ldr	r3, [r0, #0]
   d658a:	68db      	ldr	r3, [r3, #12]
   d658c:	4718      	bx	r3

000d658e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d658e:	4770      	bx	lr

000d6590 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6590:	b119      	cbz	r1, d659a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6592:	680b      	ldr	r3, [r1, #0]
   d6594:	4608      	mov	r0, r1
   d6596:	685b      	ldr	r3, [r3, #4]
   d6598:	4718      	bx	r3
   d659a:	4770      	bx	lr

000d659c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d659c:	b119      	cbz	r1, d65a6 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d659e:	680b      	ldr	r3, [r1, #0]
   d65a0:	4608      	mov	r0, r1
   d65a2:	685b      	ldr	r3, [r3, #4]
   d65a4:	4718      	bx	r3
   d65a6:	4770      	bx	lr

000d65a8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d65a8:	4770      	bx	lr

000d65aa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d65aa:	4770      	bx	lr

000d65ac <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d65ac:	4770      	bx	lr

000d65ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d65ae:	b538      	push	{r3, r4, r5, lr}
   d65b0:	4604      	mov	r4, r0
   d65b2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d65b4:	6800      	ldr	r0, [r0, #0]
   d65b6:	212e      	movs	r1, #46	; 0x2e
   d65b8:	f001 fe8e 	bl	d82d8 <strchrnul>
    size = s - category;
   d65bc:	6823      	ldr	r3, [r4, #0]
   d65be:	1ac3      	subs	r3, r0, r3
   d65c0:	602b      	str	r3, [r5, #0]
    if (size) {
   d65c2:	b123      	cbz	r3, d65ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d65c4:	7803      	ldrb	r3, [r0, #0]
   d65c6:	b103      	cbz	r3, d65ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d65c8:	3001      	adds	r0, #1
   d65ca:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d65cc:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d65ce:	4618      	mov	r0, r3
}
   d65d0:	bd38      	pop	{r3, r4, r5, pc}

000d65d2 <_ZN5spark16JSONStreamWriterD0Ev>:
   d65d2:	b510      	push	{r4, lr}
   d65d4:	210c      	movs	r1, #12
   d65d6:	4604      	mov	r4, r0
   d65d8:	f001 fc99 	bl	d7f0e <_ZdlPvj>
   d65dc:	4620      	mov	r0, r4
   d65de:	bd10      	pop	{r4, pc}

000d65e0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d65e0:	b510      	push	{r4, lr}
   d65e2:	2104      	movs	r1, #4
   d65e4:	4604      	mov	r4, r0
   d65e6:	f001 fc92 	bl	d7f0e <_ZdlPvj>
   d65ea:	4620      	mov	r0, r4
   d65ec:	bd10      	pop	{r4, pc}

000d65ee <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d65ee:	b510      	push	{r4, lr}
   d65f0:	2104      	movs	r1, #4
   d65f2:	4604      	mov	r4, r0
   d65f4:	f001 fc8b 	bl	d7f0e <_ZdlPvj>
   d65f8:	4620      	mov	r0, r4
   d65fa:	bd10      	pop	{r4, pc}

000d65fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d65fc:	b538      	push	{r3, r4, r5, lr}
   d65fe:	460c      	mov	r4, r1
   d6600:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6602:	f001 fb21 	bl	d7c48 <_Z16_fetch_usbserialv>
   d6606:	4284      	cmp	r4, r0
   d6608:	d105      	bne.n	d6616 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x1a>
        Serial.end();
   d660a:	f001 fb1d 	bl	d7c48 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d660e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
#if PLATFORM_ID != 3
    if (stream == &Serial) {
        Serial.end();
   d6612:	f001 bb0d 	b.w	d7c30 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6616:	f001 fa8b 	bl	d7b30 <_Z22__fetch_global_Serial1v>
   d661a:	4284      	cmp	r4, r0
   d661c:	d105      	bne.n	d662a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
        Serial1.end();
   d661e:	f001 fa87 	bl	d7b30 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d6626:	f001 ba7c 	b.w	d7b22 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d662a:	4621      	mov	r1, r4
   d662c:	4628      	mov	r0, r5
   d662e:	f7ff ffb5 	bl	d659c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d6632:	bd38      	pop	{r3, r4, r5, pc}

000d6634 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d6634:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6636:	f001 fe59 	bl	d82ec <strcmp>
}
   d663a:	fab0 f080 	clz	r0, r0
   d663e:	0940      	lsrs	r0, r0, #5
   d6640:	bd08      	pop	{r3, pc}

000d6642 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6642:	b538      	push	{r3, r4, r5, lr}
   d6644:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6646:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6648:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d664a:	f001 fe59 	bl	d8300 <strlen>
   d664e:	4621      	mov	r1, r4
   d6650:	4602      	mov	r2, r0
   d6652:	4628      	mov	r0, r5
}
   d6654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6658:	f7ff bf1d 	b.w	d6496 <_ZN5spark10JSONWriter5valueEPKcj>

000d665c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d665c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6660:	b085      	sub	sp, #20
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6662:	f04f 0800 	mov.w	r8, #0
   d6666:	4691      	mov	r9, r2
   d6668:	4607      	mov	r7, r0
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d666a:	4a48      	ldr	r2, [pc, #288]	; (d678c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x130>)
   d666c:	9201      	str	r2, [sp, #4]
   d666e:	461d      	mov	r5, r3
   d6670:	6a03      	ldr	r3, [r0, #32]
   d6672:	9303      	str	r3, [sp, #12]
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d6674:	a801      	add	r0, sp, #4
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6676:	460e      	mov	r6, r1
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6678:	f88d 8008 	strb.w	r8, [sp, #8]
   d667c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d667e:	f7ff fe76 	bl	d636e <_ZN5spark10JSONWriter11beginObjectEv>
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6682:	4641      	mov	r1, r8
   d6684:	4648      	mov	r0, r9
   d6686:	f7fe f913 	bl	d48b0 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d668a:	4941      	ldr	r1, [pc, #260]	; (d6790 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>)
   d668c:	4680      	mov	r8, r0
   d668e:	2201      	movs	r2, #1
   d6690:	a801      	add	r0, sp, #4
   d6692:	f7ff fef1 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d6696:	4641      	mov	r1, r8
   d6698:	f7ff ffd3 	bl	d6642 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d669c:	b13e      	cbz	r6, d66ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x52>
        json.name("m", 1).value(msg);
   d669e:	493d      	ldr	r1, [pc, #244]	; (d6794 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x138>)
   d66a0:	2201      	movs	r2, #1
   d66a2:	a801      	add	r0, sp, #4
   d66a4:	f7ff fee8 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d66a8:	4631      	mov	r1, r6
   d66aa:	f7ff ffca 	bl	d6642 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d66ae:	b13d      	cbz	r5, d66c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        json.name("c", 1).value(category);
   d66b0:	4939      	ldr	r1, [pc, #228]	; (d6798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>)
   d66b2:	2201      	movs	r2, #1
   d66b4:	a801      	add	r0, sp, #4
   d66b6:	f7ff fedf 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d66ba:	4629      	mov	r1, r5
   d66bc:	f7ff ffc1 	bl	d6642 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d66c0:	7923      	ldrb	r3, [r4, #4]
   d66c2:	07de      	lsls	r6, r3, #31
   d66c4:	d50e      	bpl.n	d66e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x88>
        s = extractFileName(attr.file); // Strip directory path
   d66c6:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d66c8:	212f      	movs	r1, #47	; 0x2f
   d66ca:	4628      	mov	r0, r5
   d66cc:	f001 fe35 	bl	d833a <strrchr>
    if (s1) {
   d66d0:	b100      	cbz	r0, d66d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x78>
        return s1 + 1;
   d66d2:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d66d4:	4931      	ldr	r1, [pc, #196]	; (d679c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>)
   d66d6:	2201      	movs	r2, #1
   d66d8:	a801      	add	r0, sp, #4
   d66da:	f7ff fecd 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d66de:	4629      	mov	r1, r5
   d66e0:	f7ff ffaf 	bl	d6642 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d66e4:	7923      	ldrb	r3, [r4, #4]
   d66e6:	079d      	lsls	r5, r3, #30
   d66e8:	d507      	bpl.n	d66fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
        json.name("ln", 2).value(attr.line);
   d66ea:	492d      	ldr	r1, [pc, #180]	; (d67a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d66ec:	2202      	movs	r2, #2
   d66ee:	a801      	add	r0, sp, #4
   d66f0:	f7ff fec2 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d66f4:	68e1      	ldr	r1, [r4, #12]
   d66f6:	f7ff fe47 	bl	d6388 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d66fa:	7923      	ldrb	r3, [r4, #4]
   d66fc:	0758      	lsls	r0, r3, #29
   d66fe:	d516      	bpl.n	d672e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6700:	6925      	ldr	r5, [r4, #16]
   d6702:	462e      	mov	r6, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6704:	4633      	mov	r3, r6
   d6706:	f813 2b01 	ldrb.w	r2, [r3], #1
   d670a:	b13a      	cbz	r2, d671c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        if (*s == ' ') {
   d670c:	2a20      	cmp	r2, #32
   d670e:	d101      	bne.n	d6714 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
            s1 = s + 1; // Skip return type
   d6710:	461d      	mov	r5, r3
   d6712:	e001      	b.n	d6718 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xbc>
        } else if (*s == '(') {
   d6714:	2a28      	cmp	r2, #40	; 0x28
   d6716:	d001      	beq.n	d671c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6718:	461e      	mov	r6, r3
   d671a:	e7f3      	b.n	d6704 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d671c:	2202      	movs	r2, #2
   d671e:	4921      	ldr	r1, [pc, #132]	; (d67a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6720:	a801      	add	r0, sp, #4
   d6722:	f7ff fea9 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d6726:	1b72      	subs	r2, r6, r5
   d6728:	4629      	mov	r1, r5
   d672a:	f7ff feb4 	bl	d6496 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d672e:	7923      	ldrb	r3, [r4, #4]
   d6730:	0719      	lsls	r1, r3, #28
   d6732:	d507      	bpl.n	d6744 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        json.name("t", 1).value((unsigned)attr.time);
   d6734:	491c      	ldr	r1, [pc, #112]	; (d67a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6736:	2201      	movs	r2, #1
   d6738:	a801      	add	r0, sp, #4
   d673a:	f7ff fe9d 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d673e:	6961      	ldr	r1, [r4, #20]
   d6740:	f7ff fe34 	bl	d63ac <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6744:	7923      	ldrb	r3, [r4, #4]
   d6746:	06da      	lsls	r2, r3, #27
   d6748:	d508      	bpl.n	d675c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("code", 4).value((int)attr.code);
   d674a:	2204      	movs	r2, #4
   d674c:	4917      	ldr	r1, [pc, #92]	; (d67ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d674e:	eb0d 0002 	add.w	r0, sp, r2
   d6752:	f7ff fe91 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d6756:	69a1      	ldr	r1, [r4, #24]
   d6758:	f7ff fe16 	bl	d6388 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d675c:	7923      	ldrb	r3, [r4, #4]
   d675e:	069b      	lsls	r3, r3, #26
   d6760:	d507      	bpl.n	d6772 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x116>
        json.name("detail", 6).value(attr.details);
   d6762:	4913      	ldr	r1, [pc, #76]	; (d67b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6764:	2206      	movs	r2, #6
   d6766:	a801      	add	r0, sp, #4
   d6768:	f7ff fe86 	bl	d6478 <_ZN5spark10JSONWriter4nameEPKcj>
   d676c:	69e1      	ldr	r1, [r4, #28]
   d676e:	f7ff ff68 	bl	d6642 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6772:	a801      	add	r0, sp, #4
   d6774:	f7ff fde5 	bl	d6342 <_ZN5spark10JSONWriter9endObjectEv>
   d6778:	6a38      	ldr	r0, [r7, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d677a:	490e      	ldr	r1, [pc, #56]	; (d67b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d677c:	6803      	ldr	r3, [r0, #0]
   d677e:	2202      	movs	r2, #2
   d6780:	68db      	ldr	r3, [r3, #12]
   d6782:	4798      	blx	r3
}
   d6784:	b005      	add	sp, #20
   d6786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d678a:	bf00      	nop
   d678c:	000d8718 	.word	0x000d8718
   d6790:	000d87a1 	.word	0x000d87a1
   d6794:	000d87b4 	.word	0x000d87b4
   d6798:	000d882d 	.word	0x000d882d
   d679c:	000d8758 	.word	0x000d8758
   d67a0:	000d875a 	.word	0x000d875a
   d67a4:	000d875d 	.word	0x000d875d
   d67a8:	000d87c9 	.word	0x000d87c9
   d67ac:	000d8760 	.word	0x000d8760
   d67b0:	000d8765 	.word	0x000d8765
   d67b4:	000d876c 	.word	0x000d876c

000d67b8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d67b8:	6800      	ldr	r0, [r0, #0]
   d67ba:	f7fd bf29 	b.w	d4610 <os_mutex_recursive_lock>

000d67be <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d67be:	b570      	push	{r4, r5, r6, lr}
   d67c0:	4604      	mov	r4, r0
    write(str, strlen(str));
   d67c2:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d67c4:	460d      	mov	r5, r1
    write(str, strlen(str));
   d67c6:	f001 fd9b 	bl	d8300 <strlen>
   d67ca:	6823      	ldr	r3, [r4, #0]
   d67cc:	4602      	mov	r2, r0
   d67ce:	4629      	mov	r1, r5
   d67d0:	4620      	mov	r0, r4
   d67d2:	68db      	ldr	r3, [r3, #12]
}
   d67d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d67d8:	4718      	bx	r3

000d67da <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d67da:	b513      	push	{r0, r1, r4, lr}
   d67dc:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d67de:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d67e0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d67e4:	68d4      	ldr	r4, [r2, #12]
   d67e6:	4619      	mov	r1, r3
   d67e8:	2201      	movs	r2, #1
   d67ea:	47a0      	blx	r4
}
   d67ec:	b002      	add	sp, #8
   d67ee:	bd10      	pop	{r4, pc}

000d67f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d67f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67f4:	9d06      	ldr	r5, [sp, #24]
   d67f6:	4698      	mov	r8, r3
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d67f8:	792b      	ldrb	r3, [r5, #4]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d67fa:	460e      	mov	r6, r1
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d67fc:	0719      	lsls	r1, r3, #28
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d67fe:	4604      	mov	r4, r0
   d6800:	4617      	mov	r7, r2
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6802:	d505      	bpl.n	d6810 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x20>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6804:	696b      	ldr	r3, [r5, #20]
   d6806:	4a54      	ldr	r2, [pc, #336]	; (d6958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6808:	6a00      	ldr	r0, [r0, #32]
   d680a:	2100      	movs	r1, #0
   d680c:	f001 f812 	bl	d7834 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6810:	f1b8 0f00 	cmp.w	r8, #0
   d6814:	d00d      	beq.n	d6832 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x42>
        write('[');
   d6816:	215b      	movs	r1, #91	; 0x5b
   d6818:	4620      	mov	r0, r4
   d681a:	f7ff ffde 	bl	d67da <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d681e:	4641      	mov	r1, r8
   d6820:	4620      	mov	r0, r4
   d6822:	f7ff ffcc 	bl	d67be <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6826:	6823      	ldr	r3, [r4, #0]
   d6828:	494c      	ldr	r1, [pc, #304]	; (d695c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d682a:	68db      	ldr	r3, [r3, #12]
   d682c:	2202      	movs	r2, #2
   d682e:	4620      	mov	r0, r4
   d6830:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6832:	792b      	ldrb	r3, [r5, #4]
   d6834:	07da      	lsls	r2, r3, #31
   d6836:	d525      	bpl.n	d6884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
        s = extractFileName(attr.file); // Strip directory path
   d6838:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d683c:	212f      	movs	r1, #47	; 0x2f
   d683e:	4640      	mov	r0, r8
   d6840:	f001 fd7b 	bl	d833a <strrchr>
    if (s1) {
   d6844:	b108      	cbz	r0, d684a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        return s1 + 1;
   d6846:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d684a:	4641      	mov	r1, r8
   d684c:	4620      	mov	r0, r4
   d684e:	f7ff ffb6 	bl	d67be <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6852:	792b      	ldrb	r3, [r5, #4]
   d6854:	079b      	lsls	r3, r3, #30
   d6856:	d509      	bpl.n	d686c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
            write(':');
   d6858:	213a      	movs	r1, #58	; 0x3a
   d685a:	4620      	mov	r0, r4
   d685c:	f7ff ffbd 	bl	d67da <_ZN5spark16StreamLogHandler5writeEc>
   d6860:	68eb      	ldr	r3, [r5, #12]
   d6862:	4a3f      	ldr	r2, [pc, #252]	; (d6960 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6864:	6a20      	ldr	r0, [r4, #32]
   d6866:	2100      	movs	r1, #0
   d6868:	f000 ffe4 	bl	d7834 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d686c:	792b      	ldrb	r3, [r5, #4]
   d686e:	f013 0f04 	tst.w	r3, #4
   d6872:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6874:	bf18      	it	ne
   d6876:	493b      	ldrne	r1, [pc, #236]	; (d6964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6878:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d687a:	bf08      	it	eq
   d687c:	493a      	ldreq	r1, [pc, #232]	; (d6968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d687e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6880:	4620      	mov	r0, r4
   d6882:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6884:	792b      	ldrb	r3, [r5, #4]
   d6886:	0758      	lsls	r0, r3, #29
   d6888:	d518      	bpl.n	d68bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xcc>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d688a:	6929      	ldr	r1, [r5, #16]
   d688c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d688e:	4613      	mov	r3, r2
   d6890:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6894:	b138      	cbz	r0, d68a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        if (*s == ' ') {
   d6896:	2820      	cmp	r0, #32
   d6898:	d101      	bne.n	d689e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xae>
            s1 = s + 1; // Skip return type
   d689a:	4619      	mov	r1, r3
   d689c:	e001      	b.n	d68a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb2>
        } else if (*s == '(') {
   d689e:	2828      	cmp	r0, #40	; 0x28
   d68a0:	d001      	beq.n	d68a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d68a2:	461a      	mov	r2, r3
   d68a4:	e7f3      	b.n	d688e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d68a6:	6823      	ldr	r3, [r4, #0]
   d68a8:	1a52      	subs	r2, r2, r1
   d68aa:	68db      	ldr	r3, [r3, #12]
   d68ac:	4620      	mov	r0, r4
   d68ae:	4798      	blx	r3
        write("(): ", 4);
   d68b0:	6823      	ldr	r3, [r4, #0]
   d68b2:	492e      	ldr	r1, [pc, #184]	; (d696c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d68b4:	68db      	ldr	r3, [r3, #12]
   d68b6:	2204      	movs	r2, #4
   d68b8:	4620      	mov	r0, r4
   d68ba:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d68bc:	2100      	movs	r1, #0
   d68be:	4638      	mov	r0, r7
   d68c0:	f7fd fff6 	bl	d48b0 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d68c4:	4601      	mov	r1, r0
   d68c6:	4620      	mov	r0, r4
   d68c8:	f7ff ff79 	bl	d67be <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d68cc:	6823      	ldr	r3, [r4, #0]
   d68ce:	4926      	ldr	r1, [pc, #152]	; (d6968 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d68d0:	68db      	ldr	r3, [r3, #12]
   d68d2:	2202      	movs	r2, #2
   d68d4:	4620      	mov	r0, r4
   d68d6:	4798      	blx	r3
    // Message
    if (msg) {
   d68d8:	b11e      	cbz	r6, d68e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xf2>
        write(msg);
   d68da:	4631      	mov	r1, r6
   d68dc:	4620      	mov	r0, r4
   d68de:	f7ff ff6e 	bl	d67be <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d68e2:	792b      	ldrb	r3, [r5, #4]
   d68e4:	f013 0f30 	tst.w	r3, #48	; 0x30
   d68e8:	d02d      	beq.n	d6946 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x156>
        write(" [", 2);
   d68ea:	6823      	ldr	r3, [r4, #0]
   d68ec:	4920      	ldr	r1, [pc, #128]	; (d6970 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d68ee:	68db      	ldr	r3, [r3, #12]
   d68f0:	2202      	movs	r2, #2
   d68f2:	4620      	mov	r0, r4
   d68f4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d68f6:	792b      	ldrb	r3, [r5, #4]
   d68f8:	06d9      	lsls	r1, r3, #27
   d68fa:	d50b      	bpl.n	d6914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x124>
            write("code = ", 7);
   d68fc:	6823      	ldr	r3, [r4, #0]
   d68fe:	491d      	ldr	r1, [pc, #116]	; (d6974 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6900:	68db      	ldr	r3, [r3, #12]
   d6902:	2207      	movs	r2, #7
   d6904:	4620      	mov	r0, r4
   d6906:	4798      	blx	r3
   d6908:	69ab      	ldr	r3, [r5, #24]
   d690a:	4a1b      	ldr	r2, [pc, #108]	; (d6978 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d690c:	6a20      	ldr	r0, [r4, #32]
   d690e:	2100      	movs	r1, #0
   d6910:	f000 ff90 	bl	d7834 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6914:	792b      	ldrb	r3, [r5, #4]
   d6916:	069a      	lsls	r2, r3, #26
   d6918:	d511      	bpl.n	d693e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14e>
            if (attr.has_code) {
   d691a:	06db      	lsls	r3, r3, #27
   d691c:	d505      	bpl.n	d692a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13a>
                write(", ", 2);
   d691e:	6823      	ldr	r3, [r4, #0]
   d6920:	4910      	ldr	r1, [pc, #64]	; (d6964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6922:	68db      	ldr	r3, [r3, #12]
   d6924:	2202      	movs	r2, #2
   d6926:	4620      	mov	r0, r4
   d6928:	4798      	blx	r3
            }
            write("details = ", 10);
   d692a:	6823      	ldr	r3, [r4, #0]
   d692c:	4913      	ldr	r1, [pc, #76]	; (d697c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d692e:	68db      	ldr	r3, [r3, #12]
   d6930:	4620      	mov	r0, r4
   d6932:	220a      	movs	r2, #10
   d6934:	4798      	blx	r3
            write(attr.details);
   d6936:	69e9      	ldr	r1, [r5, #28]
   d6938:	4620      	mov	r0, r4
   d693a:	f7ff ff40 	bl	d67be <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d693e:	215d      	movs	r1, #93	; 0x5d
   d6940:	4620      	mov	r0, r4
   d6942:	f7ff ff4a 	bl	d67da <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6946:	6823      	ldr	r3, [r4, #0]
   d6948:	490d      	ldr	r1, [pc, #52]	; (d6980 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d694a:	68db      	ldr	r3, [r3, #12]
   d694c:	4620      	mov	r0, r4
   d694e:	2202      	movs	r2, #2
}
   d6950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6954:	4718      	bx	r3
   d6956:	bf00      	nop
   d6958:	000d876f 	.word	0x000d876f
   d695c:	000d8776 	.word	0x000d8776
   d6960:	000d8662 	.word	0x000d8662
   d6964:	000d8779 	.word	0x000d8779
   d6968:	000d877e 	.word	0x000d877e
   d696c:	000d877c 	.word	0x000d877c
   d6970:	000d8781 	.word	0x000d8781
   d6974:	000d8784 	.word	0x000d8784
   d6978:	000d84e3 	.word	0x000d84e3
   d697c:	000d878c 	.word	0x000d878c
   d6980:	000d876c 	.word	0x000d876c

000d6984 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6988:	6845      	ldr	r5, [r0, #4]
   d698a:	6807      	ldr	r7, [r0, #0]
   d698c:	b085      	sub	sp, #20
   d698e:	4691      	mov	r9, r2
   d6990:	2214      	movs	r2, #20
   d6992:	4355      	muls	r5, r2
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	10ab      	asrs	r3, r5, #2
   d6998:	4d19      	ldr	r5, [pc, #100]	; (d6a00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d699a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d699c:	435d      	muls	r5, r3
   d699e:	468b      	mov	fp, r1
   d69a0:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d69a2:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d69a4:	2d00      	cmp	r5, #0
   d69a6:	9303      	str	r3, [sp, #12]
   d69a8:	dd23      	ble.n	d69f2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d69aa:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d69ac:	106e      	asrs	r6, r5, #1
   d69ae:	fb03 f006 	mul.w	r0, r3, r6
   d69b2:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d69b6:	464a      	mov	r2, r9
   d69b8:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d69bc:	5820      	ldr	r0, [r4, r0]
   d69be:	45d1      	cmp	r9, sl
   d69c0:	bf28      	it	cs
   d69c2:	4652      	movcs	r2, sl
   d69c4:	4659      	mov	r1, fp
   d69c6:	f001 fca3 	bl	d8310 <strncmp>
                if (cmp == 0) {
   d69ca:	9b03      	ldr	r3, [sp, #12]
   d69cc:	b948      	cbnz	r0, d69e2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d69ce:	45d1      	cmp	r9, sl
   d69d0:	d103      	bne.n	d69da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d69d2:	9a01      	ldr	r2, [sp, #4]
   d69d4:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d69d6:	4635      	mov	r5, r6
   d69d8:	e7e4      	b.n	d69a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d69da:	bf8c      	ite	hi
   d69dc:	2001      	movhi	r0, #1
   d69de:	2000      	movls	r0, #0
   d69e0:	e000      	b.n	d69e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d69e2:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d69e4:	2800      	cmp	r0, #0
   d69e6:	d0f6      	beq.n	d69d6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d69e8:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d69ea:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d69ee:	3e01      	subs	r6, #1
   d69f0:	e7f1      	b.n	d69d6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d69f2:	1be4      	subs	r4, r4, r7
}
   d69f4:	4802      	ldr	r0, [pc, #8]	; (d6a00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d69f6:	10a4      	asrs	r4, r4, #2
}
   d69f8:	4360      	muls	r0, r4
   d69fa:	b005      	add	sp, #20
   d69fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a00:	cccccccd 	.word	0xcccccccd

000d6a04 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a06:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d6a08:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6a0a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6a0c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d6a0e:	b313      	cbz	r3, d6a56 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d6a10:	b309      	cbz	r1, d6a56 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6a12:	af04      	add	r7, sp, #16
   d6a14:	2300      	movs	r3, #0
   d6a16:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6a1a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6a1e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6a20:	4639      	mov	r1, r7
   d6a22:	a801      	add	r0, sp, #4
   d6a24:	f7ff fdc3 	bl	d65ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6a28:	4601      	mov	r1, r0
   d6a2a:	b1a0      	cbz	r0, d6a56 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6a2c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a2e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6a30:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6a34:	4620      	mov	r0, r4
   d6a36:	f7ff ffa5 	bl	d6984 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6a3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6a3e:	b153      	cbz	r3, d6a56 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6a40:	6823      	ldr	r3, [r4, #0]
   d6a42:	2414      	movs	r4, #20
   d6a44:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6a48:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6a4a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6a4e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6a50:	bfa8      	it	ge
   d6a52:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6a54:	e7e4      	b.n	d6a20 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6a56:	4630      	mov	r0, r6
   d6a58:	b005      	add	sp, #20
   d6a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6a5c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6a5e:	4c09      	ldr	r4, [pc, #36]	; (d6a84 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6a60:	6823      	ldr	r3, [r4, #0]
   d6a62:	07db      	lsls	r3, r3, #31
   d6a64:	d40b      	bmi.n	d6a7e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7fd fb26 	bl	d40b8 <__cxa_guard_acquire>
   d6a6c:	b138      	cbz	r0, d6a7e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6a6e:	4620      	mov	r0, r4
   d6a70:	f7fd fb27 	bl	d40c2 <__cxa_guard_release>
   d6a74:	4a04      	ldr	r2, [pc, #16]	; (d6a88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6a76:	4905      	ldr	r1, [pc, #20]	; (d6a8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6a78:	4805      	ldr	r0, [pc, #20]	; (d6a90 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a7a:	f001 fa43 	bl	d7f04 <__aeabi_atexit>
    return &factory;
}
   d6a7e:	4804      	ldr	r0, [pc, #16]	; (d6a90 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a80:	bd10      	pop	{r4, pc}
   d6a82:	bf00      	nop
   d6a84:	2003e3a0 	.word	0x2003e3a0
   d6a88:	2003d948 	.word	0x2003d948
   d6a8c:	000d65ab 	.word	0x000d65ab
   d6a90:	2003d8d4 	.word	0x2003d8d4

000d6a94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6a94:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6a96:	4c09      	ldr	r4, [pc, #36]	; (d6abc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6a98:	6823      	ldr	r3, [r4, #0]
   d6a9a:	07db      	lsls	r3, r3, #31
   d6a9c:	d40b      	bmi.n	d6ab6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f7fd fb0a 	bl	d40b8 <__cxa_guard_acquire>
   d6aa4:	b138      	cbz	r0, d6ab6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6aa6:	4620      	mov	r0, r4
   d6aa8:	f7fd fb0b 	bl	d40c2 <__cxa_guard_release>
   d6aac:	4a04      	ldr	r2, [pc, #16]	; (d6ac0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6aae:	4905      	ldr	r1, [pc, #20]	; (d6ac4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6ab0:	4805      	ldr	r0, [pc, #20]	; (d6ac8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6ab2:	f001 fa27 	bl	d7f04 <__aeabi_atexit>
    return &factory;
}
   d6ab6:	4804      	ldr	r0, [pc, #16]	; (d6ac8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6ab8:	bd10      	pop	{r4, pc}
   d6aba:	bf00      	nop
   d6abc:	2003e3d0 	.word	0x2003e3d0
   d6ac0:	2003d948 	.word	0x2003d948
   d6ac4:	000d65a9 	.word	0x000d65a9
   d6ac8:	2003d8d8 	.word	0x2003d8d8

000d6acc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6acc:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ace:	2500      	movs	r5, #0
   d6ad0:	4604      	mov	r4, r0
   d6ad2:	6005      	str	r5, [r0, #0]
   d6ad4:	6045      	str	r5, [r0, #4]
   d6ad6:	6085      	str	r5, [r0, #8]
   d6ad8:	6105      	str	r5, [r0, #16]
   d6ada:	6145      	str	r5, [r0, #20]
   d6adc:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6ade:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d6ae2:	f7fd fd8d 	bl	d4600 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d6ae6:	f7ff ffb9 	bl	d6a5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6aea:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6aec:	f7ff ffd2 	bl	d6a94 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6af0:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6af2:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d6af4:	4620      	mov	r0, r4
   d6af6:	bd38      	pop	{r3, r4, r5, pc}

000d6af8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6af8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6afa:	4c0a      	ldr	r4, [pc, #40]	; (d6b24 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6afc:	6823      	ldr	r3, [r4, #0]
   d6afe:	07db      	lsls	r3, r3, #31
   d6b00:	d40e      	bmi.n	d6b20 <_ZN5spark10LogManager8instanceEv+0x28>
   d6b02:	4620      	mov	r0, r4
   d6b04:	f7fd fad8 	bl	d40b8 <__cxa_guard_acquire>
   d6b08:	b150      	cbz	r0, d6b20 <_ZN5spark10LogManager8instanceEv+0x28>
   d6b0a:	4807      	ldr	r0, [pc, #28]	; (d6b28 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6b0c:	f7ff ffde 	bl	d6acc <_ZN5spark10LogManagerC1Ev>
   d6b10:	4620      	mov	r0, r4
   d6b12:	f7fd fad6 	bl	d40c2 <__cxa_guard_release>
   d6b16:	4a05      	ldr	r2, [pc, #20]	; (d6b2c <_ZN5spark10LogManager8instanceEv+0x34>)
   d6b18:	4905      	ldr	r1, [pc, #20]	; (d6b30 <_ZN5spark10LogManager8instanceEv+0x38>)
   d6b1a:	4803      	ldr	r0, [pc, #12]	; (d6b28 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6b1c:	f001 f9f2 	bl	d7f04 <__aeabi_atexit>
    return &mgr;
}
   d6b20:	4801      	ldr	r0, [pc, #4]	; (d6b28 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6b22:	bd10      	pop	{r4, pc}
   d6b24:	2003e3a4 	.word	0x2003e3a4
   d6b28:	2003e3a8 	.word	0x2003e3a8
   d6b2c:	2003d948 	.word	0x2003d948
   d6b30:	000d6f63 	.word	0x000d6f63

000d6b34 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6b34:	2300      	movs	r3, #0
   d6b36:	4a02      	ldr	r2, [pc, #8]	; (d6b40 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6b38:	4902      	ldr	r1, [pc, #8]	; (d6b44 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6b3a:	4803      	ldr	r0, [pc, #12]	; (d6b48 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6b3c:	f7fd bec0 	b.w	d48c0 <log_set_callbacks>
   d6b40:	000d6e45 	.word	0x000d6e45
   d6b44:	000d6dd5 	.word	0x000d6dd5
   d6b48:	000d6d5d 	.word	0x000d6d5d

000d6b4c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6b4c:	2300      	movs	r3, #0
   d6b4e:	461a      	mov	r2, r3
   d6b50:	4619      	mov	r1, r3
   d6b52:	4618      	mov	r0, r3
   d6b54:	f7fd beb4 	b.w	d48c0 <log_set_callbacks>

000d6b58 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b5a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6b5c:	68ce      	ldr	r6, [r1, #12]
   d6b5e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b62:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b66:	4605      	mov	r5, r0
   d6b68:	a801      	add	r0, sp, #4
   d6b6a:	f7fe fb43 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6b6e:	4622      	mov	r2, r4
   d6b70:	4631      	mov	r1, r6
   d6b72:	4628      	mov	r0, r5
   d6b74:	f7ff fcb4 	bl	d64e0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b78:	a801      	add	r0, sp, #4
   d6b7a:	f7fe fb28 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b7e:	4628      	mov	r0, r5
   d6b80:	b002      	add	sp, #8
   d6b82:	bd70      	pop	{r4, r5, r6, pc}

000d6b84 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b86:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6b88:	690e      	ldr	r6, [r1, #16]
   d6b8a:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b8e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b92:	4605      	mov	r5, r0
   d6b94:	a801      	add	r0, sp, #4
   d6b96:	f7fe fb2d 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6b9a:	4622      	mov	r2, r4
   d6b9c:	4631      	mov	r1, r6
   d6b9e:	4628      	mov	r0, r5
   d6ba0:	f7ff fce1 	bl	d6566 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ba4:	a801      	add	r0, sp, #4
   d6ba6:	f7fe fb12 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6baa:	4628      	mov	r0, r5
   d6bac:	b002      	add	sp, #8
   d6bae:	bd70      	pop	{r4, r5, r6, pc}

000d6bb0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6bb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bb2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6bb4:	688e      	ldr	r6, [r1, #8]
   d6bb6:	f851 3b04 	ldr.w	r3, [r1], #4
   d6bba:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6bbe:	4605      	mov	r5, r0
   d6bc0:	a801      	add	r0, sp, #4
   d6bc2:	f7fe fb17 	bl	d51f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6bc6:	4622      	mov	r2, r4
   d6bc8:	4631      	mov	r1, r6
   d6bca:	4628      	mov	r0, r5
   d6bcc:	f7ff fcb0 	bl	d6530 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6bd0:	a801      	add	r0, sp, #4
   d6bd2:	f7fe fafc 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6bd6:	4628      	mov	r0, r5
   d6bd8:	b002      	add	sp, #8
   d6bda:	bd70      	pop	{r4, r5, r6, pc}

000d6bdc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6bdc:	b530      	push	{r4, r5, lr}
   d6bde:	b08b      	sub	sp, #44	; 0x2c
   d6be0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d6be2:	4601      	mov	r1, r0
   d6be4:	a804      	add	r0, sp, #16
   d6be6:	f7ff ffe3 	bl	d6bb0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d6bea:	a804      	add	r0, sp, #16
   d6bec:	f7ff fb95 	bl	d631a <_ZN5spark18JSONObjectIterator4nextEv>
   d6bf0:	b1e8      	cbz	r0, d6c2e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d6bf2:	a904      	add	r1, sp, #16
   d6bf4:	4668      	mov	r0, sp
   d6bf6:	f7ff ffaf 	bl	d6b58 <_ZNK5spark18JSONObjectIterator4nameEv>
   d6bfa:	490f      	ldr	r1, [pc, #60]	; (d6c38 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d6bfc:	9802      	ldr	r0, [sp, #8]
   d6bfe:	f7ff fd19 	bl	d6634 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d6c02:	4604      	mov	r4, r0
   d6c04:	b110      	cbz	r0, d6c0c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d6c06:	1c2c      	adds	r4, r5, #0
   d6c08:	bf18      	it	ne
   d6c0a:	2401      	movne	r4, #1
   d6c0c:	a801      	add	r0, sp, #4
   d6c0e:	f7fe fade 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c12:	2c00      	cmp	r4, #0
   d6c14:	d0e9      	beq.n	d6bea <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d6c16:	a904      	add	r1, sp, #16
   d6c18:	4668      	mov	r0, sp
   d6c1a:	f7ff ffb3 	bl	d6b84 <_ZNK5spark18JSONObjectIterator5valueEv>
   d6c1e:	4668      	mov	r0, sp
   d6c20:	f7ff fb5b 	bl	d62da <_ZNK5spark9JSONValue5toIntEv>
   d6c24:	6028      	str	r0, [r5, #0]
   d6c26:	a801      	add	r0, sp, #4
   d6c28:	f7fe fad1 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c2c:	e7dd      	b.n	d6bea <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6c2e:	a805      	add	r0, sp, #20
   d6c30:	f7fe facd 	bl	d51ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6c34:	b00b      	add	sp, #44	; 0x2c
   d6c36:	bd30      	pop	{r4, r5, pc}
   d6c38:	000d8797 	.word	0x000d8797

000d6c3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c3e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6c40:	4620      	mov	r0, r4
   d6c42:	4913      	ldr	r1, [pc, #76]	; (d6c90 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6c44:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6c46:	f001 fb51 	bl	d82ec <strcmp>
   d6c4a:	b940      	cbnz	r0, d6c5e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6c4c:	f000 fffc 	bl	d7c48 <_Z16_fetch_usbserialv>
   d6c50:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6c54:	f000 ffe8 	bl	d7c28 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6c58:	f000 fff6 	bl	d7c48 <_Z16_fetch_usbserialv>
   d6c5c:	e015      	b.n	d6c8a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6c5e:	490d      	ldr	r1, [pc, #52]	; (d6c94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6c60:	4620      	mov	r0, r4
   d6c62:	f001 fb43 	bl	d82ec <strcmp>
   d6c66:	b978      	cbnz	r0, d6c88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6c68:	a902      	add	r1, sp, #8
   d6c6a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6c6e:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7ff ffb2 	bl	d6bdc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6c78:	f000 ff5a 	bl	d7b30 <_Z22__fetch_global_Serial1v>
   d6c7c:	9901      	ldr	r1, [sp, #4]
   d6c7e:	f000 ff4d 	bl	d7b1c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6c82:	f000 ff55 	bl	d7b30 <_Z22__fetch_global_Serial1v>
   d6c86:	e000      	b.n	d6c8a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6c88:	2000      	movs	r0, #0
}
   d6c8a:	b003      	add	sp, #12
   d6c8c:	bd30      	pop	{r4, r5, pc}
   d6c8e:	bf00      	nop
   d6c90:	000d879c 	.word	0x000d879c
   d6c94:	000d87a3 	.word	0x000d87a3

000d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c98:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c9a:	6804      	ldr	r4, [r0, #0]
   d6c9c:	6843      	ldr	r3, [r0, #4]
   d6c9e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6ca0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6ca2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6ca6:	42a6      	cmp	r6, r4
   d6ca8:	d005      	beq.n	d6cb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6caa:	f104 0008 	add.w	r0, r4, #8
   d6cae:	f7ff fff3 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6cb2:	3414      	adds	r4, #20
   d6cb4:	e7f7      	b.n	d6ca6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6cb6:	6828      	ldr	r0, [r5, #0]
   d6cb8:	f7fd fe8e 	bl	d49d8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6cbc:	4628      	mov	r0, r5
   d6cbe:	bd70      	pop	{r4, r5, r6, pc}

000d6cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6cc0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6cc2:	6804      	ldr	r4, [r0, #0]
   d6cc4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6cc6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6cc8:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6ccc:	42a6      	cmp	r6, r4
   d6cce:	d004      	beq.n	d6cda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	f000 fe2c 	bl	d792e <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6cd6:	3410      	adds	r4, #16
   d6cd8:	e7f8      	b.n	d6ccc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6cda:	6828      	ldr	r0, [r5, #0]
   d6cdc:	f7fd fe7c 	bl	d49d8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6ce0:	4628      	mov	r0, r5
   d6ce2:	bd70      	pop	{r4, r5, r6, pc}

000d6ce4 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d6ce4:	b510      	push	{r4, lr}
   d6ce6:	4604      	mov	r4, r0
   d6ce8:	300c      	adds	r0, #12
   d6cea:	f7ff ffd5 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6cee:	4620      	mov	r0, r4
   d6cf0:	f7ff ffe6 	bl	d6cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6cf4:	4620      	mov	r0, r4
   d6cf6:	bd10      	pop	{r4, pc}

000d6cf8 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6cf8:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6cfa:	4b04      	ldr	r3, [pc, #16]	; (d6d0c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6cfc:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6cfe:	f840 3b04 	str.w	r3, [r0], #4
   d6d02:	f7ff ffef 	bl	d6ce4 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6d06:	4620      	mov	r0, r4
   d6d08:	bd10      	pop	{r4, pc}
   d6d0a:	bf00      	nop
   d6d0c:	000d849c 	.word	0x000d849c

000d6d10 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6d10:	b510      	push	{r4, lr}
   d6d12:	4604      	mov	r4, r0
   d6d14:	f7ff fff0 	bl	d6cf8 <_ZN5spark16StreamLogHandlerD1Ev>
   d6d18:	4620      	mov	r0, r4
   d6d1a:	2124      	movs	r1, #36	; 0x24
   d6d1c:	f001 f8f7 	bl	d7f0e <_ZdlPvj>
   d6d20:	4620      	mov	r0, r4
   d6d22:	bd10      	pop	{r4, pc}

000d6d24 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6d24:	b510      	push	{r4, lr}
   d6d26:	4b03      	ldr	r3, [pc, #12]	; (d6d34 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6d28:	6003      	str	r3, [r0, #0]
   d6d2a:	4604      	mov	r4, r0
   d6d2c:	f7ff ffe4 	bl	d6cf8 <_ZN5spark16StreamLogHandlerD1Ev>
   d6d30:	4620      	mov	r0, r4
   d6d32:	bd10      	pop	{r4, pc}
   d6d34:	000d8730 	.word	0x000d8730

000d6d38 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6d38:	b510      	push	{r4, lr}
   d6d3a:	4604      	mov	r4, r0
   d6d3c:	f7ff fff2 	bl	d6d24 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6d40:	4620      	mov	r0, r4
   d6d42:	2124      	movs	r1, #36	; 0x24
   d6d44:	f001 f8e3 	bl	d7f0e <_ZdlPvj>
   d6d48:	4620      	mov	r0, r4
   d6d4a:	bd10      	pop	{r4, pc}

000d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6d4c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6d4e:	6803      	ldr	r3, [r0, #0]
   d6d50:	4604      	mov	r4, r0
   d6d52:	6818      	ldr	r0, [r3, #0]
   d6d54:	f7fd fc64 	bl	d4620 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6d58:	4620      	mov	r0, r4
   d6d5a:	bd10      	pop	{r4, pc}

000d6d5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d60:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6d62:	4b1b      	ldr	r3, [pc, #108]	; (d6dd0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6d64:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d66:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6d6a:	b085      	sub	sp, #20
   d6d6c:	4682      	mov	sl, r0
   d6d6e:	460e      	mov	r6, r1
   d6d70:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d72:	bb53      	cbnz	r3, d6dca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6d74:	f7ff fec0 	bl	d6af8 <_ZN5spark10LogManager8instanceEv>
   d6d78:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6d7a:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d7c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6d7e:	f7ff fd1b 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6d82:	7b23      	ldrb	r3, [r4, #12]
   d6d84:	b9f3      	cbnz	r3, d6dc4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d86:	2301      	movs	r3, #1
   d6d88:	7323      	strb	r3, [r4, #12]
   d6d8a:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6d8c:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6d8e:	b2f6      	uxtb	r6, r6
   d6d90:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6d94:	454d      	cmp	r5, r9
   d6d96:	d013      	beq.n	d6dc0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6d98:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6d9c:	4641      	mov	r1, r8
   d6d9e:	1d38      	adds	r0, r7, #4
   d6da0:	f7ff fe30 	bl	d6a04 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6da4:	4286      	cmp	r6, r0
   d6da6:	d3f5      	bcc.n	d6d94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6da8:	683b      	ldr	r3, [r7, #0]
   d6daa:	f8cd b000 	str.w	fp, [sp]
   d6dae:	689b      	ldr	r3, [r3, #8]
   d6db0:	469e      	mov	lr, r3
   d6db2:	4638      	mov	r0, r7
   d6db4:	4643      	mov	r3, r8
   d6db6:	4632      	mov	r2, r6
   d6db8:	4651      	mov	r1, sl
   d6dba:	4677      	mov	r7, lr
   d6dbc:	47b8      	blx	r7
   d6dbe:	e7e9      	b.n	d6d94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6dc0:	2300      	movs	r3, #0
   d6dc2:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6dc4:	a803      	add	r0, sp, #12
   d6dc6:	f7ff ffc1 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6dca:	b005      	add	sp, #20
   d6dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dd0:	e000ed00 	.word	0xe000ed00

000d6dd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6dd8:	4699      	mov	r9, r3
   d6dda:	4b19      	ldr	r3, [pc, #100]	; (d6e40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6ddc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6de2:	4607      	mov	r7, r0
   d6de4:	4688      	mov	r8, r1
   d6de6:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6de8:	bb33      	cbnz	r3, d6e38 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6dea:	f7ff fe85 	bl	d6af8 <_ZN5spark10LogManager8instanceEv>
   d6dee:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6df0:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6df2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6df4:	f7ff fce0 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6df8:	7b23      	ldrb	r3, [r4, #12]
   d6dfa:	b9d3      	cbnz	r3, d6e32 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6dfc:	2301      	movs	r3, #1
   d6dfe:	7323      	strb	r3, [r4, #12]
   d6e00:	6825      	ldr	r5, [r4, #0]
   d6e02:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6e04:	fa5f fb86 	uxtb.w	fp, r6
   d6e08:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6e0c:	4555      	cmp	r5, sl
   d6e0e:	d00e      	beq.n	d6e2e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6e10:	f855 6b04 	ldr.w	r6, [r5], #4
   d6e14:	4649      	mov	r1, r9
   d6e16:	1d30      	adds	r0, r6, #4
   d6e18:	f7ff fdf4 	bl	d6a04 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6e1c:	4583      	cmp	fp, r0
   d6e1e:	d3f5      	bcc.n	d6e0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6e20:	6833      	ldr	r3, [r6, #0]
   d6e22:	4642      	mov	r2, r8
   d6e24:	68db      	ldr	r3, [r3, #12]
   d6e26:	4639      	mov	r1, r7
   d6e28:	4630      	mov	r0, r6
   d6e2a:	4798      	blx	r3
   d6e2c:	e7ee      	b.n	d6e0c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6e2e:	2300      	movs	r3, #0
   d6e30:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6e32:	a801      	add	r0, sp, #4
   d6e34:	f7ff ff8a 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6e38:	b003      	add	sp, #12
   d6e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e3e:	bf00      	nop
   d6e40:	e000ed00 	.word	0xe000ed00

000d6e44 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6e48:	4b15      	ldr	r3, [pc, #84]	; (d6ea0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6e4a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6e50:	4604      	mov	r4, r0
   d6e52:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6e54:	b9fb      	cbnz	r3, d6e96 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6e56:	f7ff fe4f 	bl	d6af8 <_ZN5spark10LogManager8instanceEv>
   d6e5a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6e5c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e5e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e60:	f7ff fcaa 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
   d6e64:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6e68:	2646      	movs	r6, #70	; 0x46
   d6e6a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6e6e:	42af      	cmp	r7, r5
   d6e70:	d107      	bne.n	d6e82 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6e72:	a801      	add	r0, sp, #4
   d6e74:	f7ff ff6a 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6e78:	42b4      	cmp	r4, r6
   d6e7a:	bfb4      	ite	lt
   d6e7c:	2000      	movlt	r0, #0
   d6e7e:	2001      	movge	r0, #1
   d6e80:	e00a      	b.n	d6e98 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6e82:	f855 0b04 	ldr.w	r0, [r5], #4
   d6e86:	4641      	mov	r1, r8
   d6e88:	3004      	adds	r0, #4
   d6e8a:	f7ff fdbb 	bl	d6a04 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6e8e:	4286      	cmp	r6, r0
   d6e90:	bfa8      	it	ge
   d6e92:	4606      	movge	r6, r0
   d6e94:	e7eb      	b.n	d6e6e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6e96:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6e98:	b002      	add	sp, #8
   d6e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e9e:	bf00      	nop
   d6ea0:	e000ed00 	.word	0xe000ed00

000d6ea4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6ea4:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6ea6:	6803      	ldr	r3, [r0, #0]
   d6ea8:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6eaa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6eac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6eb0:	429a      	cmp	r2, r3
   d6eb2:	4618      	mov	r0, r3
   d6eb4:	d00e      	beq.n	d6ed4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6eb6:	6806      	ldr	r6, [r0, #0]
   d6eb8:	680d      	ldr	r5, [r1, #0]
   d6eba:	42ae      	cmp	r6, r5
   d6ebc:	f103 0304 	add.w	r3, r3, #4
   d6ec0:	d1f6      	bne.n	d6eb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6ec2:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6ec4:	1a52      	subs	r2, r2, r1
   d6ec6:	f001 f9ad 	bl	d8224 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6eca:	6863      	ldr	r3, [r4, #4]
   d6ecc:	3b01      	subs	r3, #1
   d6ece:	6063      	str	r3, [r4, #4]
    return true;
   d6ed0:	2001      	movs	r0, #1
}
   d6ed2:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6ed4:	2000      	movs	r0, #0
   d6ed6:	bd70      	pop	{r4, r5, r6, pc}

000d6ed8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6eda:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6edc:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6ede:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ee0:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6ee2:	f7ff fc69 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6ee6:	a901      	add	r1, sp, #4
   d6ee8:	4620      	mov	r0, r4
   d6eea:	f7ff ffdb 	bl	d6ea4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6eee:	b920      	cbnz	r0, d6efa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ef0:	a803      	add	r0, sp, #12
   d6ef2:	f7ff ff2b 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6ef6:	b004      	add	sp, #16
   d6ef8:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6efa:	6863      	ldr	r3, [r4, #4]
   d6efc:	2b00      	cmp	r3, #0
   d6efe:	d1f7      	bne.n	d6ef0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6f00:	f7ff fe24 	bl	d6b4c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6f04:	e7f4      	b.n	d6ef0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6f06 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6f06:	b570      	push	{r4, r5, r6, lr}
   d6f08:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6f0a:	6943      	ldr	r3, [r0, #20]
   d6f0c:	2618      	movs	r6, #24
   d6f0e:	4604      	mov	r4, r0
   d6f10:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6f14:	42ae      	cmp	r6, r5
   d6f16:	d015      	beq.n	d6f44 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6f18:	f105 0110 	add.w	r1, r5, #16
   d6f1c:	4620      	mov	r0, r4
   d6f1e:	f7ff ffc1 	bl	d6ea4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6f22:	6863      	ldr	r3, [r4, #4]
   d6f24:	b90b      	cbnz	r3, d6f2a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6f26:	f7ff fe11 	bl	d6b4c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6f2a:	69e0      	ldr	r0, [r4, #28]
   d6f2c:	6929      	ldr	r1, [r5, #16]
   d6f2e:	6803      	ldr	r3, [r0, #0]
   d6f30:	68db      	ldr	r3, [r3, #12]
   d6f32:	4798      	blx	r3
        if (h.stream) {
   d6f34:	6969      	ldr	r1, [r5, #20]
   d6f36:	b119      	cbz	r1, d6f40 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6f38:	6a20      	ldr	r0, [r4, #32]
   d6f3a:	6803      	ldr	r3, [r0, #0]
   d6f3c:	68db      	ldr	r3, [r3, #12]
   d6f3e:	4798      	blx	r3
   d6f40:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6f42:	e7e7      	b.n	d6f14 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6f44:	6925      	ldr	r5, [r4, #16]
   d6f46:	6963      	ldr	r3, [r4, #20]
   d6f48:	2618      	movs	r6, #24
   d6f4a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6f4e:	42b5      	cmp	r5, r6
   d6f50:	d004      	beq.n	d6f5c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6f52:	4628      	mov	r0, r5
   d6f54:	f000 fceb 	bl	d792e <_ZN6StringD1Ev>
   d6f58:	3518      	adds	r5, #24
   d6f5a:	e7f8      	b.n	d6f4e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6f5c:	2300      	movs	r3, #0
   d6f5e:	6163      	str	r3, [r4, #20]
   d6f60:	bd70      	pop	{r4, r5, r6, pc}

000d6f62 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f64:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6f66:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6f68:	f7ff fdf0 	bl	d6b4c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6f6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6f70:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6f74:	f7ff fc20 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6f78:	4620      	mov	r0, r4
   d6f7a:	f7ff ffc4 	bl	d6f06 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6f7e:	4628      	mov	r0, r5
   d6f80:	f7ff fee4 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6f84:	6925      	ldr	r5, [r4, #16]
   d6f86:	6963      	ldr	r3, [r4, #20]
   d6f88:	2618      	movs	r6, #24
   d6f8a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6f8e:	42b5      	cmp	r5, r6
   d6f90:	d004      	beq.n	d6f9c <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6f92:	4628      	mov	r0, r5
   d6f94:	f000 fccb 	bl	d792e <_ZN6StringD1Ev>
   d6f98:	3518      	adds	r5, #24
   d6f9a:	e7f8      	b.n	d6f8e <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f9c:	6920      	ldr	r0, [r4, #16]
   d6f9e:	f7fd fd1b 	bl	d49d8 <free>
   d6fa2:	6820      	ldr	r0, [r4, #0]
   d6fa4:	f7fd fd18 	bl	d49d8 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6fa8:	4620      	mov	r0, r4
   d6faa:	b002      	add	sp, #8
   d6fac:	bd70      	pop	{r4, r5, r6, pc}

000d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fae:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fb0:	680a      	ldr	r2, [r1, #0]
   d6fb2:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fb4:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fb6:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6fb8:	684a      	ldr	r2, [r1, #4]
   d6fba:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fbc:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fbe:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6fc0:	688a      	ldr	r2, [r1, #8]
   d6fc2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fc4:	608b      	str	r3, [r1, #8]
   d6fc6:	4770      	bx	lr

000d6fc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6fc8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fca:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6fcc:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fce:	6003      	str	r3, [r0, #0]
   d6fd0:	6043      	str	r3, [r0, #4]
   d6fd2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6fd4:	f7ff ffeb 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6fd8:	4620      	mov	r0, r4
   d6fda:	bd10      	pop	{r4, pc}

000d6fdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6fdc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fe0:	4604      	mov	r4, r0
   d6fe2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6fe4:	d925      	bls.n	d7032 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6fe6:	4290      	cmp	r0, r2
   d6fe8:	d224      	bcs.n	d7034 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6fea:	1a55      	subs	r5, r2, r1
   d6fec:	3d14      	subs	r5, #20
   d6fee:	442c      	add	r4, r5
   d6ff0:	f1a1 0714 	sub.w	r7, r1, #20
   d6ff4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ff8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6ffa:	f1a5 0308 	sub.w	r3, r5, #8
   d6ffe:	429f      	cmp	r7, r3
   d7000:	d037      	beq.n	d7072 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d7002:	b184      	cbz	r4, d7026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7004:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7008:	6023      	str	r3, [r4, #0]
   d700a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d700e:	80a3      	strh	r3, [r4, #4]
   d7010:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7014:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7016:	60a6      	str	r6, [r4, #8]
   d7018:	60e6      	str	r6, [r4, #12]
   d701a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d701c:	4629      	mov	r1, r5
   d701e:	f104 0008 	add.w	r0, r4, #8
   d7022:	f7ff ffc4 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7026:	4628      	mov	r0, r5
   d7028:	f7ff fe36 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d702c:	3c14      	subs	r4, #20
   d702e:	3d14      	subs	r5, #20
   d7030:	e7e3      	b.n	d6ffa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7032:	d01e      	beq.n	d7072 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7034:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7038:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d703a:	f1a5 0308 	sub.w	r3, r5, #8
   d703e:	429e      	cmp	r6, r3
   d7040:	d017      	beq.n	d7072 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7042:	b184      	cbz	r4, d7066 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7044:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7048:	6023      	str	r3, [r4, #0]
   d704a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d704e:	80a3      	strh	r3, [r4, #4]
   d7050:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7054:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7056:	60a7      	str	r7, [r4, #8]
   d7058:	60e7      	str	r7, [r4, #12]
   d705a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d705c:	4629      	mov	r1, r5
   d705e:	f104 0008 	add.w	r0, r4, #8
   d7062:	f7ff ffa4 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7066:	4628      	mov	r0, r5
   d7068:	f7ff fe16 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d706c:	3414      	adds	r4, #20
   d706e:	3514      	adds	r5, #20
   d7070:	e7e3      	b.n	d703a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7074 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7076:	6845      	ldr	r5, [r0, #4]
   d7078:	6883      	ldr	r3, [r0, #8]
   d707a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d707c:	4604      	mov	r4, r0
   d707e:	460e      	mov	r6, r1
   d7080:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7082:	db0e      	blt.n	d70a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7084:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7086:	2d00      	cmp	r5, #0
   d7088:	dd05      	ble.n	d7096 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d708a:	00a9      	lsls	r1, r5, #2
   d708c:	6800      	ldr	r0, [r0, #0]
   d708e:	f7fd fcab 	bl	d49e8 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7092:	b920      	cbnz	r0, d709e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7096:	6800      	ldr	r0, [r0, #0]
   d7098:	f7fd fc9e 	bl	d49d8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d709c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d709e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d70a0:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d70a2:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d70a4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d70a6:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d70aa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d70ae:	1a52      	subs	r2, r2, r1
   d70b0:	1d08      	adds	r0, r1, #4
   d70b2:	f001 f8b7 	bl	d8224 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d70b6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d70ba:	6863      	ldr	r3, [r4, #4]
   d70bc:	3301      	adds	r3, #1
   d70be:	6063      	str	r3, [r4, #4]
   d70c0:	2001      	movs	r0, #1
    return true;
}
   d70c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d70c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d70c6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d70c8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d70ca:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d70cc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d70ce:	f7ff fb73 	bl	d67b8 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d70d2:	6823      	ldr	r3, [r4, #0]
   d70d4:	6861      	ldr	r1, [r4, #4]
   d70d6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d70da:	4283      	cmp	r3, r0
   d70dc:	461a      	mov	r2, r3
   d70de:	d009      	beq.n	d70f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d70e0:	6812      	ldr	r2, [r2, #0]
   d70e2:	42aa      	cmp	r2, r5
   d70e4:	f103 0304 	add.w	r3, r3, #4
   d70e8:	d1f7      	bne.n	d70da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d70ea:	a801      	add	r0, sp, #4
   d70ec:	f7ff fe2e 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d70f0:	2500      	movs	r5, #0
   d70f2:	e00e      	b.n	d7112 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d70f4:	462a      	mov	r2, r5
   d70f6:	4620      	mov	r0, r4
   d70f8:	f7ff ffbc 	bl	d7074 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d70fc:	4605      	mov	r5, r0
   d70fe:	2800      	cmp	r0, #0
   d7100:	d0f3      	beq.n	d70ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d7102:	6863      	ldr	r3, [r4, #4]
   d7104:	2b01      	cmp	r3, #1
   d7106:	d101      	bne.n	d710c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7108:	f7ff fd14 	bl	d6b34 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d710c:	a801      	add	r0, sp, #4
   d710e:	f7ff fe1d 	bl	d6d4c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d7112:	4628      	mov	r0, r5
   d7114:	b003      	add	sp, #12
   d7116:	bd30      	pop	{r4, r5, pc}

000d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7118:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d711c:	4606      	mov	r6, r0
   d711e:	460c      	mov	r4, r1
   d7120:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7122:	d914      	bls.n	d714e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7124:	4290      	cmp	r0, r2
   d7126:	d213      	bcs.n	d7150 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7128:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d712c:	1a6c      	subs	r4, r5, r1
   d712e:	f1a1 0710 	sub.w	r7, r1, #16
   d7132:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7134:	42af      	cmp	r7, r5
   d7136:	d018      	beq.n	d716a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7138:	b11c      	cbz	r4, d7142 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d713a:	4629      	mov	r1, r5
   d713c:	4620      	mov	r0, r4
   d713e:	f000 fbe6 	bl	d790e <_ZN6StringC1EOS_>
                end->~T();
   d7142:	4628      	mov	r0, r5
   d7144:	f000 fbf3 	bl	d792e <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7148:	3d10      	subs	r5, #16
   d714a:	3c10      	subs	r4, #16
   d714c:	e7f2      	b.n	d7134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d714e:	d00c      	beq.n	d716a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7150:	42ac      	cmp	r4, r5
   d7152:	d00a      	beq.n	d716a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7154:	b11e      	cbz	r6, d715e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7156:	4621      	mov	r1, r4
   d7158:	4630      	mov	r0, r6
   d715a:	f000 fbd8 	bl	d790e <_ZN6StringC1EOS_>
                p->~T();
   d715e:	4620      	mov	r0, r4
   d7160:	f000 fbe5 	bl	d792e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7164:	3410      	adds	r4, #16
   d7166:	3610      	adds	r6, #16
   d7168:	e7f2      	b.n	d7150 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d716c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d716c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d716e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7170:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7172:	dd0b      	ble.n	d718c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7174:	0130      	lsls	r0, r6, #4
   d7176:	f7fd fc27 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d717a:	4604      	mov	r4, r0
   d717c:	b170      	cbz	r0, d719c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d717e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7182:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7186:	f7ff ffc7 	bl	d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d718a:	e000      	b.n	d718e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d718c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d718e:	6828      	ldr	r0, [r5, #0]
   d7190:	f7fd fc22 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7194:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7196:	60ae      	str	r6, [r5, #8]
        return true;
   d7198:	2001      	movs	r0, #1
   d719a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d719c:	bd70      	pop	{r4, r5, r6, pc}

000d719e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d719e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d71a2:	2300      	movs	r3, #0
   d71a4:	b095      	sub	sp, #84	; 0x54
   d71a6:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d71a8:	2246      	movs	r2, #70	; 0x46
   d71aa:	6003      	str	r3, [r0, #0]
   d71ac:	6043      	str	r3, [r0, #4]
   d71ae:	6083      	str	r3, [r0, #8]
   d71b0:	60c3      	str	r3, [r0, #12]
   d71b2:	6103      	str	r3, [r0, #16]
   d71b4:	6143      	str	r3, [r0, #20]
   d71b6:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d71b8:	9102      	str	r1, [sp, #8]
   d71ba:	f8da 1004 	ldr.w	r1, [sl, #4]
   d71be:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d71c0:	4299      	cmp	r1, r3
   d71c2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d71c4:	9309      	str	r3, [sp, #36]	; 0x24
   d71c6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d71c8:	f340 809d 	ble.w	d7306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d71cc:	a808      	add	r0, sp, #32
   d71ce:	f7ff ffcd 	bl	d716c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d71d2:	2800      	cmp	r0, #0
   d71d4:	f040 8097 	bne.w	d7306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d71d8:	e08e      	b.n	d72f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d71da:	4621      	mov	r1, r4
   d71dc:	a80b      	add	r0, sp, #44	; 0x2c
   d71de:	f000 fb96 	bl	d790e <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d71e2:	a90b      	add	r1, sp, #44	; 0x2c
   d71e4:	a80f      	add	r0, sp, #60	; 0x3c
   d71e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d71e8:	f000 fb91 	bl	d790e <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d71ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   d71ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d71f0:	4299      	cmp	r1, r3
   d71f2:	f2c0 80ce 	blt.w	d7392 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d71f6:	3101      	adds	r1, #1
   d71f8:	a808      	add	r0, sp, #32
   d71fa:	f7ff ffb7 	bl	d716c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d71fe:	2800      	cmp	r0, #0
   d7200:	f040 80c7 	bne.w	d7392 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7204:	a80f      	add	r0, sp, #60	; 0x3c
   d7206:	f000 fb92 	bl	d792e <_ZN6StringD1Ev>
   d720a:	a80b      	add	r0, sp, #44	; 0x2c
   d720c:	f000 fb8f 	bl	d792e <_ZN6StringD1Ev>
   d7210:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7212:	42a7      	cmp	r7, r4
   d7214:	d1e1      	bne.n	d71da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7216:	2600      	movs	r6, #0
   d7218:	960b      	str	r6, [sp, #44]	; 0x2c
   d721a:	960c      	str	r6, [sp, #48]	; 0x30
   d721c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d721e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7220:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7222:	429e      	cmp	r6, r3
   d7224:	f280 80a8 	bge.w	d7378 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7228:	0133      	lsls	r3, r6, #4
   d722a:	9a08      	ldr	r2, [sp, #32]
   d722c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d722e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7230:	2b00      	cmp	r3, #0
   d7232:	f000 809f 	beq.w	d7374 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7236:	2314      	movs	r3, #20
   d7238:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d723a:	f8cd 901c 	str.w	r9, [sp, #28]
   d723e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7240:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7242:	a907      	add	r1, sp, #28
   d7244:	a806      	add	r0, sp, #24
   d7246:	f7ff f9b2 	bl	d65ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d724a:	4607      	mov	r7, r0
   d724c:	2800      	cmp	r0, #0
   d724e:	f000 8091 	beq.w	d7374 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7252:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7254:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7256:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d725a:	9a07      	ldr	r2, [sp, #28]
   d725c:	4620      	mov	r0, r4
   d725e:	f7ff fb91 	bl	d6984 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7262:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7266:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7268:	f1b8 0f00 	cmp.w	r8, #0
   d726c:	d153      	bne.n	d7316 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d726e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7272:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7276:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d727a:	970f      	str	r7, [sp, #60]	; 0x3c
   d727c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7280:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7284:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7288:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d728c:	6867      	ldr	r7, [r4, #4]
   d728e:	68a3      	ldr	r3, [r4, #8]
   d7290:	429f      	cmp	r7, r3
   d7292:	da4f      	bge.n	d7334 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7294:	9b00      	ldr	r3, [sp, #0]
   d7296:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d729a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d729c:	2214      	movs	r2, #20
   d729e:	4353      	muls	r3, r2
   d72a0:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d72a4:	fb02 b201 	mla	r2, r2, r1, fp
   d72a8:	f107 0014 	add.w	r0, r7, #20
   d72ac:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d72ae:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d72b0:	f7ff fe94 	bl	d6fdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d72b4:	b1a7      	cbz	r7, d72e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d72b6:	9b03      	ldr	r3, [sp, #12]
   d72b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d72ba:	f84b 2003 	str.w	r2, [fp, r3]
   d72be:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d72c2:	80bb      	strh	r3, [r7, #4]
   d72c4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d72c8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d72ca:	f8c7 9008 	str.w	r9, [r7, #8]
   d72ce:	f8c7 900c 	str.w	r9, [r7, #12]
   d72d2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d72d6:	a911      	add	r1, sp, #68	; 0x44
   d72d8:	f107 0008 	add.w	r0, r7, #8
   d72dc:	f7ff fe67 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d72e0:	6863      	ldr	r3, [r4, #4]
   d72e2:	3301      	adds	r3, #1
   d72e4:	6063      	str	r3, [r4, #4]
   d72e6:	a811      	add	r0, sp, #68	; 0x44
   d72e8:	f7ff fcd6 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d72ec:	f1b8 0f00 	cmp.w	r8, #0
   d72f0:	d011      	beq.n	d7316 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d72f2:	a80b      	add	r0, sp, #44	; 0x2c
   d72f4:	f7ff fcd0 	bl	d6c98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d72f8:	a808      	add	r0, sp, #32
   d72fa:	f7ff fce1 	bl	d6cc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d72fe:	4628      	mov	r0, r5
   d7300:	b015      	add	sp, #84	; 0x54
   d7302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7306:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d730a:	f8da 3004 	ldr.w	r3, [sl, #4]
   d730e:	2714      	movs	r7, #20
   d7310:	fb07 4703 	mla	r7, r7, r3, r4
   d7314:	e77d      	b.n	d7212 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7316:	6823      	ldr	r3, [r4, #0]
   d7318:	9a00      	ldr	r2, [sp, #0]
   d731a:	2414      	movs	r4, #20
   d731c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7320:	9b06      	ldr	r3, [sp, #24]
   d7322:	781b      	ldrb	r3, [r3, #0]
   d7324:	bb23      	cbnz	r3, d7370 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7326:	f8da 3000 	ldr.w	r3, [sl]
   d732a:	9a01      	ldr	r2, [sp, #4]
   d732c:	4413      	add	r3, r2
   d732e:	7c1b      	ldrb	r3, [r3, #16]
   d7330:	80e3      	strh	r3, [r4, #6]
   d7332:	e01d      	b.n	d7370 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7334:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7336:	2f00      	cmp	r7, #0
   d7338:	dd0f      	ble.n	d735a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d733a:	2314      	movs	r3, #20
   d733c:	fb03 f007 	mul.w	r0, r3, r7
   d7340:	9303      	str	r3, [sp, #12]
   d7342:	f7fd fb41 	bl	d49c8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7346:	4683      	mov	fp, r0
   d7348:	b178      	cbz	r0, d736a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d734a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d734e:	9b03      	ldr	r3, [sp, #12]
   d7350:	fb03 1202 	mla	r2, r3, r2, r1
   d7354:	f7ff fe42 	bl	d6fdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7358:	e000      	b.n	d735c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d735a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d735c:	6820      	ldr	r0, [r4, #0]
   d735e:	f7fd fb3b 	bl	d49d8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7362:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7366:	60a7      	str	r7, [r4, #8]
   d7368:	e794      	b.n	d7294 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d736a:	f04f 0801 	mov.w	r8, #1
   d736e:	e7ba      	b.n	d72e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7370:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7372:	e766      	b.n	d7242 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7374:	3601      	adds	r6, #1
   d7376:	e753      	b.n	d7220 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7378:	a908      	add	r1, sp, #32
   d737a:	4628      	mov	r0, r5
   d737c:	f7ff fe17 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7380:	a90b      	add	r1, sp, #44	; 0x2c
   d7382:	f105 000c 	add.w	r0, r5, #12
   d7386:	f7ff fe12 	bl	d6fae <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d738a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d738e:	762b      	strb	r3, [r5, #24]
   d7390:	e7af      	b.n	d72f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7392:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7394:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7396:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d739a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d739e:	4631      	mov	r1, r6
   d73a0:	f106 0010 	add.w	r0, r6, #16
   d73a4:	f7ff feb8 	bl	d7118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d73a8:	b11e      	cbz	r6, d73b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d73aa:	a90f      	add	r1, sp, #60	; 0x3c
   d73ac:	4630      	mov	r0, r6
   d73ae:	f000 faae 	bl	d790e <_ZN6StringC1EOS_>
    ++size_;
   d73b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d73b4:	3301      	adds	r3, #1
   d73b6:	9309      	str	r3, [sp, #36]	; 0x24
   d73b8:	e724      	b.n	d7204 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d73bc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d73bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d73be:	4604      	mov	r4, r0
   d73c0:	4b09      	ldr	r3, [pc, #36]	; (d73e8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d73c2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d73c6:	4605      	mov	r5, r0
   d73c8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d73ca:	a801      	add	r0, sp, #4
   d73cc:	4611      	mov	r1, r2
   d73ce:	f7fc ffde 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d73d2:	aa01      	add	r2, sp, #4
   d73d4:	4631      	mov	r1, r6
   d73d6:	4620      	mov	r0, r4
   d73d8:	f7ff fee1 	bl	d719e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d73dc:	a801      	add	r0, sp, #4
   d73de:	f7fc ff95 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d73e2:	4628      	mov	r0, r5
   d73e4:	b004      	add	sp, #16
   d73e6:	bd70      	pop	{r4, r5, r6, pc}
   d73e8:	000d849c 	.word	0x000d849c

000d73ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d73ee:	460f      	mov	r7, r1
   d73f0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73f2:	492b      	ldr	r1, [pc, #172]	; (d74a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73f6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d73f8:	4616      	mov	r6, r2
   d73fa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d73fc:	f000 ff76 	bl	d82ec <strcmp>
   d7400:	bb28      	cbnz	r0, d744e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7402:	2c00      	cmp	r4, #0
   d7404:	d049      	beq.n	d749a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7406:	4629      	mov	r1, r5
   d7408:	a801      	add	r0, sp, #4
   d740a:	f7ff fddd 	bl	d6fc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d740e:	4925      	ldr	r1, [pc, #148]	; (d74a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7410:	2024      	movs	r0, #36	; 0x24
   d7412:	f000 fd87 	bl	d7f24 <_ZnwjRKSt9nothrow_t>
   d7416:	4605      	mov	r5, r0
   d7418:	b1b8      	cbz	r0, d744a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d741a:	a901      	add	r1, sp, #4
   d741c:	a804      	add	r0, sp, #16
   d741e:	f7ff fdd3 	bl	d6fc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7422:	a904      	add	r1, sp, #16
   d7424:	a807      	add	r0, sp, #28
   d7426:	f7fc ffb2 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d742a:	aa07      	add	r2, sp, #28
   d742c:	4631      	mov	r1, r6
   d742e:	4628      	mov	r0, r5
   d7430:	f7ff ffc4 	bl	d73bc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7434:	a807      	add	r0, sp, #28
   d7436:	f7fc ff69 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d743a:	4b1b      	ldr	r3, [pc, #108]	; (d74a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d743c:	602b      	str	r3, [r5, #0]
   d743e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7440:	a804      	add	r0, sp, #16
   d7442:	f7fc ff63 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7446:	4b19      	ldr	r3, [pc, #100]	; (d74ac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7448:	602b      	str	r3, [r5, #0]
   d744a:	a801      	add	r0, sp, #4
   d744c:	e01f      	b.n	d748e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d744e:	4918      	ldr	r1, [pc, #96]	; (d74b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7450:	4638      	mov	r0, r7
   d7452:	f000 ff4b 	bl	d82ec <strcmp>
   d7456:	b9f0      	cbnz	r0, d7496 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7458:	b1fc      	cbz	r4, d749a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d745a:	4629      	mov	r1, r5
   d745c:	a804      	add	r0, sp, #16
   d745e:	f7ff fdb3 	bl	d6fc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7462:	4910      	ldr	r1, [pc, #64]	; (d74a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7464:	2024      	movs	r0, #36	; 0x24
   d7466:	f000 fd5d 	bl	d7f24 <_ZnwjRKSt9nothrow_t>
   d746a:	4605      	mov	r5, r0
   d746c:	b170      	cbz	r0, d748c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d746e:	a904      	add	r1, sp, #16
   d7470:	a807      	add	r0, sp, #28
   d7472:	f7fc ff8c 	bl	d438e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7476:	aa07      	add	r2, sp, #28
   d7478:	4631      	mov	r1, r6
   d747a:	4628      	mov	r0, r5
   d747c:	f7ff ff9e 	bl	d73bc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7480:	a807      	add	r0, sp, #28
   d7482:	f7fc ff43 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7486:	4b08      	ldr	r3, [pc, #32]	; (d74a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7488:	602b      	str	r3, [r5, #0]
   d748a:	622c      	str	r4, [r5, #32]
   d748c:	a804      	add	r0, sp, #16
   d748e:	f7fc ff3d 	bl	d430c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7492:	4628      	mov	r0, r5
   d7494:	e002      	b.n	d749c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7496:	2000      	movs	r0, #0
   d7498:	e000      	b.n	d749c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d749a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d749c:	b00b      	add	sp, #44	; 0x2c
   d749e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d74a0:	000d87f5 	.word	0x000d87f5
   d74a4:	000d899c 	.word	0x000d899c
   d74a8:	000d883c 	.word	0x000d883c
   d74ac:	000d8730 	.word	0x000d8730
   d74b0:	000d87f9 	.word	0x000d87f9

000d74b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d74b4:	4b01      	ldr	r3, [pc, #4]	; (d74bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d74b6:	4a02      	ldr	r2, [pc, #8]	; (d74c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d74b8:	601a      	str	r2, [r3, #0]
   d74ba:	4770      	bx	lr
   d74bc:	2003e3d4 	.word	0x2003e3d4
   d74c0:	000d880a 	.word	0x000d880a

000d74c4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d74c4:	2200      	movs	r2, #0
   d74c6:	4611      	mov	r1, r2
   d74c8:	6840      	ldr	r0, [r0, #4]
   d74ca:	f7fd ba65 	b.w	d4998 <network_listening>

000d74ce <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d74ce:	2200      	movs	r2, #0
   d74d0:	4611      	mov	r1, r2
   d74d2:	6840      	ldr	r0, [r0, #4]
   d74d4:	f7fd ba70 	b.w	d49b8 <network_get_listen_timeout>

000d74d8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d74d8:	2200      	movs	r2, #0
   d74da:	6840      	ldr	r0, [r0, #4]
   d74dc:	f7fd ba64 	b.w	d49a8 <network_set_listen_timeout>

000d74e0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d74e0:	2200      	movs	r2, #0
   d74e2:	f081 0101 	eor.w	r1, r1, #1
   d74e6:	6840      	ldr	r0, [r0, #4]
   d74e8:	f7fd ba4e 	b.w	d4988 <network_listen>

000d74ec <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d74ec:	2300      	movs	r3, #0
   d74ee:	461a      	mov	r2, r3
   d74f0:	4619      	mov	r1, r3
   d74f2:	6840      	ldr	r0, [r0, #4]
   d74f4:	f7fd ba40 	b.w	d4978 <network_off>

000d74f8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d74f8:	2300      	movs	r3, #0
   d74fa:	461a      	mov	r2, r3
   d74fc:	4619      	mov	r1, r3
   d74fe:	6840      	ldr	r0, [r0, #4]
   d7500:	f7fd ba32 	b.w	d4968 <network_on>

000d7504 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7504:	2200      	movs	r2, #0
   d7506:	4611      	mov	r1, r2
   d7508:	6840      	ldr	r0, [r0, #4]
   d750a:	f7fd ba25 	b.w	d4958 <network_ready>

000d750e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d750e:	2200      	movs	r2, #0
   d7510:	4611      	mov	r1, r2
   d7512:	6840      	ldr	r0, [r0, #4]
   d7514:	f7fd ba10 	b.w	d4938 <network_connecting>

000d7518 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7518:	2200      	movs	r2, #0
   d751a:	2102      	movs	r1, #2
   d751c:	6840      	ldr	r0, [r0, #4]
   d751e:	f7fd ba13 	b.w	d4948 <network_disconnect>

000d7522 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7522:	2300      	movs	r3, #0
   d7524:	461a      	mov	r2, r3
   d7526:	6840      	ldr	r0, [r0, #4]
   d7528:	f7fd b9fe 	b.w	d4928 <network_connect>

000d752c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d752c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d752e:	4605      	mov	r5, r0
   d7530:	b188      	cbz	r0, d7556 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7532:	6804      	ldr	r4, [r0, #0]
   d7534:	b14c      	cbz	r4, d754a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7536:	68a3      	ldr	r3, [r4, #8]
   d7538:	b11b      	cbz	r3, d7542 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d753a:	2203      	movs	r2, #3
   d753c:	4621      	mov	r1, r4
   d753e:	4620      	mov	r0, r4
   d7540:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7542:	2110      	movs	r1, #16
   d7544:	4620      	mov	r0, r4
   d7546:	f000 fce2 	bl	d7f0e <_ZdlPvj>
   d754a:	4628      	mov	r0, r5
   d754c:	2114      	movs	r1, #20
      }
   d754e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7552:	f000 bcdc 	b.w	d7f0e <_ZdlPvj>
   d7556:	bd38      	pop	{r3, r4, r5, pc}

000d7558 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d7558:	b110      	cbz	r0, d7560 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d755a:	6803      	ldr	r3, [r0, #0]
   d755c:	685b      	ldr	r3, [r3, #4]
   d755e:	4718      	bx	r3
   d7560:	4770      	bx	lr

000d7562 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7562:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7564:	6803      	ldr	r3, [r0, #0]
   d7566:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7568:	b1bb      	cbz	r3, d759a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d756a:	6858      	ldr	r0, [r3, #4]
   d756c:	f7fd f828 	bl	d45c0 <os_thread_is_current>
   d7570:	b978      	cbnz	r0, d7592 <_ZN6ThreadD1Ev+0x30>
   d7572:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7574:	7c5a      	ldrb	r2, [r3, #17]
   d7576:	b912      	cbnz	r2, d757e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7578:	6858      	ldr	r0, [r3, #4]
   d757a:	f7fd f829 	bl	d45d0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d757e:	6823      	ldr	r3, [r4, #0]
   d7580:	6858      	ldr	r0, [r3, #4]
   d7582:	f7fd f82d 	bl	d45e0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7586:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7588:	2300      	movs	r3, #0
   d758a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d758c:	b128      	cbz	r0, d759a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d758e:	f7ff ffcd 	bl	d752c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7592:	6820      	ldr	r0, [r4, #0]
   d7594:	b108      	cbz	r0, d759a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7596:	f7ff ffc9 	bl	d752c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d759a:	4620      	mov	r0, r4
   d759c:	bd10      	pop	{r4, pc}
	...

000d75a0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d75a0:	b538      	push	{r3, r4, r5, lr}
   d75a2:	4b0c      	ldr	r3, [pc, #48]	; (d75d4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d75a4:	6003      	str	r3, [r0, #0]
   d75a6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75a8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d75ac:	b108      	cbz	r0, d75b2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d75ae:	f7fc fd76 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75b2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d75b6:	b135      	cbz	r5, d75c6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75b8:	4628      	mov	r0, r5
   d75ba:	f7ff ffd2 	bl	d7562 <_ZN6ThreadD1Ev>
   d75be:	2104      	movs	r1, #4
   d75c0:	4628      	mov	r0, r5
   d75c2:	f000 fca4 	bl	d7f0e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75c6:	68a0      	ldr	r0, [r4, #8]
   d75c8:	b108      	cbz	r0, d75ce <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d75ca:	f7ff ffc5 	bl	d7558 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d75ce:	4620      	mov	r0, r4
   d75d0:	bd38      	pop	{r3, r4, r5, pc}
   d75d2:	bf00      	nop
   d75d4:	000d886c 	.word	0x000d886c

000d75d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d75d8:	b538      	push	{r3, r4, r5, lr}
   d75da:	4c0d      	ldr	r4, [pc, #52]	; (d7610 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d75dc:	4b0d      	ldr	r3, [pc, #52]	; (d7614 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d75de:	6023      	str	r3, [r4, #0]
   d75e0:	2500      	movs	r5, #0
   d75e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d75e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d75e8:	6063      	str	r3, [r4, #4]
   d75ea:	60a5      	str	r5, [r4, #8]
   d75ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d75f4:	f7fd f804 	bl	d4600 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d75f8:	4b07      	ldr	r3, [pc, #28]	; (d7618 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d75fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d75fe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7600:	4620      	mov	r0, r4
   d7602:	4a06      	ldr	r2, [pc, #24]	; (d761c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7604:	4906      	ldr	r1, [pc, #24]	; (d7620 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d7606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d760a:	f000 bc7b 	b.w	d7f04 <__aeabi_atexit>
   d760e:	bf00      	nop
   d7610:	2003e3d8 	.word	0x2003e3d8
   d7614:	000d88a0 	.word	0x000d88a0
   d7618:	000d886c 	.word	0x000d886c
   d761c:	2003d948 	.word	0x2003d948
   d7620:	000d75a1 	.word	0x000d75a1

000d7624 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7624:	2300      	movs	r3, #0
   d7626:	461a      	mov	r2, r3
   d7628:	6840      	ldr	r0, [r0, #4]
   d762a:	f7fd b97d 	b.w	d4928 <network_connect>

000d762e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d762e:	2200      	movs	r2, #0
   d7630:	2102      	movs	r1, #2
   d7632:	6840      	ldr	r0, [r0, #4]
   d7634:	f7fd b988 	b.w	d4948 <network_disconnect>

000d7638 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7638:	2200      	movs	r2, #0
   d763a:	4611      	mov	r1, r2
   d763c:	6840      	ldr	r0, [r0, #4]
   d763e:	f7fd b97b 	b.w	d4938 <network_connecting>

000d7642 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7642:	2200      	movs	r2, #0
   d7644:	4611      	mov	r1, r2
   d7646:	6840      	ldr	r0, [r0, #4]
   d7648:	f7fd b986 	b.w	d4958 <network_ready>

000d764c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d764c:	2300      	movs	r3, #0
   d764e:	461a      	mov	r2, r3
   d7650:	4619      	mov	r1, r3
   d7652:	6840      	ldr	r0, [r0, #4]
   d7654:	f7fd b988 	b.w	d4968 <network_on>

000d7658 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7658:	2300      	movs	r3, #0
   d765a:	461a      	mov	r2, r3
   d765c:	4619      	mov	r1, r3
   d765e:	6840      	ldr	r0, [r0, #4]
   d7660:	f7fd b98a 	b.w	d4978 <network_off>

000d7664 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7664:	2200      	movs	r2, #0
   d7666:	f081 0101 	eor.w	r1, r1, #1
   d766a:	6840      	ldr	r0, [r0, #4]
   d766c:	f7fd b98c 	b.w	d4988 <network_listen>

000d7670 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7670:	2200      	movs	r2, #0
   d7672:	6840      	ldr	r0, [r0, #4]
   d7674:	f7fd b998 	b.w	d49a8 <network_set_listen_timeout>

000d7678 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7678:	2200      	movs	r2, #0
   d767a:	4611      	mov	r1, r2
   d767c:	6840      	ldr	r0, [r0, #4]
   d767e:	f7fd b99b 	b.w	d49b8 <network_get_listen_timeout>

000d7682 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7682:	2200      	movs	r2, #0
   d7684:	4611      	mov	r1, r2
   d7686:	6840      	ldr	r0, [r0, #4]
   d7688:	f7fd b986 	b.w	d4998 <network_listening>

000d768c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d768c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7690:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7692:	b095      	sub	sp, #84	; 0x54
   d7694:	4616      	mov	r6, r2
   d7696:	460d      	mov	r5, r1
   d7698:	4607      	mov	r7, r0
    IPAddress addr;
   d769a:	f7fe fd51 	bl	d6140 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d769e:	4621      	mov	r1, r4
   d76a0:	2220      	movs	r2, #32
   d76a2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76a4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d76a6:	f000 fdd8 	bl	d825a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d76aa:	2340      	movs	r3, #64	; 0x40
   d76ac:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d76ae:	4621      	mov	r1, r4
   d76b0:	466b      	mov	r3, sp
   d76b2:	aa0c      	add	r2, sp, #48	; 0x30
   d76b4:	4630      	mov	r0, r6
   d76b6:	f7fd f83b 	bl	d4730 <netdb_getaddrinfo>
    if (!r) {
   d76ba:	4604      	mov	r4, r0
   d76bc:	2800      	cmp	r0, #0
   d76be:	d144      	bne.n	d774a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d76c0:	4602      	mov	r2, r0
   d76c2:	2101      	movs	r1, #1
   d76c4:	6868      	ldr	r0, [r5, #4]
   d76c6:	f7fd f947 	bl	d4958 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76ca:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d76cc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76ce:	4622      	mov	r2, r4
   d76d0:	6868      	ldr	r0, [r5, #4]
   d76d2:	f7fd f941 	bl	d4958 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76d6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d76d8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d76da:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d76dc:	2e00      	cmp	r6, #0
   d76de:	d034      	beq.n	d774a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d76e0:	2900      	cmp	r1, #0
   d76e2:	d132      	bne.n	d774a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d76e4:	6873      	ldr	r3, [r6, #4]
   d76e6:	2b02      	cmp	r3, #2
   d76e8:	d002      	beq.n	d76f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d76ea:	2b0a      	cmp	r3, #10
   d76ec:	d009      	beq.n	d7702 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d76ee:	e02a      	b.n	d7746 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d76f0:	f1b8 0f00 	cmp.w	r8, #0
   d76f4:	d027      	beq.n	d7746 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d76f6:	6971      	ldr	r1, [r6, #20]
   d76f8:	4638      	mov	r0, r7
   d76fa:	3104      	adds	r1, #4
   d76fc:	f7fe fd4d 	bl	d619a <_ZN9IPAddressaSEPKh>
   d7700:	e020      	b.n	d7744 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7702:	f1b9 0f00 	cmp.w	r9, #0
   d7706:	d01e      	beq.n	d7746 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7708:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d770a:	2211      	movs	r2, #17
   d770c:	a801      	add	r0, sp, #4
   d770e:	f000 fda4 	bl	d825a <memset>
                    a.v = 6;
   d7712:	2306      	movs	r3, #6
   d7714:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7718:	ad01      	add	r5, sp, #4
   d771a:	f104 0308 	add.w	r3, r4, #8
   d771e:	3418      	adds	r4, #24
   d7720:	6818      	ldr	r0, [r3, #0]
   d7722:	6859      	ldr	r1, [r3, #4]
   d7724:	462a      	mov	r2, r5
   d7726:	c203      	stmia	r2!, {r0, r1}
   d7728:	3308      	adds	r3, #8
   d772a:	42a3      	cmp	r3, r4
   d772c:	4615      	mov	r5, r2
   d772e:	d1f7      	bne.n	d7720 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7730:	a901      	add	r1, sp, #4
   d7732:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7734:	ad07      	add	r5, sp, #28
   d7736:	f7fe fd11 	bl	d615c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d773a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d773c:	1d3c      	adds	r4, r7, #4
   d773e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7740:	682b      	ldr	r3, [r5, #0]
   d7742:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7744:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7746:	69f6      	ldr	r6, [r6, #28]
   d7748:	e7c8      	b.n	d76dc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d774a:	9800      	ldr	r0, [sp, #0]
   d774c:	f7fc ffe8 	bl	d4720 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7750:	4638      	mov	r0, r7
   d7752:	b015      	add	sp, #84	; 0x54
   d7754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7758 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7758:	4b02      	ldr	r3, [pc, #8]	; (d7764 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d775a:	4a03      	ldr	r2, [pc, #12]	; (d7768 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d775c:	601a      	str	r2, [r3, #0]
   d775e:	2200      	movs	r2, #0
   d7760:	605a      	str	r2, [r3, #4]
   d7762:	4770      	bx	lr
   d7764:	2003e5a8 	.word	0x2003e5a8
   d7768:	000d88a0 	.word	0x000d88a0

000d776c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d776e:	4606      	mov	r6, r0
   d7770:	460d      	mov	r5, r1
   d7772:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7774:	2400      	movs	r4, #0
  while (size--) {
   d7776:	42bd      	cmp	r5, r7
   d7778:	d00c      	beq.n	d7794 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d777a:	6833      	ldr	r3, [r6, #0]
   d777c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7780:	689b      	ldr	r3, [r3, #8]
   d7782:	4630      	mov	r0, r6
   d7784:	4798      	blx	r3
     if (chunk>=0)
   d7786:	2800      	cmp	r0, #0
   d7788:	db01      	blt.n	d778e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d778a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d778c:	e7f3      	b.n	d7776 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d778e:	2c00      	cmp	r4, #0
   d7790:	bf08      	it	eq
   d7792:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7794:	4620      	mov	r0, r4
   d7796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7798 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7798:	b570      	push	{r4, r5, r6, lr}
   d779a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d779c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d779e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d77a0:	b149      	cbz	r1, d77b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d77a2:	f000 fdad 	bl	d8300 <strlen>
   d77a6:	682b      	ldr	r3, [r5, #0]
   d77a8:	4602      	mov	r2, r0
   d77aa:	4621      	mov	r1, r4
   d77ac:	4628      	mov	r0, r5
   d77ae:	68db      	ldr	r3, [r3, #12]
    }
   d77b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d77b4:	4718      	bx	r3
    }
   d77b6:	bd70      	pop	{r4, r5, r6, pc}

000d77b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d77b8:	6803      	ldr	r3, [r0, #0]
   d77ba:	689b      	ldr	r3, [r3, #8]
   d77bc:	4718      	bx	r3

000d77be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d77be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d77c0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d77c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d77c4:	f7ff fff8 	bl	d77b8 <_ZN5Print5printEc>
  n += print('\n');
   d77c8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d77ca:	4604      	mov	r4, r0
  n += print('\n');
   d77cc:	4628      	mov	r0, r5
   d77ce:	f7ff fff3 	bl	d77b8 <_ZN5Print5printEc>
  return n;
}
   d77d2:	4420      	add	r0, r4
   d77d4:	bd38      	pop	{r3, r4, r5, pc}

000d77d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d77d6:	b530      	push	{r4, r5, lr}
   d77d8:	b08b      	sub	sp, #44	; 0x2c
   d77da:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d77dc:	2100      	movs	r1, #0
   d77de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d77e2:	2a01      	cmp	r2, #1
   d77e4:	bf98      	it	ls
   d77e6:	220a      	movls	r2, #10
   d77e8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d77ec:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d77f0:	fb05 3312 	mls	r3, r5, r2, r3
   d77f4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d77f8:	2b09      	cmp	r3, #9
   d77fa:	bf94      	ite	ls
   d77fc:	3330      	addls	r3, #48	; 0x30
   d77fe:	3337      	addhi	r3, #55	; 0x37
   d7800:	b2db      	uxtb	r3, r3
   d7802:	4621      	mov	r1, r4
   d7804:	f804 3901 	strb.w	r3, [r4], #-1
   d7808:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d780a:	2d00      	cmp	r5, #0
   d780c:	d1ee      	bne.n	d77ec <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d780e:	f7ff ffc3 	bl	d7798 <_ZN5Print5writeEPKc>
}
   d7812:	b00b      	add	sp, #44	; 0x2c
   d7814:	bd30      	pop	{r4, r5, pc}

000d7816 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d7816:	b410      	push	{r4}
  if (base == 0) return write(n);
   d7818:	b92a      	cbnz	r2, d7826 <_ZN5Print5printEmi+0x10>
   d781a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d781c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7820:	689b      	ldr	r3, [r3, #8]
   d7822:	b2c9      	uxtb	r1, r1
   d7824:	4718      	bx	r3
  else return printNumber(n, base);
   d7826:	b2d2      	uxtb	r2, r2
}
   d7828:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d782c:	f7ff bfd3 	b.w	d77d6 <_ZN5Print11printNumberEmh>

000d7830 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7830:	f7ff bff1 	b.w	d7816 <_ZN5Print5printEmi>

000d7834 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7834:	b40c      	push	{r2, r3}
   d7836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d783a:	b087      	sub	sp, #28
   d783c:	af00      	add	r7, sp, #0
   d783e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7842:	4605      	mov	r5, r0
   d7844:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7848:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d784a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d784c:	4623      	mov	r3, r4
   d784e:	464a      	mov	r2, r9
   d7850:	2114      	movs	r1, #20
   d7852:	1d38      	adds	r0, r7, #4
   d7854:	f7fd f8d0 	bl	d49f8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7858:	2813      	cmp	r0, #19
   d785a:	d805      	bhi.n	d7868 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d785c:	1d39      	adds	r1, r7, #4
   d785e:	4628      	mov	r0, r5
   d7860:	f7ff ff9a 	bl	d7798 <_ZN5Print5writeEPKc>
   d7864:	4604      	mov	r4, r0
   d7866:	e013      	b.n	d7890 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7868:	f100 0308 	add.w	r3, r0, #8
   d786c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7870:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7872:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7876:	1c41      	adds	r1, r0, #1
   d7878:	4623      	mov	r3, r4
   d787a:	464a      	mov	r2, r9
   d787c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d787e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7880:	f7fd f8ba 	bl	d49f8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7884:	4669      	mov	r1, sp
   d7886:	4628      	mov	r0, r5
   d7888:	f7ff ff86 	bl	d7798 <_ZN5Print5writeEPKc>
   d788c:	4604      	mov	r4, r0
   d788e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7890:	b11e      	cbz	r6, d789a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7892:	4628      	mov	r0, r5
   d7894:	f7ff ff93 	bl	d77be <_ZN5Print7printlnEv>
   d7898:	4404      	add	r4, r0
    return n;
}
   d789a:	4620      	mov	r0, r4
   d789c:	371c      	adds	r7, #28
   d789e:	46bd      	mov	sp, r7
   d78a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d78a4:	b002      	add	sp, #8
   d78a6:	4770      	bx	lr

000d78a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d78a8:	b510      	push	{r4, lr}
   d78aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78ac:	f7fe fb84 	bl	d5fb8 <_ZNSt14_Function_baseD1Ev>
   d78b0:	4620      	mov	r0, r4
   d78b2:	bd10      	pop	{r4, pc}

000d78b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78b4:	4803      	ldr	r0, [pc, #12]	; (d78c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d78b6:	4a04      	ldr	r2, [pc, #16]	; (d78c8 <_GLOBAL__sub_I_RGB+0x14>)
   d78b8:	4904      	ldr	r1, [pc, #16]	; (d78cc <_GLOBAL__sub_I_RGB+0x18>)
   d78ba:	2300      	movs	r3, #0
   d78bc:	6083      	str	r3, [r0, #8]
   d78be:	f000 bb21 	b.w	d7f04 <__aeabi_atexit>
   d78c2:	bf00      	nop
   d78c4:	2003e5b0 	.word	0x2003e5b0
   d78c8:	2003d948 	.word	0x2003d948
   d78cc:	000d78a9 	.word	0x000d78a9

000d78d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d78d0:	4770      	bx	lr

000d78d2 <_ZN8SPIClassD0Ev>:
   d78d2:	b510      	push	{r4, lr}
   d78d4:	2110      	movs	r1, #16
   d78d6:	4604      	mov	r4, r0
   d78d8:	f000 fb19 	bl	d7f0e <_ZdlPvj>
   d78dc:	4620      	mov	r0, r4
   d78de:	bd10      	pop	{r4, pc}

000d78e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d78e0:	b570      	push	{r4, r5, r6, lr}
   d78e2:	4b08      	ldr	r3, [pc, #32]	; (d7904 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d78e4:	6003      	str	r3, [r0, #0]
   d78e6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d78e8:	2500      	movs	r5, #0
   d78ea:	460e      	mov	r6, r1
   d78ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d78f0:	f7fc fe7e 	bl	d45f0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d78f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d78f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d78f8:	f7fc ff22 	bl	d4740 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d78fc:	60a5      	str	r5, [r4, #8]
}
   d78fe:	4620      	mov	r0, r4
   d7900:	bd70      	pop	{r4, r5, r6, pc}
   d7902:	bf00      	nop
   d7904:	000d88d4 	.word	0x000d88d4

000d7908 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7908:	7900      	ldrb	r0, [r0, #4]
   d790a:	f7fc bf21 	b.w	d4750 <HAL_SPI_Is_Enabled>

000d790e <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d790e:	2300      	movs	r3, #0
   d7910:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7912:	6043      	str	r3, [r0, #4]
	len = 0;
   d7914:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7916:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d7918:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d791a:	680c      	ldr	r4, [r1, #0]
   d791c:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d791e:	684c      	ldr	r4, [r1, #4]
   d7920:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7922:	688c      	ldr	r4, [r1, #8]
   d7924:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7926:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d7928:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d792a:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d792c:	bd10      	pop	{r4, pc}

000d792e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d792e:	b510      	push	{r4, lr}
   d7930:	4604      	mov	r4, r0
{
	free(buffer);
   d7932:	6800      	ldr	r0, [r0, #0]
   d7934:	f7fd f850 	bl	d49d8 <free>
}
   d7938:	4620      	mov	r0, r4
   d793a:	bd10      	pop	{r4, pc}

000d793c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d793c:	b510      	push	{r4, lr}
   d793e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7940:	6800      	ldr	r0, [r0, #0]
   d7942:	b108      	cbz	r0, d7948 <_ZN6String10invalidateEv+0xc>
   d7944:	f7fd f848 	bl	d49d8 <free>
	buffer = NULL;
   d7948:	2300      	movs	r3, #0
   d794a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d794c:	60a3      	str	r3, [r4, #8]
   d794e:	6063      	str	r3, [r4, #4]
   d7950:	bd10      	pop	{r4, pc}

000d7952 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7952:	b538      	push	{r3, r4, r5, lr}
   d7954:	4604      	mov	r4, r0
   d7956:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7958:	6800      	ldr	r0, [r0, #0]
   d795a:	3101      	adds	r1, #1
   d795c:	f7fd f844 	bl	d49e8 <realloc>
	if (newbuffer) {
   d7960:	b110      	cbz	r0, d7968 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7962:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7966:	2001      	movs	r0, #1
	}
	return 0;
}
   d7968:	bd38      	pop	{r3, r4, r5, pc}

000d796a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d796a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d796c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d796e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7970:	b113      	cbz	r3, d7978 <_ZN6String7reserveEj+0xe>
   d7972:	6843      	ldr	r3, [r0, #4]
   d7974:	428b      	cmp	r3, r1
   d7976:	d207      	bcs.n	d7988 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7978:	4620      	mov	r0, r4
   d797a:	f7ff ffea 	bl	d7952 <_ZN6String12changeBufferEj>
   d797e:	b120      	cbz	r0, d798a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7980:	68a3      	ldr	r3, [r4, #8]
   d7982:	b90b      	cbnz	r3, d7988 <_ZN6String7reserveEj+0x1e>
   d7984:	6822      	ldr	r2, [r4, #0]
   d7986:	7013      	strb	r3, [r2, #0]
   d7988:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d798a:	bd10      	pop	{r4, pc}

000d798c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d798c:	b570      	push	{r4, r5, r6, lr}
   d798e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7990:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7992:	4604      	mov	r4, r0
   d7994:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7996:	f7ff ffe8 	bl	d796a <_ZN6String7reserveEj>
   d799a:	b918      	cbnz	r0, d79a4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d799c:	4620      	mov	r0, r4
   d799e:	f7ff ffcd 	bl	d793c <_ZN6String10invalidateEv>
		return *this;
   d79a2:	e009      	b.n	d79b8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d79a4:	462a      	mov	r2, r5
   d79a6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d79a8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d79aa:	6820      	ldr	r0, [r4, #0]
   d79ac:	f000 fc2f 	bl	d820e <memcpy>
	buffer[len] = 0;
   d79b0:	6822      	ldr	r2, [r4, #0]
   d79b2:	68a3      	ldr	r3, [r4, #8]
   d79b4:	2100      	movs	r1, #0
   d79b6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d79b8:	4620      	mov	r0, r4
   d79ba:	bd70      	pop	{r4, r5, r6, pc}

000d79bc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d79bc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d79be:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d79c0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d79c2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d79c4:	6043      	str	r3, [r0, #4]
	len = 0;
   d79c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d79c8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d79ca:	460d      	mov	r5, r1
   d79cc:	b139      	cbz	r1, d79de <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d79ce:	4608      	mov	r0, r1
   d79d0:	f000 fc96 	bl	d8300 <strlen>
   d79d4:	4629      	mov	r1, r5
   d79d6:	4602      	mov	r2, r0
   d79d8:	4620      	mov	r0, r4
   d79da:	f7ff ffd7 	bl	d798c <_ZN6String4copyEPKcj>
}
   d79de:	4620      	mov	r0, r4
   d79e0:	bd38      	pop	{r3, r4, r5, pc}

000d79e2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d79e2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d79e4:	b510      	push	{r4, lr}
   d79e6:	460b      	mov	r3, r1
   d79e8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d79ea:	d007      	beq.n	d79fc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d79ec:	6809      	ldr	r1, [r1, #0]
   d79ee:	b119      	cbz	r1, d79f8 <_ZN6StringaSERKS_+0x16>
   d79f0:	689a      	ldr	r2, [r3, #8]
   d79f2:	f7ff ffcb 	bl	d798c <_ZN6String4copyEPKcj>
   d79f6:	e001      	b.n	d79fc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d79f8:	f7ff ffa0 	bl	d793c <_ZN6String10invalidateEv>

	return *this;
}
   d79fc:	4620      	mov	r0, r4
   d79fe:	bd10      	pop	{r4, pc}

000d7a00 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7a00:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7a02:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7a04:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7a06:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7a08:	6043      	str	r3, [r0, #4]
	len = 0;
   d7a0a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7a0c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7a0e:	f7ff ffe8 	bl	d79e2 <_ZN6StringaSERKS_>
}
   d7a12:	4620      	mov	r0, r4
   d7a14:	bd10      	pop	{r4, pc}

000d7a16 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7a16:	b538      	push	{r3, r4, r5, lr}
   d7a18:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7a1a:	460c      	mov	r4, r1
   d7a1c:	b141      	cbz	r1, d7a30 <_ZN6StringaSEPKc+0x1a>
   d7a1e:	4608      	mov	r0, r1
   d7a20:	f000 fc6e 	bl	d8300 <strlen>
   d7a24:	4621      	mov	r1, r4
   d7a26:	4602      	mov	r2, r0
   d7a28:	4628      	mov	r0, r5
   d7a2a:	f7ff ffaf 	bl	d798c <_ZN6String4copyEPKcj>
   d7a2e:	e001      	b.n	d7a34 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7a30:	f7ff ff84 	bl	d793c <_ZN6String10invalidateEv>

	return *this;
}
   d7a34:	4628      	mov	r0, r5
   d7a36:	bd38      	pop	{r3, r4, r5, pc}

000d7a38 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7a38:	4b04      	ldr	r3, [pc, #16]	; (d7a4c <_GLOBAL__sub_I_System+0x14>)
   d7a3a:	2000      	movs	r0, #0
   d7a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7a40:	7018      	strb	r0, [r3, #0]
   d7a42:	8058      	strh	r0, [r3, #2]
   d7a44:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7a46:	f7fc bf43 	b.w	d48d0 <set_system_mode>
   d7a4a:	bf00      	nop
   d7a4c:	2003e5c0 	.word	0x2003e5c0

000d7a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7a50:	4b02      	ldr	r3, [pc, #8]	; (d7a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7a52:	681a      	ldr	r2, [r3, #0]
   d7a54:	4b02      	ldr	r3, [pc, #8]	; (d7a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7a56:	601a      	str	r2, [r3, #0]
   d7a58:	4770      	bx	lr
   d7a5a:	bf00      	nop
   d7a5c:	2003d8dc 	.word	0x2003d8dc
   d7a60:	2003e5c8 	.word	0x2003e5c8

000d7a64 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7a64:	4770      	bx	lr

000d7a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a66:	7441      	strb	r1, [r0, #17]
   d7a68:	4770      	bx	lr

000d7a6a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7a6c:	7c00      	ldrb	r0, [r0, #16]
   d7a6e:	f7fc feb7 	bl	d47e0 <HAL_USART_Available_Data_For_Write>
}
   d7a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a76:	bd08      	pop	{r3, pc}

000d7a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7a78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7a7a:	7c00      	ldrb	r0, [r0, #16]
   d7a7c:	f7fc fe88 	bl	d4790 <HAL_USART_Available_Data>
}
   d7a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a84:	bd08      	pop	{r3, pc}

000d7a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7a88:	7c00      	ldrb	r0, [r0, #16]
   d7a8a:	f7fc fe91 	bl	d47b0 <HAL_USART_Peek_Data>
}
   d7a8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a92:	bf28      	it	cs
   d7a94:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7a98:	bd08      	pop	{r3, pc}

000d7a9a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7a9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7a9c:	7c00      	ldrb	r0, [r0, #16]
   d7a9e:	f7fc fe7f 	bl	d47a0 <HAL_USART_Read_Data>
}
   d7aa2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7aa6:	bf28      	it	cs
   d7aa8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7aac:	bd08      	pop	{r3, pc}

000d7aae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7aae:	7c00      	ldrb	r0, [r0, #16]
   d7ab0:	f7fc be86 	b.w	d47c0 <HAL_USART_Flush_Data>

000d7ab4 <_ZN11USARTSerialD0Ev>:
   d7ab4:	b510      	push	{r4, lr}
   d7ab6:	2114      	movs	r1, #20
   d7ab8:	4604      	mov	r4, r0
   d7aba:	f000 fa28 	bl	d7f0e <_ZdlPvj>
   d7abe:	4620      	mov	r0, r4
   d7ac0:	bd10      	pop	{r4, pc}

000d7ac2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7ac2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7ac4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7ac6:	4604      	mov	r4, r0
   d7ac8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7aca:	b925      	cbnz	r5, d7ad6 <_ZN11USARTSerial5writeEh+0x14>
   d7acc:	7c00      	ldrb	r0, [r0, #16]
   d7ace:	f7fc fe87 	bl	d47e0 <HAL_USART_Available_Data_For_Write>
   d7ad2:	2800      	cmp	r0, #0
   d7ad4:	dd05      	ble.n	d7ae2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7ad6:	4631      	mov	r1, r6
   d7ad8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7ade:	f7fc be4f 	b.w	d4780 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7ae2:	4628      	mov	r0, r5
   d7ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7ae8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7ae8:	b510      	push	{r4, lr}
   d7aea:	4604      	mov	r4, r0
   d7aec:	4608      	mov	r0, r1
   d7aee:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7af0:	2200      	movs	r2, #0
   d7af2:	6062      	str	r2, [r4, #4]
   d7af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7af8:	60a2      	str	r2, [r4, #8]
   d7afa:	4a05      	ldr	r2, [pc, #20]	; (d7b10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7afc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7afe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7b00:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7b02:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7b04:	461a      	mov	r2, r3
   d7b06:	f7fc fe2b 	bl	d4760 <HAL_USART_Init>
}
   d7b0a:	4620      	mov	r0, r4
   d7b0c:	bd10      	pop	{r4, pc}
   d7b0e:	bf00      	nop
   d7b10:	000d8910 	.word	0x000d8910

000d7b14 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7b14:	2300      	movs	r3, #0
   d7b16:	7c00      	ldrb	r0, [r0, #16]
   d7b18:	f7fc be6a 	b.w	d47f0 <HAL_USART_BeginConfig>

000d7b1c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7b1c:	2200      	movs	r2, #0
   d7b1e:	f7ff bff9 	b.w	d7b14 <_ZN11USARTSerial5beginEmm>

000d7b22 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7b22:	7c00      	ldrb	r0, [r0, #16]
   d7b24:	f7fc be24 	b.w	d4770 <HAL_USART_End>

000d7b28 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7b28:	7c00      	ldrb	r0, [r0, #16]
   d7b2a:	f7fc be51 	b.w	d47d0 <HAL_USART_Is_Enabled>
	...

000d7b30 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b30:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b32:	4d0c      	ldr	r5, [pc, #48]	; (d7b64 <_Z22__fetch_global_Serial1v+0x34>)
   d7b34:	6829      	ldr	r1, [r5, #0]
   d7b36:	f011 0401 	ands.w	r4, r1, #1
   d7b3a:	d111      	bne.n	d7b60 <_Z22__fetch_global_Serial1v+0x30>
   d7b3c:	4628      	mov	r0, r5
   d7b3e:	f7fc fabb 	bl	d40b8 <__cxa_guard_acquire>
   d7b42:	b168      	cbz	r0, d7b60 <_Z22__fetch_global_Serial1v+0x30>
   d7b44:	4a08      	ldr	r2, [pc, #32]	; (d7b68 <_Z22__fetch_global_Serial1v+0x38>)
   d7b46:	4b09      	ldr	r3, [pc, #36]	; (d7b6c <_Z22__fetch_global_Serial1v+0x3c>)
   d7b48:	4809      	ldr	r0, [pc, #36]	; (d7b70 <_Z22__fetch_global_Serial1v+0x40>)
   d7b4a:	4621      	mov	r1, r4
   d7b4c:	f7ff ffcc 	bl	d7ae8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7b50:	4628      	mov	r0, r5
   d7b52:	f7fc fab6 	bl	d40c2 <__cxa_guard_release>
   d7b56:	4a07      	ldr	r2, [pc, #28]	; (d7b74 <_Z22__fetch_global_Serial1v+0x44>)
   d7b58:	4907      	ldr	r1, [pc, #28]	; (d7b78 <_Z22__fetch_global_Serial1v+0x48>)
   d7b5a:	4805      	ldr	r0, [pc, #20]	; (d7b70 <_Z22__fetch_global_Serial1v+0x40>)
   d7b5c:	f000 f9d2 	bl	d7f04 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b60:	4803      	ldr	r0, [pc, #12]	; (d7b70 <_Z22__fetch_global_Serial1v+0x40>)
   d7b62:	bd38      	pop	{r3, r4, r5, pc}
   d7b64:	2003e664 	.word	0x2003e664
   d7b68:	2003e668 	.word	0x2003e668
   d7b6c:	2003e5e0 	.word	0x2003e5e0
   d7b70:	2003e5cc 	.word	0x2003e5cc
   d7b74:	2003d948 	.word	0x2003d948
   d7b78:	000d7a65 	.word	0x000d7a65

000d7b7c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b7c:	7441      	strb	r1, [r0, #17]
   d7b7e:	4770      	bx	lr

000d7b80 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b80:	4770      	bx	lr

000d7b82 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7b82:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b84:	2100      	movs	r1, #0
   d7b86:	7c00      	ldrb	r0, [r0, #16]
   d7b88:	f7fc fe62 	bl	d4850 <HAL_USB_USART_Receive_Data>
}
   d7b8c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b90:	bf28      	it	cs
   d7b92:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7b96:	bd08      	pop	{r3, pc}

000d7b98 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7b98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b9a:	2101      	movs	r1, #1
   d7b9c:	7c00      	ldrb	r0, [r0, #16]
   d7b9e:	f7fc fe57 	bl	d4850 <HAL_USB_USART_Receive_Data>
}
   d7ba2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ba6:	bf28      	it	cs
   d7ba8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7bac:	bd08      	pop	{r3, pc}

000d7bae <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7bae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7bb0:	7c00      	ldrb	r0, [r0, #16]
   d7bb2:	f7fc fe45 	bl	d4840 <HAL_USB_USART_Available_Data_For_Write>
}
   d7bb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bba:	bd08      	pop	{r3, pc}

000d7bbc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7bbc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7bbe:	7c00      	ldrb	r0, [r0, #16]
   d7bc0:	f7fc fe36 	bl	d4830 <HAL_USB_USART_Available_Data>
}
   d7bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bc8:	bd08      	pop	{r3, pc}

000d7bca <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7bca:	7c00      	ldrb	r0, [r0, #16]
   d7bcc:	f7fc be50 	b.w	d4870 <HAL_USB_USART_Flush_Data>

000d7bd0 <_ZN9USBSerialD0Ev>:
   d7bd0:	b510      	push	{r4, lr}
   d7bd2:	2114      	movs	r1, #20
   d7bd4:	4604      	mov	r4, r0
   d7bd6:	f000 f99a 	bl	d7f0e <_ZdlPvj>
   d7bda:	4620      	mov	r0, r4
   d7bdc:	bd10      	pop	{r4, pc}

000d7bde <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7bde:	b538      	push	{r3, r4, r5, lr}
   d7be0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7be2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7be4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7be6:	f7fc fe2b 	bl	d4840 <HAL_USB_USART_Available_Data_For_Write>
   d7bea:	2800      	cmp	r0, #0
   d7bec:	dc01      	bgt.n	d7bf2 <_ZN9USBSerial5writeEh+0x14>
   d7bee:	7c60      	ldrb	r0, [r4, #17]
   d7bf0:	b128      	cbz	r0, d7bfe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7bf2:	4629      	mov	r1, r5
   d7bf4:	7c20      	ldrb	r0, [r4, #16]
   d7bf6:	f7fc fe33 	bl	d4860 <HAL_USB_USART_Send_Data>
   d7bfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7bfe:	bd38      	pop	{r3, r4, r5, pc}

000d7c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7c00:	b510      	push	{r4, lr}
   d7c02:	4604      	mov	r4, r0
   d7c04:	2300      	movs	r3, #0
   d7c06:	6063      	str	r3, [r4, #4]
   d7c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7c0c:	60a3      	str	r3, [r4, #8]
   d7c0e:	4b05      	ldr	r3, [pc, #20]	; (d7c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7c10:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7c12:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7c14:	4608      	mov	r0, r1
{
  _serial = serial;
   d7c16:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7c18:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7c1a:	4611      	mov	r1, r2
   d7c1c:	f7fc fdf0 	bl	d4800 <HAL_USB_USART_Init>
}
   d7c20:	4620      	mov	r0, r4
   d7c22:	bd10      	pop	{r4, pc}
   d7c24:	000d8940 	.word	0x000d8940

000d7c28 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7c28:	2200      	movs	r2, #0
   d7c2a:	7c00      	ldrb	r0, [r0, #16]
   d7c2c:	f7fc bdf0 	b.w	d4810 <HAL_USB_USART_Begin>

000d7c30 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7c30:	7c00      	ldrb	r0, [r0, #16]
   d7c32:	f7fc bdf5 	b.w	d4820 <HAL_USB_USART_End>

000d7c36 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c36:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7c38:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c3a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7c3c:	2100      	movs	r1, #0
   d7c3e:	f000 fb0c 	bl	d825a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7c42:	4620      	mov	r0, r4
   d7c44:	bd10      	pop	{r4, pc}
	...

000d7c48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7c48:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c4a:	4d0e      	ldr	r5, [pc, #56]	; (d7c84 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7c4c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7c4e:	a801      	add	r0, sp, #4
   d7c50:	f7ff fff1 	bl	d7c36 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c54:	6829      	ldr	r1, [r5, #0]
   d7c56:	f011 0401 	ands.w	r4, r1, #1
   d7c5a:	d110      	bne.n	d7c7e <_Z16_fetch_usbserialv+0x36>
   d7c5c:	4628      	mov	r0, r5
   d7c5e:	f7fc fa2b 	bl	d40b8 <__cxa_guard_acquire>
   d7c62:	b160      	cbz	r0, d7c7e <_Z16_fetch_usbserialv+0x36>
   d7c64:	aa01      	add	r2, sp, #4
   d7c66:	4621      	mov	r1, r4
   d7c68:	4807      	ldr	r0, [pc, #28]	; (d7c88 <_Z16_fetch_usbserialv+0x40>)
   d7c6a:	f7ff ffc9 	bl	d7c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c6e:	4628      	mov	r0, r5
   d7c70:	f7fc fa27 	bl	d40c2 <__cxa_guard_release>
   d7c74:	4a05      	ldr	r2, [pc, #20]	; (d7c8c <_Z16_fetch_usbserialv+0x44>)
   d7c76:	4906      	ldr	r1, [pc, #24]	; (d7c90 <_Z16_fetch_usbserialv+0x48>)
   d7c78:	4803      	ldr	r0, [pc, #12]	; (d7c88 <_Z16_fetch_usbserialv+0x40>)
   d7c7a:	f000 f943 	bl	d7f04 <__aeabi_atexit>
	return _usbserial;
}
   d7c7e:	4802      	ldr	r0, [pc, #8]	; (d7c88 <_Z16_fetch_usbserialv+0x40>)
   d7c80:	b007      	add	sp, #28
   d7c82:	bd30      	pop	{r4, r5, pc}
   d7c84:	2003e6ec 	.word	0x2003e6ec
   d7c88:	2003e6f0 	.word	0x2003e6f0
   d7c8c:	2003d948 	.word	0x2003d948
   d7c90:	000d7b81 	.word	0x000d7b81

000d7c94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7c94:	2200      	movs	r2, #0
   d7c96:	4611      	mov	r1, r2
   d7c98:	6840      	ldr	r0, [r0, #4]
   d7c9a:	f7fc be5d 	b.w	d4958 <network_ready>

000d7c9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c9e:	2200      	movs	r2, #0
   d7ca0:	4611      	mov	r1, r2
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	f7fc be78 	b.w	d4998 <network_listening>

000d7ca8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ca8:	2200      	movs	r2, #0
   d7caa:	4611      	mov	r1, r2
   d7cac:	6840      	ldr	r0, [r0, #4]
   d7cae:	f7fc be83 	b.w	d49b8 <network_get_listen_timeout>

000d7cb2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7cb2:	2200      	movs	r2, #0
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	f7fc be77 	b.w	d49a8 <network_set_listen_timeout>

000d7cba <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7cba:	2200      	movs	r2, #0
   d7cbc:	f081 0101 	eor.w	r1, r1, #1
   d7cc0:	6840      	ldr	r0, [r0, #4]
   d7cc2:	f7fc be61 	b.w	d4988 <network_listen>

000d7cc6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7cc6:	2300      	movs	r3, #0
   d7cc8:	461a      	mov	r2, r3
   d7cca:	4619      	mov	r1, r3
   d7ccc:	6840      	ldr	r0, [r0, #4]
   d7cce:	f7fc be53 	b.w	d4978 <network_off>

000d7cd2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7cd2:	2300      	movs	r3, #0
   d7cd4:	461a      	mov	r2, r3
   d7cd6:	4619      	mov	r1, r3
   d7cd8:	6840      	ldr	r0, [r0, #4]
   d7cda:	f7fc be45 	b.w	d4968 <network_on>

000d7cde <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7cde:	2200      	movs	r2, #0
   d7ce0:	4611      	mov	r1, r2
   d7ce2:	6840      	ldr	r0, [r0, #4]
   d7ce4:	f7fc be28 	b.w	d4938 <network_connecting>

000d7ce8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ce8:	2200      	movs	r2, #0
   d7cea:	2102      	movs	r1, #2
   d7cec:	6840      	ldr	r0, [r0, #4]
   d7cee:	f7fc be2b 	b.w	d4948 <network_disconnect>

000d7cf2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7cf2:	2300      	movs	r3, #0
   d7cf4:	461a      	mov	r2, r3
   d7cf6:	6840      	ldr	r0, [r0, #4]
   d7cf8:	f7fc be16 	b.w	d4928 <network_connect>

000d7cfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7cfc:	4b02      	ldr	r3, [pc, #8]	; (d7d08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7cfe:	2204      	movs	r2, #4
   d7d00:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7d02:	4a02      	ldr	r2, [pc, #8]	; (d7d0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7d04:	601a      	str	r2, [r3, #0]
   d7d06:	4770      	bx	lr
   d7d08:	2003e704 	.word	0x2003e704
   d7d0c:	000d8970 	.word	0x000d8970

000d7d10 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7d10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7d12:	4b0c      	ldr	r3, [pc, #48]	; (d7d44 <serialEventRun+0x34>)
   d7d14:	b133      	cbz	r3, d7d24 <serialEventRun+0x14>
   d7d16:	f7ff ff97 	bl	d7c48 <_Z16_fetch_usbserialv>
   d7d1a:	6803      	ldr	r3, [r0, #0]
   d7d1c:	691b      	ldr	r3, [r3, #16]
   d7d1e:	4798      	blx	r3
   d7d20:	2800      	cmp	r0, #0
   d7d22:	dc09      	bgt.n	d7d38 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7d24:	4b08      	ldr	r3, [pc, #32]	; (d7d48 <serialEventRun+0x38>)
   d7d26:	b163      	cbz	r3, d7d42 <serialEventRun+0x32>
   d7d28:	f7ff ff02 	bl	d7b30 <_Z22__fetch_global_Serial1v>
   d7d2c:	6803      	ldr	r3, [r0, #0]
   d7d2e:	691b      	ldr	r3, [r3, #16]
   d7d30:	4798      	blx	r3
   d7d32:	2800      	cmp	r0, #0
   d7d34:	dc03      	bgt.n	d7d3e <serialEventRun+0x2e>
   d7d36:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7d38:	f3af 8000 	nop.w
   d7d3c:	e7f2      	b.n	d7d24 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7d3e:	f3af 8000 	nop.w
   d7d42:	bd08      	pop	{r3, pc}
	...

000d7d4c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7d4c:	b508      	push	{r3, lr}
	serialEventRun();
   d7d4e:	f7ff ffdf 	bl	d7d10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7d52:	f7fc fc7d 	bl	d4650 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7d56:	4b01      	ldr	r3, [pc, #4]	; (d7d5c <_post_loop+0x10>)
   d7d58:	6018      	str	r0, [r3, #0]
   d7d5a:	bd08      	pop	{r3, pc}
   d7d5c:	2003e710 	.word	0x2003e710

000d7d60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7d60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d62:	2300      	movs	r3, #0
   d7d64:	9300      	str	r3, [sp, #0]
   d7d66:	461a      	mov	r2, r3
   d7d68:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d6c:	f7fc fdca 	bl	d4904 <system_ctrl_set_result>
}
   d7d70:	b003      	add	sp, #12
   d7d72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7d78 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7d78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7d7a:	8843      	ldrh	r3, [r0, #2]
   d7d7c:	2b0a      	cmp	r3, #10
   d7d7e:	d008      	beq.n	d7d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7d80:	2b50      	cmp	r3, #80	; 0x50
   d7d82:	d109      	bne.n	d7d98 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7d84:	4b09      	ldr	r3, [pc, #36]	; (d7dac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7d86:	681b      	ldr	r3, [r3, #0]
   d7d88:	b13b      	cbz	r3, d7d9a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7d8a:	b003      	add	sp, #12
   d7d8c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7d90:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7d92:	f7ff ffe5 	bl	d7d60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7d96:	e006      	b.n	d7da6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7d98:	2300      	movs	r3, #0
   d7d9a:	9300      	str	r3, [sp, #0]
   d7d9c:	461a      	mov	r2, r3
   d7d9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7da2:	f7fc fdaf 	bl	d4904 <system_ctrl_set_result>
        break;
    }
}
   d7da6:	b003      	add	sp, #12
   d7da8:	f85d fb04 	ldr.w	pc, [sp], #4
   d7dac:	2003e70c 	.word	0x2003e70c

000d7db0 <module_user_init_hook>:

void module_user_init_hook()
{
   d7db0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7db2:	f7fc fc3d 	bl	d4630 <HAL_RNG_GetRandomNumber>
   d7db6:	4604      	mov	r4, r0
    srand(seed);
   d7db8:	f000 fa58 	bl	d826c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7dbc:	4b07      	ldr	r3, [pc, #28]	; (d7ddc <module_user_init_hook+0x2c>)
   d7dbe:	b113      	cbz	r3, d7dc6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7dc6:	2100      	movs	r1, #0
   d7dc8:	4804      	ldr	r0, [pc, #16]	; (d7ddc <module_user_init_hook+0x2c>)
   d7dca:	f7fc fda5 	bl	d4918 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7dce:	2100      	movs	r1, #0
   d7dd0:	4803      	ldr	r0, [pc, #12]	; (d7de0 <module_user_init_hook+0x30>)
}
   d7dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7dd6:	f7fc bd8b 	b.w	d48f0 <system_ctrl_set_app_request_handler>
   d7dda:	bf00      	nop
   d7ddc:	00000000 	.word	0x00000000
   d7de0:	000d7d79 	.word	0x000d7d79

000d7de4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7de4:	b510      	push	{r4, lr}
   d7de6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7de8:	480f      	ldr	r0, [pc, #60]	; (d7e28 <pinAvailable+0x44>)
   d7dea:	f7ff fd8d 	bl	d7908 <_ZN8SPIClass9isEnabledEv>
   d7dee:	b128      	cbz	r0, d7dfc <pinAvailable+0x18>
   d7df0:	f1a4 030b 	sub.w	r3, r4, #11
   d7df4:	2b02      	cmp	r3, #2
   d7df6:	d801      	bhi.n	d7dfc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7df8:	2000      	movs	r0, #0
   d7dfa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7dfc:	f000 f840 	bl	d7e80 <_Z19__fetch_global_Wirev>
   d7e00:	f7fe f960 	bl	d60c4 <_ZN7TwoWire9isEnabledEv>
   d7e04:	b108      	cbz	r0, d7e0a <pinAvailable+0x26>
   d7e06:	2c01      	cmp	r4, #1
   d7e08:	d9f6      	bls.n	d7df8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7e0a:	f7ff fe91 	bl	d7b30 <_Z22__fetch_global_Serial1v>
   d7e0e:	f7ff fe8b 	bl	d7b28 <_ZN11USARTSerial9isEnabledEv>
   d7e12:	b118      	cbz	r0, d7e1c <pinAvailable+0x38>
   d7e14:	f1a4 0309 	sub.w	r3, r4, #9
   d7e18:	2b01      	cmp	r3, #1
   d7e1a:	d9ed      	bls.n	d7df8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7e1c:	2c23      	cmp	r4, #35	; 0x23
   d7e1e:	bf8c      	ite	hi
   d7e20:	2000      	movhi	r0, #0
   d7e22:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7e24:	bd10      	pop	{r4, pc}
   d7e26:	bf00      	nop
   d7e28:	2003e72c 	.word	0x2003e72c

000d7e2c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7e2c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7e2e:	b538      	push	{r3, r4, r5, lr}
   d7e30:	4604      	mov	r4, r0
   d7e32:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7e34:	d80a      	bhi.n	d7e4c <pinMode+0x20>
   d7e36:	29ff      	cmp	r1, #255	; 0xff
   d7e38:	d008      	beq.n	d7e4c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7e3a:	f7ff ffd3 	bl	d7de4 <pinAvailable>
   d7e3e:	b128      	cbz	r0, d7e4c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7e40:	4629      	mov	r1, r5
   d7e42:	4620      	mov	r0, r4
}
   d7e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7e48:	f7fc bc12 	b.w	d4670 <HAL_Pin_Mode>
   d7e4c:	bd38      	pop	{r3, r4, r5, pc}

000d7e4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7e4e:	b538      	push	{r3, r4, r5, lr}
   d7e50:	4604      	mov	r4, r0
   d7e52:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e54:	f7fc fc14 	bl	d4680 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7e58:	28ff      	cmp	r0, #255	; 0xff
   d7e5a:	d010      	beq.n	d7e7e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7e5c:	2806      	cmp	r0, #6
   d7e5e:	d804      	bhi.n	d7e6a <digitalWrite+0x1c>
   d7e60:	234d      	movs	r3, #77	; 0x4d
   d7e62:	fa23 f000 	lsr.w	r0, r3, r0
   d7e66:	07c3      	lsls	r3, r0, #31
   d7e68:	d409      	bmi.n	d7e7e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7e6a:	4620      	mov	r0, r4
   d7e6c:	f7ff ffba 	bl	d7de4 <pinAvailable>
   d7e70:	b128      	cbz	r0, d7e7e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7e72:	4629      	mov	r1, r5
   d7e74:	4620      	mov	r0, r4
}
   d7e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7e7a:	f7fc bc09 	b.w	d4690 <HAL_GPIO_Write>
   d7e7e:	bd38      	pop	{r3, r4, r5, pc}

000d7e80 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7e80:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7e82:	4d0b      	ldr	r5, [pc, #44]	; (d7eb0 <_Z19__fetch_global_Wirev+0x30>)
   d7e84:	6829      	ldr	r1, [r5, #0]
   d7e86:	f011 0401 	ands.w	r4, r1, #1
   d7e8a:	d10f      	bne.n	d7eac <_Z19__fetch_global_Wirev+0x2c>
   d7e8c:	4628      	mov	r0, r5
   d7e8e:	f7fc f913 	bl	d40b8 <__cxa_guard_acquire>
   d7e92:	b158      	cbz	r0, d7eac <_Z19__fetch_global_Wirev+0x2c>
   d7e94:	4621      	mov	r1, r4
   d7e96:	4807      	ldr	r0, [pc, #28]	; (d7eb4 <_Z19__fetch_global_Wirev+0x34>)
   d7e98:	f7fe f902 	bl	d60a0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7e9c:	4628      	mov	r0, r5
   d7e9e:	f7fc f910 	bl	d40c2 <__cxa_guard_release>
   d7ea2:	4a05      	ldr	r2, [pc, #20]	; (d7eb8 <_Z19__fetch_global_Wirev+0x38>)
   d7ea4:	4905      	ldr	r1, [pc, #20]	; (d7ebc <_Z19__fetch_global_Wirev+0x3c>)
   d7ea6:	4803      	ldr	r0, [pc, #12]	; (d7eb4 <_Z19__fetch_global_Wirev+0x34>)
   d7ea8:	f000 f82c 	bl	d7f04 <__aeabi_atexit>
	return wire;
}
   d7eac:	4801      	ldr	r0, [pc, #4]	; (d7eb4 <_Z19__fetch_global_Wirev+0x34>)
   d7eae:	bd38      	pop	{r3, r4, r5, pc}
   d7eb0:	2003e714 	.word	0x2003e714
   d7eb4:	2003e718 	.word	0x2003e718
   d7eb8:	2003d948 	.word	0x2003d948
   d7ebc:	000d6049 	.word	0x000d6049

000d7ec0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7ec0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7ec2:	4c0c      	ldr	r4, [pc, #48]	; (d7ef4 <_GLOBAL__sub_I_SPI+0x34>)
   d7ec4:	4e0c      	ldr	r6, [pc, #48]	; (d7ef8 <_GLOBAL__sub_I_SPI+0x38>)
   d7ec6:	4d0d      	ldr	r5, [pc, #52]	; (d7efc <_GLOBAL__sub_I_SPI+0x3c>)
   d7ec8:	2100      	movs	r1, #0
   d7eca:	4620      	mov	r0, r4
   d7ecc:	f7ff fd08 	bl	d78e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7ed0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7ed2:	4c0b      	ldr	r4, [pc, #44]	; (d7f00 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7ed4:	4632      	mov	r2, r6
   d7ed6:	4629      	mov	r1, r5
   d7ed8:	f000 f814 	bl	d7f04 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7edc:	2101      	movs	r1, #1
   d7ede:	4620      	mov	r0, r4
   d7ee0:	f7ff fcfe 	bl	d78e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7ee4:	4632      	mov	r2, r6
   d7ee6:	4629      	mov	r1, r5
   d7ee8:	4620      	mov	r0, r4
   d7eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7eee:	f000 b809 	b.w	d7f04 <__aeabi_atexit>
   d7ef2:	bf00      	nop
   d7ef4:	2003e72c 	.word	0x2003e72c
   d7ef8:	2003d948 	.word	0x2003d948
   d7efc:	000d78d1 	.word	0x000d78d1
   d7f00:	2003e73c 	.word	0x2003e73c

000d7f04 <__aeabi_atexit>:
   d7f04:	460b      	mov	r3, r1
   d7f06:	4601      	mov	r1, r0
   d7f08:	4618      	mov	r0, r3
   d7f0a:	f000 b963 	b.w	d81d4 <__cxa_atexit>

000d7f0e <_ZdlPvj>:
   d7f0e:	f7fc b8c4 	b.w	d409a <_ZdlPv>
	...

000d7f14 <_ZSt15get_new_handlerv>:
   d7f14:	4b02      	ldr	r3, [pc, #8]	; (d7f20 <_ZSt15get_new_handlerv+0xc>)
   d7f16:	6818      	ldr	r0, [r3, #0]
   d7f18:	f3bf 8f5f 	dmb	sy
   d7f1c:	4770      	bx	lr
   d7f1e:	bf00      	nop
   d7f20:	2003e74c 	.word	0x2003e74c

000d7f24 <_ZnwjRKSt9nothrow_t>:
   d7f24:	b510      	push	{r4, lr}
   d7f26:	2800      	cmp	r0, #0
   d7f28:	bf14      	ite	ne
   d7f2a:	4604      	movne	r4, r0
   d7f2c:	2401      	moveq	r4, #1
   d7f2e:	4620      	mov	r0, r4
   d7f30:	f7fc fd4a 	bl	d49c8 <malloc>
   d7f34:	b920      	cbnz	r0, d7f40 <_ZnwjRKSt9nothrow_t+0x1c>
   d7f36:	f7ff ffed 	bl	d7f14 <_ZSt15get_new_handlerv>
   d7f3a:	b108      	cbz	r0, d7f40 <_ZnwjRKSt9nothrow_t+0x1c>
   d7f3c:	4780      	blx	r0
   d7f3e:	e7f6      	b.n	d7f2e <_ZnwjRKSt9nothrow_t+0xa>
   d7f40:	bd10      	pop	{r4, pc}
	...

000d7f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7f44:	4b24      	ldr	r3, [pc, #144]	; (d7fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7f46:	681a      	ldr	r2, [r3, #0]
   d7f48:	07d0      	lsls	r0, r2, #31
   d7f4a:	bf5c      	itt	pl
   d7f4c:	2201      	movpl	r2, #1
   d7f4e:	601a      	strpl	r2, [r3, #0]
   d7f50:	4b22      	ldr	r3, [pc, #136]	; (d7fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7f52:	681a      	ldr	r2, [r3, #0]
   d7f54:	07d1      	lsls	r1, r2, #31
   d7f56:	bf5c      	itt	pl
   d7f58:	2201      	movpl	r2, #1
   d7f5a:	601a      	strpl	r2, [r3, #0]
   d7f5c:	4b20      	ldr	r3, [pc, #128]	; (d7fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7f5e:	681a      	ldr	r2, [r3, #0]
   d7f60:	07d2      	lsls	r2, r2, #31
   d7f62:	bf5c      	itt	pl
   d7f64:	2201      	movpl	r2, #1
   d7f66:	601a      	strpl	r2, [r3, #0]
   d7f68:	4b1e      	ldr	r3, [pc, #120]	; (d7fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7f6a:	681a      	ldr	r2, [r3, #0]
   d7f6c:	07d0      	lsls	r0, r2, #31
   d7f6e:	bf5c      	itt	pl
   d7f70:	2201      	movpl	r2, #1
   d7f72:	601a      	strpl	r2, [r3, #0]
   d7f74:	4b1c      	ldr	r3, [pc, #112]	; (d7fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7f76:	681a      	ldr	r2, [r3, #0]
   d7f78:	07d1      	lsls	r1, r2, #31
   d7f7a:	bf5c      	itt	pl
   d7f7c:	2201      	movpl	r2, #1
   d7f7e:	601a      	strpl	r2, [r3, #0]
   d7f80:	4b1a      	ldr	r3, [pc, #104]	; (d7fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7f82:	681a      	ldr	r2, [r3, #0]
   d7f84:	07d2      	lsls	r2, r2, #31
   d7f86:	bf5c      	itt	pl
   d7f88:	2201      	movpl	r2, #1
   d7f8a:	601a      	strpl	r2, [r3, #0]
   d7f8c:	4b18      	ldr	r3, [pc, #96]	; (d7ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7f8e:	681a      	ldr	r2, [r3, #0]
   d7f90:	07d0      	lsls	r0, r2, #31
   d7f92:	bf5c      	itt	pl
   d7f94:	2201      	movpl	r2, #1
   d7f96:	601a      	strpl	r2, [r3, #0]
   d7f98:	4b16      	ldr	r3, [pc, #88]	; (d7ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7f9a:	681a      	ldr	r2, [r3, #0]
   d7f9c:	07d1      	lsls	r1, r2, #31
   d7f9e:	bf5c      	itt	pl
   d7fa0:	2201      	movpl	r2, #1
   d7fa2:	601a      	strpl	r2, [r3, #0]
   d7fa4:	4b14      	ldr	r3, [pc, #80]	; (d7ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7fa6:	681a      	ldr	r2, [r3, #0]
   d7fa8:	07d2      	lsls	r2, r2, #31
   d7faa:	bf5c      	itt	pl
   d7fac:	2201      	movpl	r2, #1
   d7fae:	601a      	strpl	r2, [r3, #0]
   d7fb0:	4b12      	ldr	r3, [pc, #72]	; (d7ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7fb2:	681a      	ldr	r2, [r3, #0]
   d7fb4:	07d0      	lsls	r0, r2, #31
   d7fb6:	bf5c      	itt	pl
   d7fb8:	2201      	movpl	r2, #1
   d7fba:	601a      	strpl	r2, [r3, #0]
   d7fbc:	4b10      	ldr	r3, [pc, #64]	; (d8000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7fbe:	681a      	ldr	r2, [r3, #0]
   d7fc0:	07d1      	lsls	r1, r2, #31
   d7fc2:	bf5c      	itt	pl
   d7fc4:	2201      	movpl	r2, #1
   d7fc6:	601a      	strpl	r2, [r3, #0]
   d7fc8:	4b0e      	ldr	r3, [pc, #56]	; (d8004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7fca:	681a      	ldr	r2, [r3, #0]
   d7fcc:	07d2      	lsls	r2, r2, #31
   d7fce:	bf5c      	itt	pl
   d7fd0:	2201      	movpl	r2, #1
   d7fd2:	601a      	strpl	r2, [r3, #0]
   d7fd4:	4770      	bx	lr
   d7fd6:	bf00      	nop
   d7fd8:	2003e77c 	.word	0x2003e77c
   d7fdc:	2003e778 	.word	0x2003e778
   d7fe0:	2003e774 	.word	0x2003e774
   d7fe4:	2003e770 	.word	0x2003e770
   d7fe8:	2003e76c 	.word	0x2003e76c
   d7fec:	2003e768 	.word	0x2003e768
   d7ff0:	2003e764 	.word	0x2003e764
   d7ff4:	2003e760 	.word	0x2003e760
   d7ff8:	2003e75c 	.word	0x2003e75c
   d7ffc:	2003e758 	.word	0x2003e758
   d8000:	2003e754 	.word	0x2003e754
   d8004:	2003e750 	.word	0x2003e750

000d8008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8008:	4b18      	ldr	r3, [pc, #96]	; (d806c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d800a:	681a      	ldr	r2, [r3, #0]
   d800c:	07d1      	lsls	r1, r2, #31
   d800e:	bf5c      	itt	pl
   d8010:	2201      	movpl	r2, #1
   d8012:	601a      	strpl	r2, [r3, #0]
   d8014:	4b16      	ldr	r3, [pc, #88]	; (d8070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8016:	681a      	ldr	r2, [r3, #0]
   d8018:	07d2      	lsls	r2, r2, #31
   d801a:	bf5c      	itt	pl
   d801c:	2201      	movpl	r2, #1
   d801e:	601a      	strpl	r2, [r3, #0]
   d8020:	4b14      	ldr	r3, [pc, #80]	; (d8074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8022:	681a      	ldr	r2, [r3, #0]
   d8024:	07d0      	lsls	r0, r2, #31
   d8026:	bf5c      	itt	pl
   d8028:	2201      	movpl	r2, #1
   d802a:	601a      	strpl	r2, [r3, #0]
   d802c:	4b12      	ldr	r3, [pc, #72]	; (d8078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d802e:	681a      	ldr	r2, [r3, #0]
   d8030:	07d1      	lsls	r1, r2, #31
   d8032:	bf5c      	itt	pl
   d8034:	2201      	movpl	r2, #1
   d8036:	601a      	strpl	r2, [r3, #0]
   d8038:	4b10      	ldr	r3, [pc, #64]	; (d807c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d803a:	681a      	ldr	r2, [r3, #0]
   d803c:	07d2      	lsls	r2, r2, #31
   d803e:	bf5c      	itt	pl
   d8040:	2201      	movpl	r2, #1
   d8042:	601a      	strpl	r2, [r3, #0]
   d8044:	4b0e      	ldr	r3, [pc, #56]	; (d8080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8046:	681a      	ldr	r2, [r3, #0]
   d8048:	07d0      	lsls	r0, r2, #31
   d804a:	bf5c      	itt	pl
   d804c:	2201      	movpl	r2, #1
   d804e:	601a      	strpl	r2, [r3, #0]
   d8050:	4b0c      	ldr	r3, [pc, #48]	; (d8084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8052:	681a      	ldr	r2, [r3, #0]
   d8054:	07d1      	lsls	r1, r2, #31
   d8056:	bf5c      	itt	pl
   d8058:	2201      	movpl	r2, #1
   d805a:	601a      	strpl	r2, [r3, #0]
   d805c:	4b0a      	ldr	r3, [pc, #40]	; (d8088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d805e:	681a      	ldr	r2, [r3, #0]
   d8060:	07d2      	lsls	r2, r2, #31
   d8062:	bf5c      	itt	pl
   d8064:	2201      	movpl	r2, #1
   d8066:	601a      	strpl	r2, [r3, #0]
   d8068:	4770      	bx	lr
   d806a:	bf00      	nop
   d806c:	2003e79c 	.word	0x2003e79c
   d8070:	2003e798 	.word	0x2003e798
   d8074:	2003e794 	.word	0x2003e794
   d8078:	2003e790 	.word	0x2003e790
   d807c:	2003e78c 	.word	0x2003e78c
   d8080:	2003e788 	.word	0x2003e788
   d8084:	2003e784 	.word	0x2003e784
   d8088:	2003e780 	.word	0x2003e780

000d808c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d808c:	4b18      	ldr	r3, [pc, #96]	; (d80f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d808e:	681a      	ldr	r2, [r3, #0]
   d8090:	07d1      	lsls	r1, r2, #31
   d8092:	bf5c      	itt	pl
   d8094:	2201      	movpl	r2, #1
   d8096:	601a      	strpl	r2, [r3, #0]
   d8098:	4b16      	ldr	r3, [pc, #88]	; (d80f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d809a:	681a      	ldr	r2, [r3, #0]
   d809c:	07d2      	lsls	r2, r2, #31
   d809e:	bf5c      	itt	pl
   d80a0:	2201      	movpl	r2, #1
   d80a2:	601a      	strpl	r2, [r3, #0]
   d80a4:	4b14      	ldr	r3, [pc, #80]	; (d80f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d80a6:	681a      	ldr	r2, [r3, #0]
   d80a8:	07d0      	lsls	r0, r2, #31
   d80aa:	bf5c      	itt	pl
   d80ac:	2201      	movpl	r2, #1
   d80ae:	601a      	strpl	r2, [r3, #0]
   d80b0:	4b12      	ldr	r3, [pc, #72]	; (d80fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d80b2:	681a      	ldr	r2, [r3, #0]
   d80b4:	07d1      	lsls	r1, r2, #31
   d80b6:	bf5c      	itt	pl
   d80b8:	2201      	movpl	r2, #1
   d80ba:	601a      	strpl	r2, [r3, #0]
   d80bc:	4b10      	ldr	r3, [pc, #64]	; (d8100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d80be:	681a      	ldr	r2, [r3, #0]
   d80c0:	07d2      	lsls	r2, r2, #31
   d80c2:	bf5c      	itt	pl
   d80c4:	2201      	movpl	r2, #1
   d80c6:	601a      	strpl	r2, [r3, #0]
   d80c8:	4b0e      	ldr	r3, [pc, #56]	; (d8104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d80ca:	681a      	ldr	r2, [r3, #0]
   d80cc:	07d0      	lsls	r0, r2, #31
   d80ce:	bf5c      	itt	pl
   d80d0:	2201      	movpl	r2, #1
   d80d2:	601a      	strpl	r2, [r3, #0]
   d80d4:	4b0c      	ldr	r3, [pc, #48]	; (d8108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d80d6:	681a      	ldr	r2, [r3, #0]
   d80d8:	07d1      	lsls	r1, r2, #31
   d80da:	bf5c      	itt	pl
   d80dc:	2201      	movpl	r2, #1
   d80de:	601a      	strpl	r2, [r3, #0]
   d80e0:	4b0a      	ldr	r3, [pc, #40]	; (d810c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d80e2:	681a      	ldr	r2, [r3, #0]
   d80e4:	07d2      	lsls	r2, r2, #31
   d80e6:	bf5c      	itt	pl
   d80e8:	2201      	movpl	r2, #1
   d80ea:	601a      	strpl	r2, [r3, #0]
   d80ec:	4770      	bx	lr
   d80ee:	bf00      	nop
   d80f0:	2003e7bc 	.word	0x2003e7bc
   d80f4:	2003e7b8 	.word	0x2003e7b8
   d80f8:	2003e7b4 	.word	0x2003e7b4
   d80fc:	2003e7b0 	.word	0x2003e7b0
   d8100:	2003e7ac 	.word	0x2003e7ac
   d8104:	2003e7a8 	.word	0x2003e7a8
   d8108:	2003e7a4 	.word	0x2003e7a4
   d810c:	2003e7a0 	.word	0x2003e7a0

000d8110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8110:	4b24      	ldr	r3, [pc, #144]	; (d81a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8112:	681a      	ldr	r2, [r3, #0]
   d8114:	07d0      	lsls	r0, r2, #31
   d8116:	bf5c      	itt	pl
   d8118:	2201      	movpl	r2, #1
   d811a:	601a      	strpl	r2, [r3, #0]
   d811c:	4b22      	ldr	r3, [pc, #136]	; (d81a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d811e:	681a      	ldr	r2, [r3, #0]
   d8120:	07d1      	lsls	r1, r2, #31
   d8122:	bf5c      	itt	pl
   d8124:	2201      	movpl	r2, #1
   d8126:	601a      	strpl	r2, [r3, #0]
   d8128:	4b20      	ldr	r3, [pc, #128]	; (d81ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d812a:	681a      	ldr	r2, [r3, #0]
   d812c:	07d2      	lsls	r2, r2, #31
   d812e:	bf5c      	itt	pl
   d8130:	2201      	movpl	r2, #1
   d8132:	601a      	strpl	r2, [r3, #0]
   d8134:	4b1e      	ldr	r3, [pc, #120]	; (d81b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8136:	681a      	ldr	r2, [r3, #0]
   d8138:	07d0      	lsls	r0, r2, #31
   d813a:	bf5c      	itt	pl
   d813c:	2201      	movpl	r2, #1
   d813e:	601a      	strpl	r2, [r3, #0]
   d8140:	4b1c      	ldr	r3, [pc, #112]	; (d81b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8142:	681a      	ldr	r2, [r3, #0]
   d8144:	07d1      	lsls	r1, r2, #31
   d8146:	bf5c      	itt	pl
   d8148:	2201      	movpl	r2, #1
   d814a:	601a      	strpl	r2, [r3, #0]
   d814c:	4b1a      	ldr	r3, [pc, #104]	; (d81b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d814e:	681a      	ldr	r2, [r3, #0]
   d8150:	07d2      	lsls	r2, r2, #31
   d8152:	bf5c      	itt	pl
   d8154:	2201      	movpl	r2, #1
   d8156:	601a      	strpl	r2, [r3, #0]
   d8158:	4b18      	ldr	r3, [pc, #96]	; (d81bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d815a:	681a      	ldr	r2, [r3, #0]
   d815c:	07d0      	lsls	r0, r2, #31
   d815e:	bf5c      	itt	pl
   d8160:	2201      	movpl	r2, #1
   d8162:	601a      	strpl	r2, [r3, #0]
   d8164:	4b16      	ldr	r3, [pc, #88]	; (d81c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8166:	681a      	ldr	r2, [r3, #0]
   d8168:	07d1      	lsls	r1, r2, #31
   d816a:	bf5c      	itt	pl
   d816c:	2201      	movpl	r2, #1
   d816e:	601a      	strpl	r2, [r3, #0]
   d8170:	4b14      	ldr	r3, [pc, #80]	; (d81c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8172:	681a      	ldr	r2, [r3, #0]
   d8174:	07d2      	lsls	r2, r2, #31
   d8176:	bf5c      	itt	pl
   d8178:	2201      	movpl	r2, #1
   d817a:	601a      	strpl	r2, [r3, #0]
   d817c:	4b12      	ldr	r3, [pc, #72]	; (d81c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d817e:	681a      	ldr	r2, [r3, #0]
   d8180:	07d0      	lsls	r0, r2, #31
   d8182:	bf5c      	itt	pl
   d8184:	2201      	movpl	r2, #1
   d8186:	601a      	strpl	r2, [r3, #0]
   d8188:	4b10      	ldr	r3, [pc, #64]	; (d81cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d818a:	681a      	ldr	r2, [r3, #0]
   d818c:	07d1      	lsls	r1, r2, #31
   d818e:	bf5c      	itt	pl
   d8190:	2201      	movpl	r2, #1
   d8192:	601a      	strpl	r2, [r3, #0]
   d8194:	4b0e      	ldr	r3, [pc, #56]	; (d81d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8196:	681a      	ldr	r2, [r3, #0]
   d8198:	07d2      	lsls	r2, r2, #31
   d819a:	bf5c      	itt	pl
   d819c:	2201      	movpl	r2, #1
   d819e:	601a      	strpl	r2, [r3, #0]
   d81a0:	4770      	bx	lr
   d81a2:	bf00      	nop
   d81a4:	2003e7ec 	.word	0x2003e7ec
   d81a8:	2003e7e8 	.word	0x2003e7e8
   d81ac:	2003e7e4 	.word	0x2003e7e4
   d81b0:	2003e7e0 	.word	0x2003e7e0
   d81b4:	2003e7dc 	.word	0x2003e7dc
   d81b8:	2003e7d8 	.word	0x2003e7d8
   d81bc:	2003e7d4 	.word	0x2003e7d4
   d81c0:	2003e7d0 	.word	0x2003e7d0
   d81c4:	2003e7cc 	.word	0x2003e7cc
   d81c8:	2003e7c8 	.word	0x2003e7c8
   d81cc:	2003e7c4 	.word	0x2003e7c4
   d81d0:	2003e7c0 	.word	0x2003e7c0

000d81d4 <__cxa_atexit>:
   d81d4:	b510      	push	{r4, lr}
   d81d6:	4c05      	ldr	r4, [pc, #20]	; (d81ec <__cxa_atexit+0x18>)
   d81d8:	4613      	mov	r3, r2
   d81da:	b12c      	cbz	r4, d81e8 <__cxa_atexit+0x14>
   d81dc:	460a      	mov	r2, r1
   d81de:	4601      	mov	r1, r0
   d81e0:	2002      	movs	r0, #2
   d81e2:	f3af 8000 	nop.w
   d81e6:	bd10      	pop	{r4, pc}
   d81e8:	4620      	mov	r0, r4
   d81ea:	bd10      	pop	{r4, pc}
   d81ec:	00000000 	.word	0x00000000

000d81f0 <memcmp>:
   d81f0:	b510      	push	{r4, lr}
   d81f2:	3901      	subs	r1, #1
   d81f4:	4402      	add	r2, r0
   d81f6:	4290      	cmp	r0, r2
   d81f8:	d007      	beq.n	d820a <memcmp+0x1a>
   d81fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d81fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8202:	42a3      	cmp	r3, r4
   d8204:	d0f7      	beq.n	d81f6 <memcmp+0x6>
   d8206:	1b18      	subs	r0, r3, r4
   d8208:	bd10      	pop	{r4, pc}
   d820a:	2000      	movs	r0, #0
   d820c:	bd10      	pop	{r4, pc}

000d820e <memcpy>:
   d820e:	b510      	push	{r4, lr}
   d8210:	1e43      	subs	r3, r0, #1
   d8212:	440a      	add	r2, r1
   d8214:	4291      	cmp	r1, r2
   d8216:	d004      	beq.n	d8222 <memcpy+0x14>
   d8218:	f811 4b01 	ldrb.w	r4, [r1], #1
   d821c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8220:	e7f8      	b.n	d8214 <memcpy+0x6>
   d8222:	bd10      	pop	{r4, pc}

000d8224 <memmove>:
   d8224:	4288      	cmp	r0, r1
   d8226:	b510      	push	{r4, lr}
   d8228:	eb01 0302 	add.w	r3, r1, r2
   d822c:	d801      	bhi.n	d8232 <memmove+0xe>
   d822e:	1e42      	subs	r2, r0, #1
   d8230:	e00b      	b.n	d824a <memmove+0x26>
   d8232:	4298      	cmp	r0, r3
   d8234:	d2fb      	bcs.n	d822e <memmove+0xa>
   d8236:	1881      	adds	r1, r0, r2
   d8238:	1ad2      	subs	r2, r2, r3
   d823a:	42d3      	cmn	r3, r2
   d823c:	d004      	beq.n	d8248 <memmove+0x24>
   d823e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8242:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8246:	e7f8      	b.n	d823a <memmove+0x16>
   d8248:	bd10      	pop	{r4, pc}
   d824a:	4299      	cmp	r1, r3
   d824c:	d004      	beq.n	d8258 <memmove+0x34>
   d824e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8252:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8256:	e7f8      	b.n	d824a <memmove+0x26>
   d8258:	bd10      	pop	{r4, pc}

000d825a <memset>:
   d825a:	4402      	add	r2, r0
   d825c:	4603      	mov	r3, r0
   d825e:	4293      	cmp	r3, r2
   d8260:	d002      	beq.n	d8268 <memset+0xe>
   d8262:	f803 1b01 	strb.w	r1, [r3], #1
   d8266:	e7fa      	b.n	d825e <memset+0x4>
   d8268:	4770      	bx	lr
	...

000d826c <srand>:
   d826c:	b538      	push	{r3, r4, r5, lr}
   d826e:	4b12      	ldr	r3, [pc, #72]	; (d82b8 <srand+0x4c>)
   d8270:	681c      	ldr	r4, [r3, #0]
   d8272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8274:	4605      	mov	r5, r0
   d8276:	b9d3      	cbnz	r3, d82ae <srand+0x42>
   d8278:	2018      	movs	r0, #24
   d827a:	f7fc fba5 	bl	d49c8 <malloc>
   d827e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8282:	63a0      	str	r0, [r4, #56]	; 0x38
   d8284:	8003      	strh	r3, [r0, #0]
   d8286:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d828a:	8043      	strh	r3, [r0, #2]
   d828c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8290:	8083      	strh	r3, [r0, #4]
   d8292:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8296:	80c3      	strh	r3, [r0, #6]
   d8298:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d829c:	8103      	strh	r3, [r0, #8]
   d829e:	2305      	movs	r3, #5
   d82a0:	8143      	strh	r3, [r0, #10]
   d82a2:	230b      	movs	r3, #11
   d82a4:	8183      	strh	r3, [r0, #12]
   d82a6:	2201      	movs	r2, #1
   d82a8:	2300      	movs	r3, #0
   d82aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d82ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d82b0:	2200      	movs	r2, #0
   d82b2:	611d      	str	r5, [r3, #16]
   d82b4:	615a      	str	r2, [r3, #20]
   d82b6:	bd38      	pop	{r3, r4, r5, pc}
   d82b8:	2003d944 	.word	0x2003d944

000d82bc <strchr>:
   d82bc:	b2c9      	uxtb	r1, r1
   d82be:	4603      	mov	r3, r0
   d82c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d82c4:	b11a      	cbz	r2, d82ce <strchr+0x12>
   d82c6:	4291      	cmp	r1, r2
   d82c8:	d1f9      	bne.n	d82be <strchr+0x2>
   d82ca:	4618      	mov	r0, r3
   d82cc:	4770      	bx	lr
   d82ce:	2900      	cmp	r1, #0
   d82d0:	bf0c      	ite	eq
   d82d2:	4618      	moveq	r0, r3
   d82d4:	2000      	movne	r0, #0
   d82d6:	4770      	bx	lr

000d82d8 <strchrnul>:
   d82d8:	b510      	push	{r4, lr}
   d82da:	4604      	mov	r4, r0
   d82dc:	f7ff ffee 	bl	d82bc <strchr>
   d82e0:	b918      	cbnz	r0, d82ea <strchrnul+0x12>
   d82e2:	4620      	mov	r0, r4
   d82e4:	f000 f80c 	bl	d8300 <strlen>
   d82e8:	4420      	add	r0, r4
   d82ea:	bd10      	pop	{r4, pc}

000d82ec <strcmp>:
   d82ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d82f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d82f4:	2a01      	cmp	r2, #1
   d82f6:	bf28      	it	cs
   d82f8:	429a      	cmpcs	r2, r3
   d82fa:	d0f7      	beq.n	d82ec <strcmp>
   d82fc:	1ad0      	subs	r0, r2, r3
   d82fe:	4770      	bx	lr

000d8300 <strlen>:
   d8300:	4603      	mov	r3, r0
   d8302:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8306:	2a00      	cmp	r2, #0
   d8308:	d1fb      	bne.n	d8302 <strlen+0x2>
   d830a:	1a18      	subs	r0, r3, r0
   d830c:	3801      	subs	r0, #1
   d830e:	4770      	bx	lr

000d8310 <strncmp>:
   d8310:	b530      	push	{r4, r5, lr}
   d8312:	b182      	cbz	r2, d8336 <strncmp+0x26>
   d8314:	1e45      	subs	r5, r0, #1
   d8316:	3901      	subs	r1, #1
   d8318:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d831c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8320:	42a3      	cmp	r3, r4
   d8322:	d106      	bne.n	d8332 <strncmp+0x22>
   d8324:	43ec      	mvns	r4, r5
   d8326:	4414      	add	r4, r2
   d8328:	42e0      	cmn	r0, r4
   d832a:	d001      	beq.n	d8330 <strncmp+0x20>
   d832c:	2b00      	cmp	r3, #0
   d832e:	d1f3      	bne.n	d8318 <strncmp+0x8>
   d8330:	461c      	mov	r4, r3
   d8332:	1b18      	subs	r0, r3, r4
   d8334:	bd30      	pop	{r4, r5, pc}
   d8336:	4610      	mov	r0, r2
   d8338:	bd30      	pop	{r4, r5, pc}

000d833a <strrchr>:
   d833a:	b538      	push	{r3, r4, r5, lr}
   d833c:	4603      	mov	r3, r0
   d833e:	460d      	mov	r5, r1
   d8340:	b141      	cbz	r1, d8354 <strrchr+0x1a>
   d8342:	2400      	movs	r4, #0
   d8344:	4629      	mov	r1, r5
   d8346:	4618      	mov	r0, r3
   d8348:	f7ff ffb8 	bl	d82bc <strchr>
   d834c:	b130      	cbz	r0, d835c <strrchr+0x22>
   d834e:	1c43      	adds	r3, r0, #1
   d8350:	4604      	mov	r4, r0
   d8352:	e7f7      	b.n	d8344 <strrchr+0xa>
   d8354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8358:	f7ff bfb0 	b.w	d82bc <strchr>
   d835c:	4620      	mov	r0, r4
   d835e:	bd38      	pop	{r3, r4, r5, pc}

000d8360 <_strtol_r>:
   d8360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8364:	4680      	mov	r8, r0
   d8366:	4840      	ldr	r0, [pc, #256]	; (d8468 <_strtol_r+0x108>)
   d8368:	f8d0 9000 	ldr.w	r9, [r0]
   d836c:	460f      	mov	r7, r1
   d836e:	463d      	mov	r5, r7
   d8370:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8374:	eb09 0004 	add.w	r0, r9, r4
   d8378:	7840      	ldrb	r0, [r0, #1]
   d837a:	f000 0008 	and.w	r0, r0, #8
   d837e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8382:	b108      	cbz	r0, d8388 <_strtol_r+0x28>
   d8384:	462f      	mov	r7, r5
   d8386:	e7f2      	b.n	d836e <_strtol_r+0xe>
   d8388:	2c2d      	cmp	r4, #45	; 0x2d
   d838a:	d103      	bne.n	d8394 <_strtol_r+0x34>
   d838c:	1cbd      	adds	r5, r7, #2
   d838e:	787c      	ldrb	r4, [r7, #1]
   d8390:	2601      	movs	r6, #1
   d8392:	e003      	b.n	d839c <_strtol_r+0x3c>
   d8394:	2c2b      	cmp	r4, #43	; 0x2b
   d8396:	bf04      	itt	eq
   d8398:	787c      	ldrbeq	r4, [r7, #1]
   d839a:	1cbd      	addeq	r5, r7, #2
   d839c:	b113      	cbz	r3, d83a4 <_strtol_r+0x44>
   d839e:	2b10      	cmp	r3, #16
   d83a0:	d10a      	bne.n	d83b8 <_strtol_r+0x58>
   d83a2:	e05b      	b.n	d845c <_strtol_r+0xfc>
   d83a4:	2c30      	cmp	r4, #48	; 0x30
   d83a6:	d157      	bne.n	d8458 <_strtol_r+0xf8>
   d83a8:	7828      	ldrb	r0, [r5, #0]
   d83aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d83ae:	2858      	cmp	r0, #88	; 0x58
   d83b0:	d14d      	bne.n	d844e <_strtol_r+0xee>
   d83b2:	786c      	ldrb	r4, [r5, #1]
   d83b4:	2310      	movs	r3, #16
   d83b6:	3502      	adds	r5, #2
   d83b8:	2e00      	cmp	r6, #0
   d83ba:	bf14      	ite	ne
   d83bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d83c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d83c4:	2700      	movs	r7, #0
   d83c6:	fbbc faf3 	udiv	sl, ip, r3
   d83ca:	4638      	mov	r0, r7
   d83cc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d83d0:	eb09 0e04 	add.w	lr, r9, r4
   d83d4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d83d8:	f01e 0f04 	tst.w	lr, #4
   d83dc:	d001      	beq.n	d83e2 <_strtol_r+0x82>
   d83de:	3c30      	subs	r4, #48	; 0x30
   d83e0:	e00b      	b.n	d83fa <_strtol_r+0x9a>
   d83e2:	f01e 0e03 	ands.w	lr, lr, #3
   d83e6:	d01b      	beq.n	d8420 <_strtol_r+0xc0>
   d83e8:	f1be 0f01 	cmp.w	lr, #1
   d83ec:	bf0c      	ite	eq
   d83ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d83f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d83f6:	ebce 0404 	rsb	r4, lr, r4
   d83fa:	42a3      	cmp	r3, r4
   d83fc:	dd10      	ble.n	d8420 <_strtol_r+0xc0>
   d83fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8402:	d00a      	beq.n	d841a <_strtol_r+0xba>
   d8404:	4550      	cmp	r0, sl
   d8406:	d806      	bhi.n	d8416 <_strtol_r+0xb6>
   d8408:	d101      	bne.n	d840e <_strtol_r+0xae>
   d840a:	4564      	cmp	r4, ip
   d840c:	dc03      	bgt.n	d8416 <_strtol_r+0xb6>
   d840e:	fb03 4000 	mla	r0, r3, r0, r4
   d8412:	2701      	movs	r7, #1
   d8414:	e001      	b.n	d841a <_strtol_r+0xba>
   d8416:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d841a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d841e:	e7d7      	b.n	d83d0 <_strtol_r+0x70>
   d8420:	1c7b      	adds	r3, r7, #1
   d8422:	d10c      	bne.n	d843e <_strtol_r+0xde>
   d8424:	2e00      	cmp	r6, #0
   d8426:	f04f 0322 	mov.w	r3, #34	; 0x22
   d842a:	bf14      	ite	ne
   d842c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8430:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8434:	f8c8 3000 	str.w	r3, [r8]
   d8438:	b92a      	cbnz	r2, d8446 <_strtol_r+0xe6>
   d843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d843e:	b106      	cbz	r6, d8442 <_strtol_r+0xe2>
   d8440:	4240      	negs	r0, r0
   d8442:	b172      	cbz	r2, d8462 <_strtol_r+0x102>
   d8444:	b107      	cbz	r7, d8448 <_strtol_r+0xe8>
   d8446:	1e69      	subs	r1, r5, #1
   d8448:	6011      	str	r1, [r2, #0]
   d844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d844e:	2430      	movs	r4, #48	; 0x30
   d8450:	2b00      	cmp	r3, #0
   d8452:	d1b1      	bne.n	d83b8 <_strtol_r+0x58>
   d8454:	2308      	movs	r3, #8
   d8456:	e7af      	b.n	d83b8 <_strtol_r+0x58>
   d8458:	230a      	movs	r3, #10
   d845a:	e7ad      	b.n	d83b8 <_strtol_r+0x58>
   d845c:	2c30      	cmp	r4, #48	; 0x30
   d845e:	d0a3      	beq.n	d83a8 <_strtol_r+0x48>
   d8460:	e7aa      	b.n	d83b8 <_strtol_r+0x58>
   d8462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8466:	bf00      	nop
   d8468:	2003d8e0 	.word	0x2003d8e0

000d846c <strtol>:
   d846c:	4613      	mov	r3, r2
   d846e:	460a      	mov	r2, r1
   d8470:	4601      	mov	r1, r0
   d8472:	4802      	ldr	r0, [pc, #8]	; (d847c <strtol+0x10>)
   d8474:	6800      	ldr	r0, [r0, #0]
   d8476:	f7ff bf73 	b.w	d8360 <_strtol_r>
   d847a:	bf00      	nop
   d847c:	2003d944 	.word	0x2003d944

000d8480 <dynalib_user>:
   d8480:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8490:	00000000                                ....

000d8494 <_ZTVN5spark10LogHandlerE>:
	...
   d84a4:	000d40a5 000d40c9                       .@...@..

000d84ac <_ZTVN5spark16SerialLogHandlerE>:
	...
   d84b4:	000d40d5 000d4109 000d67f1 000d40cb     .@...A...g...@..
   d84c4:	6e616353 676e696e 726f6620 61656220     Scanning for bea
   d84d4:	736e6f63 002e2e2e 6e756f46 25203a64     cons....Found: %
   d84e4:	65530069 63697672 41207365 6c696176     i.Services Avail
   d84f4:	656c6261 6925203a 64614d00 6f632065     able: %i.Made co
   d8504:	63656e6e 6e6f6974 206f7420 63616562     nnection to beac
   d8514:	002e6e6f 6e6e6143 6320746f 656e6e6f     on..Cannot conne
   d8524:	74207463 6562206f 6e6f6361 6f46002e     ct to beacon..Fo
   d8534:	20646e75 6374616d 676e6968 72657320     und matching ser
   d8544:	65636976 6f43202e 63656e6e 676e6974     vice. Connecting
   d8554:	002e2e2e 33373031 66613736 3433382d     ....107367af-834
   d8564:	36342d61 622d3039 2d346366 63333331     a-4690-bfc4-133c
   d8574:	63366536 34653661 00000000              6e6ca6e4....

000d8580 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8588:	000d4a1b 000d4a21 000d5c71 000d4a4b     .J..!J..q\..KJ..
   d8598:	000d4a1d                                .J..

000d859c <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d85a4:	000d4a15 000d4a2f 000d5e5d 000d4a4f     .J../J..]^..OJ..
   d85b4:	000d4a17                                .J..

000d85b8 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d85c0:	000d4a0f 000d4a3d 000d5287 000d4a53     .J..=J...R..SJ..
   d85d0:	000d4a11                                .J..

000d85d4 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d85d4:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d85e4:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d85f4:	73696420 65766f63 676e6972 72657320      discovering ser
   d8604:	65636976 53002e73 74726174 73696420     vices..Start dis
   d8614:	65766f63 676e6972 61686320 74636172     covering charact
   d8624:	73697265 73636974 6168002e 6c625f6c     eristics..hal_bl
   d8634:	61675f65 635f7474 6e65696c 69645f74     e_gatt_client_di
   d8644:	766f6373 615f7265 735f6c6c 69767265     scover_all_servi
   d8654:	28736563 61662029 64656c69 6425203b     ces() failed; %d
   d8664:	77654e00 72657020 65687069 206c6172     .New peripheral 
   d8674:	6e6e6f63 65746365 00002e64              connected...

000d8680 <_ZTVN5spark13EthernetClassE>:
	...
   d8688:	000d6029 000d601f 000d6015 000d600b     )`...`...`...`..
   d8698:	000d5fff 000d5ff3 000d5fe7 000d5fdf     ._..._..._..._..
   d86a8:	000d5fd5 000d5fcb 000d768d              ._..._...v..

000d86b4 <_ZTV7TwoWire>:
	...
   d86bc:	000d6049 000d6093 000d606b 000d604b     I`...`..k`..K`..
   d86cc:	000d6073 000d607b 000d6083 000d608b     s`..{`...`...`..

000d86dc <_ZTV9IPAddress>:
	...
   d86e4:	000d60dd 000d60cd 000d60cf 00302e30     .`...`...`..0.0.
   d86f4:	736c6166 72740065 25006575 67250075     false.true.%u.%g
   d8704:	6c756e00 2575006c 00783430              .null.u%04x.

000d8710 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8718:	000d65ad 000d65d3 000d6587 000d61df     .e...e...e...a..

000d8728 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d8730:	000d6d25 000d6d39 000d665d 000d658f     %m..9m..]f...e..

000d8740 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d8748:	000d65a9 000d65ef 000d6c3d 000d65fd     .e...e..=l...e..
   d8758:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d8768:	006c6961 25000a0d 75303130 205d0020     ail....%010u .] 
   d8778:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d8788:	00203d20 61746564 20736c69 6200203d      = .details = .b
   d8798:	00647561 69726553 53006c61 61697265     aud.Serial.Seria
   d87a8:	7400316c 00657079 61726170 6d63006d     l1.type.param.cm
   d87b8:	64690064 646e6800 72747300 6966006d     d.id.hnd.strm.fi
   d87c8:	6c00746c 61006c76 61486464 656c646e     lt.lvl.addHandle
   d87d8:	65720072 65766f6d 646e6148 0072656c     r.removeHandler.
   d87e8:	6d756e65 646e6148 7372656c 4f534a00     enumHandlers.JSO
   d87f8:	7274534e 4c6d6165 6148676f 656c646e     NStreamLogHandle
   d8808:	70610072 6f6e0070 7400656e 65636172     r.app.none.trace
   d8818:	666e6900 6177006f 65006e72 726f7272     .info.warn.error
   d8828:	6e617000 61006369 00006c6c              .panic.all..

000d8834 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d883c:	000d6cf9 000d6d11 000d67f1 000d40cb     .l...m...g...@..

000d884c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d8854:	000d65ab 000d65e1 000d73ed 000d6591     .e...e...s...e..

000d8864 <_ZTVN5spark9MeshClassE>:
	...
   d886c:	000d7523 000d7519 000d750f 000d7505     #u...u...u...u..
   d887c:	000d74f9 000d74ed 000d74e1 000d74d9     .t...t...t...t..
   d888c:	000d74cf 000d74c5 000d768d              .t...t...v..

000d8898 <_ZTVN5spark12NetworkClassE>:
	...
   d88a0:	000d7625 000d762f 000d7639 000d7643     %v../v..9v..Cv..
   d88b0:	000d764d 000d7659 000d7665 000d7671     Mv..Yv..ev..qv..
   d88c0:	000d7679 000d7683 000d768d              yv...v...v..

000d88cc <_ZTV8SPIClass>:
	...
   d88d4:	000d78d1 000d78d3 2b25005a 3a643330     .x...x..Z.%+03d:
   d88e4:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
   d88f4:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
   d8904:	00000000                                ....

000d8908 <_ZTV11USARTSerial>:
	...
   d8910:	000d7a65 000d7ab5 000d7ac3 000d776d     ez...z...z..mw..
   d8920:	000d7a79 000d7a9b 000d7a87 000d7aaf     yz...z...z...z..
   d8930:	000d7a67 000d7a6b                       gz..kz..

000d8938 <_ZTV9USBSerial>:
	...
   d8940:	000d7b81 000d7bd1 000d7bdf 000d776d     .{...{...{..mw..
   d8950:	000d7bbd 000d7b83 000d7b99 000d7bcb     .{...{...{...{..
   d8960:	000d7baf 000d7b7d                       .{..}{..

000d8968 <_ZTVN5spark9WiFiClassE>:
	...
   d8970:	000d7cf3 000d7ce9 000d7cdf 000d7c95     .|...|...|...|..
   d8980:	000d7cd3 000d7cc7 000d7cbb 000d7cb3     .|...|...|...|..
   d8990:	000d7ca9 000d7c9f 000d768d              .|...|...v..

000d899c <_ZSt7nothrow>:
	...

000d899d <_ctype_>:
   d899d:	20202000 20202020 28282020 20282828     .         ((((( 
   d89ad:	20202020 20202020 20202020 20202020                     
   d89bd:	10108820 10101010 10101010 10101010      ...............
   d89cd:	04040410 04040404 10040404 10101010     ................
   d89dd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d89ed:	01010101 01010101 01010101 10101010     ................
   d89fd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8a0d:	02020202 02020202 02020202 10101010     ................
   d8a1d:	00000020 00000000 00000000 00000000      ...............
	...

000d8aa0 <__sf_fake_stdin>:
	...

000d8ac0 <__sf_fake_stdout>:
	...

000d8ae0 <__sf_fake_stderr>:
	...
   d8b00:	00000043                                         C.

000d8b02 <link_const_variable_data_end>:
	...

000d8b04 <link_constructors_location>:
   d8b04:	000d43f5 	.word	0x000d43f5
   d8b08:	000d5fa9 	.word	0x000d5fa9
   d8b0c:	000d6035 	.word	0x000d6035
   d8b10:	000d74b5 	.word	0x000d74b5
   d8b14:	000d75d9 	.word	0x000d75d9
   d8b18:	000d7759 	.word	0x000d7759
   d8b1c:	000d78b5 	.word	0x000d78b5
   d8b20:	000d7a39 	.word	0x000d7a39
   d8b24:	000d7a51 	.word	0x000d7a51
   d8b28:	000d7cfd 	.word	0x000d7cfd
   d8b2c:	000d7ec1 	.word	0x000d7ec1
   d8b30:	000d7f45 	.word	0x000d7f45
   d8b34:	000d8009 	.word	0x000d8009
   d8b38:	000d808d 	.word	0x000d808d
   d8b3c:	000d8111 	.word	0x000d8111
