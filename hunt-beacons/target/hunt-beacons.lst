
/Users/bsatrom/Development/particle/that-conf-beacons/hunt-beacons/target/hunt-beacons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002558  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016604  2**0
                  CONTENTS
  3 .data         00000068  2003e340  000d6570  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000448  2003e3a8  2003e3a8  0001e3a8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d65d8  000d65d8  000165d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6600  000d6600  00016600  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000ceb38  00000000  00000000  00016604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f07f  00000000  00000000  000e513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001ae69  00000000  00000000  000f41bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000022f0  00000000  00000000  0010f024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004278  00000000  00000000  00111314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00031ad6  00000000  00000000  0011558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002290b  00000000  00000000  00147062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010672f  00000000  00000000  0016996d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c608  00000000  00000000  0027009c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	f4 61 0d 00                                         .a..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f866 	bl	d60fe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f886 	bl	d614a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e340 	.word	0x2003e340
   d4048:	000d6570 	.word	0x000d6570
   d404c:	2003e3a8 	.word	0x2003e3a8
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fea5 	bl	d5da8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6568 	.word	0x000d6568
   d4080:	000d652c 	.word	0x000d652c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86a 	b.w	d415c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f812 	bl	d40b2 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be57 	b.w	d5d44 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba4f 	b.w	d4538 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba55 	b.w	d4548 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba53 	b.w	d4548 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <loop>:

  Particle.function("setAdvText", setAdvertisingText);
}

void loop()
{
   d40b2:	4770      	bx	lr

000d40b4 <_Z18setAdvertisingDatab>:

  return 1;
}

void setAdvertisingData(bool updateOnly)
{
   d40b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d40b6:	b095      	sub	sp, #84	; 0x54
  uint8_t buf[BLE_MAX_ADV_DATA_LEN];

  size_t offset = 0;

  buf[offset++] = 0xff;
   d40b8:	23ff      	movs	r3, #255	; 0xff
   d40ba:	f88d 300c 	strb.w	r3, [sp, #12]
  buf[offset++] = 0xff;
   d40be:	f88d 300d 	strb.w	r3, [sp, #13]
  buf[offset++] = 0x55;
   d40c2:	2355      	movs	r3, #85	; 0x55
   d40c4:	f88d 300e 	strb.w	r3, [sp, #14]
   d40c8:	4b21      	ldr	r3, [pc, #132]	; (d4150 <_Z18setAdvertisingDatab+0x9c>)
   d40ca:	4d22      	ldr	r5, [pc, #136]	; (d4154 <_Z18setAdvertisingDatab+0xa0>)
   d40cc:	781b      	ldrb	r3, [r3, #0]
   d40ce:	68af      	ldr	r7, [r5, #8]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d0:	f88d 3000 	strb.w	r3, [sp]

  return 1;
}

void setAdvertisingData(bool updateOnly)
{
   d40d4:	4606      	mov	r6, r0
   d40d6:	233c      	movs	r3, #60	; 0x3c
   d40d8:	682a      	ldr	r2, [r5, #0]
   d40da:	491f      	ldr	r1, [pc, #124]	; (d4158 <_Z18setAdvertisingDatab+0xa4>)
  buf[offset++] = 0xff;
  buf[offset++] = 0xff;
  buf[offset++] = 0x55;

  uint8_t strLen = advText.length();
  buf[offset++] = strLen;
   d40dc:	f88d 700f 	strb.w	r7, [sp, #15]
   d40e0:	a80b      	add	r0, sp, #44	; 0x2c
   d40e2:	f001 f84d 	bl	d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d40e8:	b17c      	cbz	r4, d410a <_Z18setAdvertisingDatab+0x56>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40ea:	6863      	ldr	r3, [r4, #4]
   d40ec:	3b01      	subs	r3, #1
   d40ee:	6063      	str	r3, [r4, #4]
   d40f0:	b95b      	cbnz	r3, d410a <_Z18setAdvertisingDatab+0x56>
        {
          _M_dispose();
   d40f2:	6823      	ldr	r3, [r4, #0]
   d40f4:	4620      	mov	r0, r4
   d40f6:	689b      	ldr	r3, [r3, #8]
   d40f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40fa:	68a3      	ldr	r3, [r4, #8]
   d40fc:	3b01      	subs	r3, #1
   d40fe:	60a3      	str	r3, [r4, #8]
   d4100:	b91b      	cbnz	r3, d410a <_Z18setAdvertisingDatab+0x56>
            _M_destroy();
   d4102:	6823      	ldr	r3, [r4, #0]
   d4104:	4620      	mov	r0, r4
   d4106:	68db      	ldr	r3, [r3, #12]
   d4108:	4798      	blx	r3

  Particle.publish("beacon/advText", advText.c_str(), PRIVATE);

  memcpy(&buf[offset], advText.c_str(), strLen);
   d410a:	b2fa      	uxtb	r2, r7
   d410c:	6829      	ldr	r1, [r5, #0]
   d410e:	a804      	add	r0, sp, #16
   d4110:	f001 fff5 	bl	d60fe <memcpy>
  offset += 4;

  BleAdvertisingData advData;
   d4114:	a80b      	add	r0, sp, #44	; 0x2c
   d4116:	f000 faee 	bl	d46f6 <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendCustomData(buf, offset);
   d411a:	2300      	movs	r3, #0
   d411c:	2208      	movs	r2, #8
   d411e:	a903      	add	r1, sp, #12
   d4120:	a80b      	add	r0, sp, #44	; 0x2c
   d4122:	f000 fb02 	bl	d472a <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>

  if (updateOnly)
   d4126:	b12e      	cbz	r6, d4134 <_Z18setAdvertisingDatab+0x80>
  {
    // Only update data
    BLE.setAdvertisingData(&advData);
   d4128:	f000 fd92 	bl	d4c50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d412c:	a90b      	add	r1, sp, #44	; 0x2c
   d412e:	f000 fb91 	bl	d4854 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4132:	e00a      	b.n	d414a <_Z18setAdvertisingDatab+0x96>
  }
  else
  {
    BLE.setAdvertisingInterval(130);
   d4134:	f000 fd8c 	bl	d4c50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4138:	2182      	movs	r1, #130	; 0x82
   d413a:	f000 fb6b 	bl	d4814 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
    BLE.advertise(&advData);
   d413e:	f000 fd87 	bl	d4c50 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4142:	4632      	mov	r2, r6
   d4144:	a90b      	add	r1, sp, #44	; 0x2c
   d4146:	f000 fbac 	bl	d48a2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  }
}
   d414a:	b015      	add	sp, #84	; 0x54
   d414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d414e:	bf00      	nop
   d4150:	2003e3bc 	.word	0x2003e3bc
   d4154:	2003e3ac 	.word	0x2003e3ac
   d4158:	000d6208 	.word	0x000d6208

000d415c <setup>:

void setAdvertisingData(bool updateOnly);
int setAdvertisingText(String args);

void setup()
{
   d415c:	b508      	push	{r3, lr}
  setAdvertisingData(false);
   d415e:	2000      	movs	r0, #0
   d4160:	f7ff ffa8 	bl	d40b4 <_Z18setAdvertisingDatab>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4164:	4a03      	ldr	r2, [pc, #12]	; (d4174 <setup+0x18>)
   d4166:	4904      	ldr	r1, [pc, #16]	; (d4178 <setup+0x1c>)
   d4168:	4804      	ldr	r0, [pc, #16]	; (d417c <setup+0x20>)

  Particle.function("setAdvText", setAdvertisingText);
}
   d416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d416e:	f000 beed 	b.w	d4f4c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4172:	bf00      	nop
   d4174:	000d6217 	.word	0x000d6217
   d4178:	000d4181 	.word	0x000d4181
   d417c:	000d4f21 	.word	0x000d4f21

000d4180 <_Z18setAdvertisingText6String>:
void loop()
{
}

int setAdvertisingText(String args)
{
   d4180:	b508      	push	{r3, lr}
  advText = args;
   d4182:	4601      	mov	r1, r0
   d4184:	4803      	ldr	r0, [pc, #12]	; (d4194 <_Z18setAdvertisingText6String+0x14>)
   d4186:	f001 fc4f 	bl	d5a28 <_ZN6StringaSERKS_>

  setAdvertisingData(true);
   d418a:	2001      	movs	r0, #1
   d418c:	f7ff ff92 	bl	d40b4 <_Z18setAdvertisingDatab>

  return 1;
}
   d4190:	2001      	movs	r0, #1
   d4192:	bd08      	pop	{r3, pc}
   d4194:	2003e3ac 	.word	0x2003e3ac

000d4198 <_GLOBAL__sub_I_advText>:
  else
  {
    BLE.setAdvertisingInterval(130);
    BLE.advertise(&advData);
  }
}
   d4198:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d419a:	4b08      	ldr	r3, [pc, #32]	; (d41bc <_GLOBAL__sub_I_advText+0x24>)
 * Author: Brandon Satrom <brandon@particle.io>
 * Date:
 */
#include "Particle.h"

String advText = "Sample";
   d419c:	4c08      	ldr	r4, [pc, #32]	; (d41c0 <_GLOBAL__sub_I_advText+0x28>)
   d419e:	2201      	movs	r2, #1
   d41a0:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a2:	f000 f89d 	bl	d42e0 <HAL_Pin_Map>
   d41a6:	4907      	ldr	r1, [pc, #28]	; (d41c4 <_GLOBAL__sub_I_advText+0x2c>)
   d41a8:	4620      	mov	r0, r4
   d41aa:	f001 fc2a 	bl	d5a02 <_ZN6StringC1EPK19__FlashStringHelper>
   d41ae:	4620      	mov	r0, r4
   d41b0:	4a05      	ldr	r2, [pc, #20]	; (d41c8 <_GLOBAL__sub_I_advText+0x30>)
   d41b2:	4906      	ldr	r1, [pc, #24]	; (d41cc <_GLOBAL__sub_I_advText+0x34>)
  else
  {
    BLE.setAdvertisingInterval(130);
    BLE.advertise(&advData);
  }
}
   d41b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Author: Brandon Satrom <brandon@particle.io>
 * Date:
 */
#include "Particle.h"

String advText = "Sample";
   d41b8:	f001 be32 	b.w	d5e20 <__aeabi_atexit>
   d41bc:	2003e3bc 	.word	0x2003e3bc
   d41c0:	2003e3ac 	.word	0x2003e3ac
   d41c4:	000d6222 	.word	0x000d6222
   d41c8:	2003e3a8 	.word	0x2003e3a8
   d41cc:	000d5975 	.word	0x000d5975

000d41d0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <hal_ble_stack_init+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	689b      	ldr	r3, [r3, #8]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	00030278 	.word	0x00030278

000d41e0 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <hal_ble_set_callback_on_events+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	695b      	ldr	r3, [r3, #20]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030278 	.word	0x00030278

000d41f0 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <hal_ble_gap_set_advertising_parameters+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030278 	.word	0x00030278

000d4200 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <hal_ble_gap_get_advertising_parameters+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030278 	.word	0x00030278

000d4210 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <hal_ble_gap_set_advertising_data+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030278 	.word	0x00030278

000d4220 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <hal_ble_gap_set_scan_response_data+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030278 	.word	0x00030278

000d4230 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <hal_ble_gap_start_advertising+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030278 	.word	0x00030278

000d4240 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_thread_is_current+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	689b      	ldr	r3, [r3, #8]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <os_thread_join+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	691b      	ldr	r3, [r3, #16]
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030248 	.word	0x00030248

000d4260 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <os_thread_cleanup+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	695b      	ldr	r3, [r3, #20]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030248 	.word	0x00030248

000d4270 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <os_mutex_create+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030248 	.word	0x00030248

000d4280 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <os_mutex_recursive_create+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	00030248 	.word	0x00030248

000d4290 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <os_mutex_recursive_lock+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	00030248 	.word	0x00030248

000d42a0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <os_mutex_recursive_unlock+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	00030248 	.word	0x00030248

000d42b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_RNG_GetRandomNumber+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	685b      	ldr	r3, [r3, #4]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	00030218 	.word	0x00030218

000d42c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_Delay_Microseconds+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	68db      	ldr	r3, [r3, #12]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	00030218 	.word	0x00030218

000d42d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	695b      	ldr	r3, [r3, #20]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	00030218 	.word	0x00030218

000d42e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_Pin_Map+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	681b      	ldr	r3, [r3, #0]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	0003022c 	.word	0x0003022c

000d42f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <inet_inet_ntop+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	695b      	ldr	r3, [r3, #20]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030264 	.word	0x00030264

000d4300 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <netdb_freeaddrinfo+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	689b      	ldr	r3, [r3, #8]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030268 	.word	0x00030268

000d4310 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <netdb_getaddrinfo+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	68db      	ldr	r3, [r3, #12]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030268 	.word	0x00030268

000d4320 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_SPI_Init+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	69db      	ldr	r3, [r3, #28]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030230 	.word	0x00030230

000d4330 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USART_Init+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	681b      	ldr	r3, [r3, #0]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003023c 	.word	0x0003023c

000d4340 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USART_Write_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	68db      	ldr	r3, [r3, #12]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003023c 	.word	0x0003023c

000d4350 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USART_Available_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	691b      	ldr	r3, [r3, #16]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003023c 	.word	0x0003023c

000d4360 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USART_Read_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	695b      	ldr	r3, [r3, #20]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003023c 	.word	0x0003023c

000d4370 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USART_Peek_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	699b      	ldr	r3, [r3, #24]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003023c 	.word	0x0003023c

000d4380 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USART_Flush_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	69db      	ldr	r3, [r3, #28]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003023c 	.word	0x0003023c

000d4390 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USART_Available_Data_For_Write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003023c 	.word	0x0003023c

000d43a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Init+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	681b      	ldr	r3, [r3, #0]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Available_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	691b      	ldr	r3, [r3, #16]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_USB_USART_Receive_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	699b      	ldr	r3, [r3, #24]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003024c 	.word	0x0003024c

000d43e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_USB_USART_Send_Data+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	69db      	ldr	r3, [r3, #28]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003024c 	.word	0x0003024c

000d43f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USB_USART_Flush_Data+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6a1b      	ldr	r3, [r3, #32]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003024c 	.word	0x0003024c

000d4400 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <panic_+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030260 	.word	0x00030260

000d4410 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <set_system_mode+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	685b      	ldr	r3, [r3, #4]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	00030220 	.word	0x00030220

000d4420 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <application_thread_current+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	00030220 	.word	0x00030220

000d4430 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <application_thread_invoke+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030220 	.word	0x00030220

000d4440 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b03      	ldr	r3, [pc, #12]	; (d4450 <system_ctrl_set_app_request_handler+0x10>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d444a:	9301      	str	r3, [sp, #4]
   d444c:	bd08      	pop	{r3, pc}
   d444e:	0000      	.short	0x0000
   d4450:	00030220 	.word	0x00030220

000d4454 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b03      	ldr	r3, [pc, #12]	; (d4464 <system_ctrl_set_result+0x10>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d445e:	9301      	str	r3, [sp, #4]
   d4460:	bd08      	pop	{r3, pc}
   d4462:	0000      	.short	0x0000
   d4464:	00030220 	.word	0x00030220

000d4468 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <spark_function+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	685b      	ldr	r3, [r3, #4]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030244 	.word	0x00030244

000d4478 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <spark_send_event+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6a1b      	ldr	r3, [r3, #32]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030244 	.word	0x00030244

000d4488 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <spark_set_random_seed_from_cloud_handler+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030244 	.word	0x00030244

000d4498 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_connect+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	685b      	ldr	r3, [r3, #4]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <network_connecting+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	689b      	ldr	r3, [r3, #8]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030240 	.word	0x00030240

000d44b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <network_disconnect+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	68db      	ldr	r3, [r3, #12]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030240 	.word	0x00030240

000d44c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <network_ready+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	691b      	ldr	r3, [r3, #16]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030240 	.word	0x00030240

000d44d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <network_on+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030240 	.word	0x00030240

000d44e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_off+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	699b      	ldr	r3, [r3, #24]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <network_listen+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	69db      	ldr	r3, [r3, #28]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030240 	.word	0x00030240

000d4508 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <network_listening+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6a1b      	ldr	r3, [r3, #32]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030240 	.word	0x00030240

000d4518 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <network_set_listen_timeout+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030240 	.word	0x00030240

000d4528 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <network_get_listen_timeout+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030240 	.word	0x00030240

000d4538 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <malloc+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	681b      	ldr	r3, [r3, #0]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003021c 	.word	0x0003021c

000d4548 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <free+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	685b      	ldr	r3, [r3, #4]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003021c 	.word	0x0003021c

000d4558 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <realloc+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	689b      	ldr	r3, [r3, #8]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003021c 	.word	0x0003021c

000d4568 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <abort+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	0003021c 	.word	0x0003021c

000d4578 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <_malloc_r+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003021c 	.word	0x0003021c

000d4588 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4588:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d458a:	6883      	ldr	r3, [r0, #8]
   d458c:	4604      	mov	r4, r0
   d458e:	b90b      	cbnz	r3, d4594 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4590:	f001 fc4d 	bl	d5e2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4594:	68c3      	ldr	r3, [r0, #12]
   d4596:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4598:	68a3      	ldr	r3, [r4, #8]
   d459a:	b11b      	cbz	r3, d45a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d459c:	2203      	movs	r2, #3
   d459e:	4621      	mov	r1, r4
   d45a0:	4620      	mov	r0, r4
   d45a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d45a4:	4620      	mov	r0, r4
   d45a6:	2110      	movs	r1, #16
}
   d45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d45ac:	f001 bc3d 	b.w	d5e2a <_ZdlPvj>

000d45b0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d45b0:	4770      	bx	lr

000d45b2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d45b2:	2000      	movs	r0, #0
   d45b4:	4770      	bx	lr

000d45b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d45b6:	b510      	push	{r4, lr}
   d45b8:	2114      	movs	r1, #20
   d45ba:	4604      	mov	r4, r0
   d45bc:	f001 fc35 	bl	d5e2a <_ZdlPvj>
   d45c0:	4620      	mov	r0, r4
   d45c2:	bd10      	pop	{r4, pc}

000d45c4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d45c4:	f7ff bd69 	b.w	d409a <_ZdlPv>

000d45c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d45c8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d45ca:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d45cc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d45ce:	689b      	ldr	r3, [r3, #8]
   d45d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45d2:	68a3      	ldr	r3, [r4, #8]
   d45d4:	3b01      	subs	r3, #1
   d45d6:	60a3      	str	r3, [r4, #8]
   d45d8:	b92b      	cbnz	r3, d45e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d45da:	6823      	ldr	r3, [r4, #0]
   d45dc:	4620      	mov	r0, r4
   d45de:	68db      	ldr	r3, [r3, #12]
        }
    }
   d45e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d45e4:	4718      	bx	r3
   d45e6:	bd10      	pop	{r4, pc}

000d45e8 <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d45e8:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d45ea:	7982      	ldrb	r2, [r0, #6]
   d45ec:	798b      	ldrb	r3, [r1, #6]
   d45ee:	429a      	cmp	r2, r3
   d45f0:	d106      	bne.n	d4600 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d45f2:	2206      	movs	r2, #6
   d45f4:	f001 fd74 	bl	d60e0 <memcmp>
   d45f8:	fab0 f080 	clz	r0, r0
   d45fc:	0940      	lsrs	r0, r0, #5
   d45fe:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d4600:	2000      	movs	r0, #0
    }
   d4602:	bd08      	pop	{r3, pc}

000d4604 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4604:	b510      	push	{r4, lr}
            locked_(false) {
   d4606:	2300      	movs	r3, #0
   d4608:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d460a:	4b04      	ldr	r3, [pc, #16]	; (d461c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d460c:	4604      	mov	r4, r0
   d460e:	6818      	ldr	r0, [r3, #0]
   d4610:	f7ff fe3e 	bl	d4290 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4614:	2301      	movs	r3, #1
   d4616:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4618:	4620      	mov	r0, r4
   d461a:	bd10      	pop	{r4, pc}
   d461c:	2003e3e4 	.word	0x2003e3e4

000d4620 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4620:	b510      	push	{r4, lr}
        if (locked_) {
   d4622:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4624:	4604      	mov	r4, r0
        if (locked_) {
   d4626:	b11b      	cbz	r3, d4630 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4628:	4b02      	ldr	r3, [pc, #8]	; (d4634 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d462a:	6818      	ldr	r0, [r3, #0]
   d462c:	f7ff fe38 	bl	d42a0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4630:	4620      	mov	r0, r4
   d4632:	bd10      	pop	{r4, pc}
   d4634:	2003e3e4 	.word	0x2003e3e4

000d4638 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4638:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d463a:	b18b      	cbz	r3, d4660 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d463c:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d463e:	1ce5      	adds	r5, r4, #3
   d4640:	428d      	cmp	r5, r1
   d4642:	d80f      	bhi.n	d4664 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4644:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4646:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4648:	5d87      	ldrb	r7, [r0, r6]
   d464a:	4297      	cmp	r7, r2
   d464c:	d105      	bne.n	d465a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d464e:	442e      	add	r6, r5
   d4650:	42b1      	cmp	r1, r6
   d4652:	d307      	bcc.n	d4664 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4654:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4656:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4658:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d465a:	3501      	adds	r5, #1
   d465c:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d465e:	e7ee      	b.n	d463e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4660:	4618      	mov	r0, r3
   d4662:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4664:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4666:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4668 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d466c:	4604      	mov	r4, r0
   d466e:	460e      	mov	r6, r1
   d4670:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4672:	4617      	mov	r7, r2
   d4674:	2a00      	cmp	r2, #0
   d4676:	d03a      	beq.n	d46ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4678:	460a      	mov	r2, r1
   d467a:	ab01      	add	r3, sp, #4
   d467c:	6a01      	ldr	r1, [r0, #32]
   d467e:	f7ff ffdb 	bl	d4638 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4682:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4686:	6a22      	ldr	r2, [r4, #32]
   d4688:	bb03      	cbnz	r3, d46cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d468a:	b1f8      	cbz	r0, d46cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d468c:	1c96      	adds	r6, r2, #2
   d468e:	442e      	add	r6, r5
   d4690:	1a36      	subs	r6, r6, r0
   d4692:	2e1f      	cmp	r6, #31
   d4694:	d82b      	bhi.n	d46ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4696:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d469a:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d469e:	ebc8 0202 	rsb	r2, r8, r2
   d46a2:	1a12      	subs	r2, r2, r0
   d46a4:	eb00 0108 	add.w	r1, r0, r8
   d46a8:	eb05 0009 	add.w	r0, r5, r9
   d46ac:	b292      	uxth	r2, r2
   d46ae:	4421      	add	r1, r4
   d46b0:	4420      	add	r0, r4
   d46b2:	f001 fd2f 	bl	d6114 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d46b6:	1c6b      	adds	r3, r5, #1
   d46b8:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d46bc:	462a      	mov	r2, r5
   d46be:	4639      	mov	r1, r7
   d46c0:	eb04 0009 	add.w	r0, r4, r9
   d46c4:	f001 fd1b 	bl	d60fe <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d46c8:	6226      	str	r6, [r4, #32]
   d46ca:	e010      	b.n	d46ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d46cc:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d46ce:	182b      	adds	r3, r5, r0
   d46d0:	2b1f      	cmp	r3, #31
   d46d2:	d80c      	bhi.n	d46ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d46d4:	1c6b      	adds	r3, r5, #1
   d46d6:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d46d8:	4422      	add	r2, r4
   d46da:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d46dc:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d46de:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d46e0:	4420      	add	r0, r4
   d46e2:	462a      	mov	r2, r5
   d46e4:	f001 fd0b 	bl	d60fe <memcpy>
        selfLen_ += len;
   d46e8:	6a22      	ldr	r2, [r4, #32]
   d46ea:	442a      	add	r2, r5
   d46ec:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d46ee:	6a20      	ldr	r0, [r4, #32]
}
   d46f0:	b003      	add	sp, #12
   d46f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d46f6 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d46f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d46f8:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d46fa:	4603      	mov	r3, r0
   d46fc:	f100 021f 	add.w	r2, r0, #31
   d4700:	2000      	movs	r0, #0
   d4702:	f803 0b01 	strb.w	r0, [r3], #1
   d4706:	4293      	cmp	r3, r2
   d4708:	f04f 0100 	mov.w	r1, #0
   d470c:	d1f9      	bne.n	d4702 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d470e:	aa04      	add	r2, sp, #16
   d4710:	2306      	movs	r3, #6
   d4712:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4716:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4718:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d471a:	9100      	str	r1, [sp, #0]
   d471c:	4620      	mov	r0, r4
   d471e:	4619      	mov	r1, r3
   d4720:	f7ff ffa2 	bl	d4668 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4724:	4620      	mov	r0, r4
   d4726:	b004      	add	sp, #16
   d4728:	bd10      	pop	{r4, pc}

000d472a <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:

size_t BleAdvertisingData::appendLocalName(const String& name) {
    return appendLocalName(name.c_str());
}

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   d472a:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   d472c:	9300      	str	r3, [sp, #0]
   d472e:	4613      	mov	r3, r2
   d4730:	460a      	mov	r2, r1
   d4732:	21ff      	movs	r1, #255	; 0xff
   d4734:	f7ff ff98 	bl	d4668 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4738:	b003      	add	sp, #12
   d473a:	f85d fb04 	ldr.w	pc, [sp], #4

000d473e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d473e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4740:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4742:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4744:	ab01      	add	r3, sp, #4
   d4746:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4748:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d474a:	f7ff ff75 	bl	d4638 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d474e:	4605      	mov	r5, r0
   d4750:	b178      	cbz	r0, d4772 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4752:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4754:	6a22      	ldr	r2, [r4, #32]
   d4756:	1829      	adds	r1, r5, r0
   d4758:	1a12      	subs	r2, r2, r0
   d475a:	1b52      	subs	r2, r2, r5
   d475c:	4421      	add	r1, r4
   d475e:	4420      	add	r0, r4
   d4760:	f001 fccd 	bl	d60fe <memcpy>
        selfLen_ -= len;
   d4764:	6a23      	ldr	r3, [r4, #32]
   d4766:	1b5d      	subs	r5, r3, r5
   d4768:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d476a:	4631      	mov	r1, r6
   d476c:	4620      	mov	r0, r4
   d476e:	f7ff ffe6 	bl	d473e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4772:	b002      	add	sp, #8
   d4774:	bd70      	pop	{r4, r5, r6, pc}

000d4776 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d4776:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d477a:	e890 0050 	ldmia.w	r0, {r4, r6}
   d477e:	460d      	mov	r5, r1
   d4780:	4617      	mov	r7, r2
   d4782:	4698      	mov	r8, r3
   d4784:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4788:	42a6      	cmp	r6, r4
   d478a:	d033      	beq.n	d47f4 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d478c:	6823      	ldr	r3, [r4, #0]
   d478e:	699a      	ldr	r2, [r3, #24]
   d4790:	69d9      	ldr	r1, [r3, #28]
   d4792:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d4796:	4291      	cmp	r1, r2
   d4798:	d01b      	beq.n	d47d2 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d479a:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d479c:	b19b      	cbz	r3, d47c6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d479e:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d47a2:	42a8      	cmp	r0, r5
   d47a4:	d011      	beq.n	d47ca <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d47a6:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d47aa:	42a8      	cmp	r0, r5
   d47ac:	d00d      	beq.n	d47ca <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d47ae:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d47b2:	42a8      	cmp	r0, r5
   d47b4:	d009      	beq.n	d47ca <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d47b6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d47ba:	42a8      	cmp	r0, r5
   d47bc:	d005      	beq.n	d47ca <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d47be:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d47c2:	42a8      	cmp	r0, r5
   d47c4:	d001      	beq.n	d47ca <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d47c6:	3208      	adds	r2, #8
   d47c8:	e7e5      	b.n	d4796 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d47ca:	b117      	cbz	r7, d47d2 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d47cc:	f1b8 0f00 	cmp.w	r8, #0
   d47d0:	d101      	bne.n	d47d6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d47d2:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d47d4:	e7d8      	b.n	d4788 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d47d6:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d47da:	f1b9 0f00 	cmp.w	r9, #0
   d47de:	d0f8      	beq.n	d47d2 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d47e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d47e4:	42aa      	cmp	r2, r5
   d47e6:	d1f4      	bne.n	d47d2 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d47e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d47ea:	9a08      	ldr	r2, [sp, #32]
   d47ec:	4641      	mov	r1, r8
   d47ee:	4638      	mov	r0, r7
   d47f0:	47c8      	blx	r9
   d47f2:	e7ee      	b.n	d47d2 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d47f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d47f8 <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d47f8:	b508      	push	{r3, lr}
   d47fa:	6800      	ldr	r0, [r0, #0]
   d47fc:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d47fe:	8ac2      	ldrh	r2, [r0, #22]
   d4800:	8acb      	ldrh	r3, [r1, #22]
   d4802:	429a      	cmp	r2, r3
   d4804:	d104      	bne.n	d4810 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d4806:	3101      	adds	r1, #1
   d4808:	3001      	adds	r0, #1
   d480a:	f7ff feed 	bl	d45e8 <_ZNK8particle10BleAddresseqERKS0_>
   d480e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4810:	2000      	movs	r0, #0
}
   d4812:	bd08      	pop	{r3, pc}

000d4814 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d4814:	b530      	push	{r4, r5, lr}
   d4816:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4818:	2400      	movs	r4, #0
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d481a:	4668      	mov	r0, sp
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d481c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d481e:	f7ff fef1 	bl	d4604 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4822:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4824:	4621      	mov	r1, r4
   d4826:	a801      	add	r0, sp, #4
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4828:	9401      	str	r4, [sp, #4]
   d482a:	9402      	str	r4, [sp, #8]
   d482c:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d482e:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4832:	f7ff fce5 	bl	d4200 <hal_ble_gap_get_advertising_parameters>
   d4836:	2800      	cmp	r0, #0
   d4838:	db05      	blt.n	d4846 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x32>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d483a:	4621      	mov	r1, r4
   d483c:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
   d483e:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4842:	f7ff fcd5 	bl	d41f0 <hal_ble_gap_set_advertising_parameters>
   d4846:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d4848:	4668      	mov	r0, sp
   d484a:	f7ff fee9 	bl	d4620 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d484e:	4620      	mov	r0, r4
   d4850:	b005      	add	sp, #20
   d4852:	bd30      	pop	{r4, r5, pc}

000d4854 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4854:	4608      	mov	r0, r1
   d4856:	b909      	cbnz	r1, d485c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4858:	460a      	mov	r2, r1
   d485a:	e001      	b.n	d4860 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d485c:	6a09      	ldr	r1, [r1, #32]
   d485e:	2200      	movs	r2, #0
   d4860:	f7ff bcd6 	b.w	d4210 <hal_ble_gap_set_advertising_data>

000d4864 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4864:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4866:	460c      	mov	r4, r1
   d4868:	b911      	cbnz	r1, d4870 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d486a:	460a      	mov	r2, r1
   d486c:	4608      	mov	r0, r1
   d486e:	e006      	b.n	d487e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4870:	2101      	movs	r1, #1
   d4872:	4620      	mov	r0, r4
   d4874:	f7ff ff63 	bl	d473e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4878:	6a21      	ldr	r1, [r4, #32]
   d487a:	2200      	movs	r2, #0
   d487c:	4620      	mov	r0, r4
    }
}
   d487e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4882:	f7ff bccd 	b.w	d4220 <hal_ble_gap_set_scan_response_data>

000d4886 <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d4886:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4888:	a801      	add	r0, sp, #4
   d488a:	f7ff febb 	bl	d4604 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d488e:	2000      	movs	r0, #0
   d4890:	f7ff fcce 	bl	d4230 <hal_ble_gap_start_advertising>
   d4894:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d4896:	a801      	add	r0, sp, #4
   d4898:	f7ff fec2 	bl	d4620 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d489c:	4620      	mov	r0, r4
   d489e:	b002      	add	sp, #8
   d48a0:	bd10      	pop	{r4, pc}

000d48a2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d48a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d48a4:	4605      	mov	r5, r0
   d48a6:	460c      	mov	r4, r1
    WiringBleLock lk;
   d48a8:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d48aa:	4616      	mov	r6, r2
    WiringBleLock lk;
   d48ac:	f7ff feaa 	bl	d4604 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d48b0:	4621      	mov	r1, r4
   d48b2:	4628      	mov	r0, r5
   d48b4:	f7ff ffce 	bl	d4854 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d48b8:	2800      	cmp	r0, #0
   d48ba:	db08      	blt.n	d48ce <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d48bc:	4631      	mov	r1, r6
   d48be:	4628      	mov	r0, r5
   d48c0:	f7ff ffd0 	bl	d4864 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d48c4:	2800      	cmp	r0, #0
   d48c6:	db02      	blt.n	d48ce <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d48c8:	4628      	mov	r0, r5
   d48ca:	f7ff ffdc 	bl	d4886 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d48ce:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d48d0:	a801      	add	r0, sp, #4
   d48d2:	f7ff fea5 	bl	d4620 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d48d6:	4620      	mov	r0, r4
   d48d8:	b002      	add	sp, #8
   d48da:	bd70      	pop	{r4, r5, r6, pc}

000d48dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d48dc:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d48de:	6983      	ldr	r3, [r0, #24]
   d48e0:	e893 0014 	ldmia.w	r3, {r2, r4}
   d48e4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d48e8:	42a2      	cmp	r2, r4
   d48ea:	4613      	mov	r3, r2
   d48ec:	d007      	beq.n	d48fe <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d48ee:	681d      	ldr	r5, [r3, #0]
   d48f0:	8aed      	ldrh	r5, [r5, #22]
   d48f2:	428d      	cmp	r5, r1
   d48f4:	f102 0208 	add.w	r2, r2, #8
   d48f8:	d1f6      	bne.n	d48e8 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d48fa:	4618      	mov	r0, r3
   d48fc:	bd30      	pop	{r4, r5, pc}
   d48fe:	69c2      	ldr	r2, [r0, #28]
   d4900:	6813      	ldr	r3, [r2, #0]
   d4902:	6852      	ldr	r2, [r2, #4]
   d4904:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d4908:	429a      	cmp	r2, r3
   d490a:	4618      	mov	r0, r3
   d490c:	d006      	beq.n	d491c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d490e:	6804      	ldr	r4, [r0, #0]
   d4910:	8ae4      	ldrh	r4, [r4, #22]
   d4912:	428c      	cmp	r4, r1
   d4914:	f103 0308 	add.w	r3, r3, #8
   d4918:	d1f6      	bne.n	d4908 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d491a:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d491c:	2000      	movs	r0, #0
}
   d491e:	bd30      	pop	{r4, r5, pc}

000d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4924:	6800      	ldr	r0, [r0, #0]
   d4926:	b128      	cbz	r0, d4934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4928:	6843      	ldr	r3, [r0, #4]
   d492a:	3b01      	subs	r3, #1
   d492c:	6043      	str	r3, [r0, #4]
   d492e:	b90b      	cbnz	r3, d4934 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4930:	f7ff fe4a 	bl	d45c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4934:	4620      	mov	r0, r4
   d4936:	bd10      	pop	{r4, pc}

000d4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4938:	680b      	ldr	r3, [r1, #0]
   d493a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d493c:	b113      	cbz	r3, d4944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d493e:	685a      	ldr	r2, [r3, #4]
   d4940:	3201      	adds	r2, #1
   d4942:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4944:	4770      	bx	lr

000d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4946:	b510      	push	{r4, lr}
   d4948:	f851 3b04 	ldr.w	r3, [r1], #4
   d494c:	4604      	mov	r4, r0
   d494e:	f840 3b04 	str.w	r3, [r0], #4
   d4952:	f7ff fff1 	bl	d4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4956:	4620      	mov	r0, r4
   d4958:	bd10      	pop	{r4, pc}

000d495a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d495a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d495c:	6804      	ldr	r4, [r0, #0]
   d495e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4960:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4962:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4966:	42a6      	cmp	r6, r4
   d4968:	d004      	beq.n	d4974 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d496a:	1d20      	adds	r0, r4, #4
   d496c:	f7ff ffd8 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4970:	3408      	adds	r4, #8
   d4972:	e7f8      	b.n	d4966 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4974:	6828      	ldr	r0, [r5, #0]
   d4976:	f7ff fde7 	bl	d4548 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d497a:	4628      	mov	r0, r5
   d497c:	bd70      	pop	{r4, r5, r6, pc}

000d497e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d497e:	b538      	push	{r3, r4, r5, lr}
   d4980:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4982:	2010      	movs	r0, #16
   d4984:	780d      	ldrb	r5, [r1, #0]
   d4986:	f7ff fb86 	bl	d4096 <_Znwj>
   d498a:	b120      	cbz	r0, d4996 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d498c:	2300      	movs	r3, #0
   d498e:	6003      	str	r3, [r0, #0]
   d4990:	6043      	str	r3, [r0, #4]
   d4992:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d4994:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4996:	6020      	str	r0, [r4, #0]
   d4998:	4620      	mov	r0, r4
   d499a:	bd38      	pop	{r3, r4, r5, pc}

000d499c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d499c:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d499e:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d49a0:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49a2:	b134      	cbz	r4, d49b2 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d49a4:	4620      	mov	r0, r4
   d49a6:	f7ff ffd8 	bl	d495a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49aa:	2110      	movs	r1, #16
   d49ac:	4620      	mov	r0, r4
   d49ae:	f001 fa3c 	bl	d5e2a <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d49b2:	4628      	mov	r0, r5
   d49b4:	bd38      	pop	{r3, r4, r5, pc}

000d49b6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d49b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d49b8:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d49ba:	f104 001c 	add.w	r0, r4, #28
   d49be:	f7ff ffed 	bl	d499c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d49c2:	4620      	mov	r0, r4
   d49c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d49c8:	f7ff bb67 	b.w	d409a <_ZdlPv>

000d49cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d49cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d49ce:	6804      	ldr	r4, [r0, #0]
   d49d0:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d49d2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d49d4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d49d8:	42a6      	cmp	r6, r4
   d49da:	d004      	beq.n	d49e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49dc:	1d20      	adds	r0, r4, #4
   d49de:	f7ff ff9f 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49e2:	3408      	adds	r4, #8
   d49e4:	e7f8      	b.n	d49d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d49e6:	2300      	movs	r3, #0
   d49e8:	606b      	str	r3, [r5, #4]
   d49ea:	bd70      	pop	{r4, r5, r6, pc}

000d49ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d49ec:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d49ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49f0:	4606      	mov	r6, r0
   d49f2:	460c      	mov	r4, r1
   d49f4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d49f6:	d914      	bls.n	d4a22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d49f8:	4290      	cmp	r0, r2
   d49fa:	d213      	bcs.n	d4a24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d49fc:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d4a00:	1a6c      	subs	r4, r5, r1
   d4a02:	f1a1 0708 	sub.w	r7, r1, #8
   d4a06:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4a08:	42af      	cmp	r7, r5
   d4a0a:	d018      	beq.n	d4a3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d4a0c:	b11c      	cbz	r4, d4a16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4a0e:	4629      	mov	r1, r5
   d4a10:	4620      	mov	r0, r4
   d4a12:	f7ff ff98 	bl	d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4a16:	1d28      	adds	r0, r5, #4
   d4a18:	f7ff ff82 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4a1c:	3d08      	subs	r5, #8
   d4a1e:	3c08      	subs	r4, #8
   d4a20:	e7f2      	b.n	d4a08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4a22:	d00c      	beq.n	d4a3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d4a24:	42ac      	cmp	r4, r5
   d4a26:	d00a      	beq.n	d4a3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d4a28:	b11e      	cbz	r6, d4a32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d4a2a:	4621      	mov	r1, r4
   d4a2c:	4630      	mov	r0, r6
   d4a2e:	f7ff ff8a 	bl	d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4a32:	1d20      	adds	r0, r4, #4
   d4a34:	f7ff ff74 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4a38:	3408      	adds	r4, #8
   d4a3a:	3608      	adds	r6, #8
   d4a3c:	e7f2      	b.n	d4a24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d4a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a40 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d4a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4a42:	680b      	ldr	r3, [r1, #0]
   d4a44:	69da      	ldr	r2, [r3, #28]
   d4a46:	460e      	mov	r6, r1
   d4a48:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4a4a:	6851      	ldr	r1, [r2, #4]
   d4a4c:	4605      	mov	r5, r0
   d4a4e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4a52:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4a54:	4299      	cmp	r1, r3
   d4a56:	d00d      	beq.n	d4a74 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d4a58:	6818      	ldr	r0, [r3, #0]
   d4a5a:	6982      	ldr	r2, [r0, #24]
   d4a5c:	69c0      	ldr	r0, [r0, #28]
   d4a5e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4a62:	4290      	cmp	r0, r2
   d4a64:	d004      	beq.n	d4a70 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d4a66:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4a6a:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d4a6e:	e7f8      	b.n	d4a62 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d4a70:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4a72:	e7ef      	b.n	d4a54 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d4a74:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4a76:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4a7a:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4a7c:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4a7e:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4a80:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4a82:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4a84:	f8c3 200a 	str.w	r2, [r3, #10]
   d4a88:	f8c3 200e 	str.w	r2, [r3, #14]
   d4a8c:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d4a90:	682c      	ldr	r4, [r5, #0]
   d4a92:	686b      	ldr	r3, [r5, #4]
   d4a94:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4a98:	42bc      	cmp	r4, r7
   d4a9a:	d016      	beq.n	d4aca <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d4a9c:	4631      	mov	r1, r6
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	f7ff feaa 	bl	d47f8 <_ZN8particle13BlePeerDeviceeqERKS0_>
   d4aa4:	b908      	cbnz	r0, d4aaa <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4aa6:	3408      	adds	r4, #8
   d4aa8:	e7f6      	b.n	d4a98 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4aaa:	b174      	cbz	r4, d4aca <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d4aac:	1d20      	adds	r0, r4, #4
   d4aae:	f7ff ff37 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4ab2:	682b      	ldr	r3, [r5, #0]
   d4ab4:	686a      	ldr	r2, [r5, #4]
   d4ab6:	f104 0108 	add.w	r1, r4, #8
   d4aba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4abe:	4620      	mov	r0, r4
   d4ac0:	f7ff ff94 	bl	d49ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4ac4:	686b      	ldr	r3, [r5, #4]
   d4ac6:	3b01      	subs	r3, #1
   d4ac8:	606b      	str	r3, [r5, #4]
   d4aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4acc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4ace:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d4ad0:	6846      	ldr	r6, [r0, #4]
   d4ad2:	4668      	mov	r0, sp
   d4ad4:	f7ff ff37 	bl	d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4ad8:	6867      	ldr	r7, [r4, #4]
   d4ada:	68a3      	ldr	r3, [r4, #8]
   d4adc:	429f      	cmp	r7, r3
   d4ade:	db14      	blt.n	d4b0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d4ae0:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4ae2:	2f00      	cmp	r7, #0
   d4ae4:	dd0b      	ble.n	d4afe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4ae6:	00f8      	lsls	r0, r7, #3
   d4ae8:	f7ff fd26 	bl	d4538 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4aec:	4605      	mov	r5, r0
   d4aee:	b300      	cbz	r0, d4b32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d4af0:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4af4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4af8:	f7ff ff78 	bl	d49ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4afc:	e000      	b.n	d4b00 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4afe:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4b00:	6820      	ldr	r0, [r4, #0]
   d4b02:	f7ff fd21 	bl	d4548 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4b06:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4b08:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4b0a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4b0c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4b0e:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d4b12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4b16:	4629      	mov	r1, r5
   d4b18:	f105 0008 	add.w	r0, r5, #8
   d4b1c:	f7ff ff66 	bl	d49ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4b20:	b11d      	cbz	r5, d4b2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d4b22:	4669      	mov	r1, sp
   d4b24:	4628      	mov	r0, r5
   d4b26:	f7ff ff0e 	bl	d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d4b2a:	6863      	ldr	r3, [r4, #4]
   d4b2c:	3301      	adds	r3, #1
   d4b2e:	6063      	str	r3, [r4, #4]
   d4b30:	2501      	movs	r5, #1
   d4b32:	a801      	add	r0, sp, #4
   d4b34:	f7ff fef4 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4b38:	4628      	mov	r0, r5
   d4b3a:	b003      	add	sp, #12
   d4b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4b3e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4b40:	6804      	ldr	r4, [r0, #0]
   d4b42:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4b44:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4b46:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4b4a:	42a6      	cmp	r6, r4
   d4b4c:	d004      	beq.n	d4b58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4b4e:	1d20      	adds	r0, r4, #4
   d4b50:	f7ff fee6 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b54:	3408      	adds	r4, #8
   d4b56:	e7f8      	b.n	d4b4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4b58:	6828      	ldr	r0, [r5, #0]
   d4b5a:	f7ff fcf5 	bl	d4548 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4b5e:	4628      	mov	r0, r5
   d4b60:	bd70      	pop	{r4, r5, r6, pc}

000d4b62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4b62:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b64:	4604      	mov	r4, r0
   d4b66:	b138      	cbz	r0, d4b78 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d4b68:	f7ff ffe9 	bl	d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	210c      	movs	r1, #12
      }
   d4b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b74:	f001 b959 	b.w	d5e2a <_ZdlPvj>
   d4b78:	bd10      	pop	{r4, pc}

000d4b7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4b7a:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b7c:	4604      	mov	r4, r0
   d4b7e:	b138      	cbz	r0, d4b90 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d4b80:	f7ff ffdd 	bl	d4b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4b84:	4620      	mov	r0, r4
   d4b86:	210c      	movs	r1, #12
      }
   d4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b8c:	f001 b94d 	b.w	d5e2a <_ZdlPvj>
   d4b90:	bd10      	pop	{r4, pc}
	...

000d4b94 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4b96:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4b98:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4b9a:	6005      	str	r5, [r0, #0]
   d4b9c:	6045      	str	r5, [r0, #4]
   d4b9e:	6085      	str	r5, [r0, #8]
   d4ba0:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4ba2:	6105      	str	r5, [r0, #16]
   d4ba4:	6145      	str	r5, [r0, #20]
   d4ba6:	6185      	str	r5, [r0, #24]
   d4ba8:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4baa:	4628      	mov	r0, r5
   d4bac:	f7ff fb10 	bl	d41d0 <hal_ble_stack_init>
   d4bb0:	b120      	cbz	r0, d4bbc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d4bb2:	4a25      	ldr	r2, [pc, #148]	; (d4c48 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d4bb4:	4629      	mov	r1, r5
   d4bb6:	200a      	movs	r0, #10
   d4bb8:	f7ff fc22 	bl	d4400 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4bbc:	2301      	movs	r3, #1
   d4bbe:	f10d 0103 	add.w	r1, sp, #3
   d4bc2:	a801      	add	r0, sp, #4
   d4bc4:	f88d 3003 	strb.w	r3, [sp, #3]
   d4bc8:	f7ff fed9 	bl	d497e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bcc:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4bce:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4bd0:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4bd6:	b135      	cbz	r5, d4be6 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d4bd8:	4628      	mov	r0, r5
   d4bda:	f7ff febe 	bl	d495a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bde:	2110      	movs	r1, #16
   d4be0:	4628      	mov	r0, r5
   d4be2:	f001 f922 	bl	d5e2a <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4be6:	a801      	add	r0, sp, #4
   d4be8:	f7ff fed8 	bl	d499c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4bec:	2001      	movs	r0, #1
   d4bee:	f7ff fa52 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bf2:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4bf4:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4bf6:	b11b      	cbz	r3, d4c00 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4bf8:	2101      	movs	r1, #1
   d4bfa:	4618      	mov	r0, r3
   d4bfc:	f001 f915 	bl	d5e2a <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4c00:	200c      	movs	r0, #12
   d4c02:	f7ff fa48 	bl	d4096 <_Znwj>
   d4c06:	4603      	mov	r3, r0
   d4c08:	b118      	cbz	r0, d4c12 <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	6002      	str	r2, [r0, #0]
   d4c0e:	6042      	str	r2, [r0, #4]
   d4c10:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c12:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4c14:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c16:	b108      	cbz	r0, d4c1c <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d4c18:	f7ff ffa3 	bl	d4b62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4c1c:	200c      	movs	r0, #12
   d4c1e:	f7ff fa3a 	bl	d4096 <_Znwj>
   d4c22:	4603      	mov	r3, r0
   d4c24:	b118      	cbz	r0, d4c2e <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d4c26:	2200      	movs	r2, #0
   d4c28:	6002      	str	r2, [r0, #0]
   d4c2a:	6042      	str	r2, [r0, #4]
   d4c2c:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c2e:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4c30:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4c32:	b108      	cbz	r0, d4c38 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d4c34:	f7ff ffa1 	bl	d4b7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d4c38:	2200      	movs	r2, #0
   d4c3a:	4621      	mov	r1, r4
   d4c3c:	4803      	ldr	r0, [pc, #12]	; (d4c4c <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d4c3e:	f7ff facf 	bl	d41e0 <hal_ble_set_callback_on_events>
}
   d4c42:	4620      	mov	r0, r4
   d4c44:	b003      	add	sp, #12
   d4c46:	bd30      	pop	{r4, r5, pc}
   d4c48:	000d42c1 	.word	0x000d42c1
   d4c4c:	000d4d41 	.word	0x000d4d41

000d4c50 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4c50:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4c52:	4c0a      	ldr	r4, [pc, #40]	; (d4c7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4c54:	6823      	ldr	r3, [r4, #0]
   d4c56:	07db      	lsls	r3, r3, #31
   d4c58:	d40e      	bmi.n	d4c78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	f7ff fa21 	bl	d40a2 <__cxa_guard_acquire>
   d4c60:	b150      	cbz	r0, d4c78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4c62:	4807      	ldr	r0, [pc, #28]	; (d4c80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c64:	f7ff ff96 	bl	d4b94 <_ZN8particle14BleLocalDeviceC1Ev>
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f7ff fa1f 	bl	d40ac <__cxa_guard_release>
   d4c6e:	4a05      	ldr	r2, [pc, #20]	; (d4c84 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4c70:	4905      	ldr	r1, [pc, #20]	; (d4c88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4c72:	4803      	ldr	r0, [pc, #12]	; (d4c80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c74:	f001 f8d4 	bl	d5e20 <__aeabi_atexit>
    return instance;
}
   d4c78:	4801      	ldr	r0, [pc, #4]	; (d4c80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4c7a:	bd10      	pop	{r4, pc}
   d4c7c:	2003e3e0 	.word	0x2003e3e0
   d4c80:	2003e3c0 	.word	0x2003e3c0
   d4c84:	2003e3a8 	.word	0x2003e3a8
   d4c88:	000d4c8d 	.word	0x000d4c8d

000d4c8c <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4c8c:	b510      	push	{r4, lr}
   d4c8e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c90:	69c0      	ldr	r0, [r0, #28]
   d4c92:	b108      	cbz	r0, d4c98 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d4c94:	f7ff ff71 	bl	d4b7a <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c98:	69a0      	ldr	r0, [r4, #24]
   d4c9a:	b108      	cbz	r0, d4ca0 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d4c9c:	f7ff ff61 	bl	d4b62 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ca0:	6960      	ldr	r0, [r4, #20]
   d4ca2:	b110      	cbz	r0, d4caa <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ca4:	2101      	movs	r1, #1
   d4ca6:	f001 f8c0 	bl	d5e2a <_ZdlPvj>
   d4caa:	f104 0010 	add.w	r0, r4, #16
   d4cae:	f7ff fe75 	bl	d499c <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	bd10      	pop	{r4, pc}
	...

000d4cb8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4cba:	2500      	movs	r5, #0
   d4cbc:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4cbe:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4cc0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4cc2:	2020      	movs	r0, #32
   d4cc4:	f7ff f9e7 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4cc8:	4604      	mov	r4, r0
   d4cca:	b1b0      	cbz	r0, d4cfa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d4ccc:	4603      	mov	r3, r0
   d4cce:	a901      	add	r1, sp, #4
   d4cd0:	f803 5b01 	strb.w	r5, [r3], #1
   d4cd4:	f8c0 5001 	str.w	r5, [r0, #1]
   d4cd8:	605d      	str	r5, [r3, #4]
   d4cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4cde:	82c3      	strh	r3, [r0, #22]
   d4ce0:	237f      	movs	r3, #127	; 0x7f
   d4ce2:	f8c0 500a 	str.w	r5, [r0, #10]
   d4ce6:	f8c0 500e 	str.w	r5, [r0, #14]
   d4cea:	f8c0 5012 	str.w	r5, [r0, #18]
   d4cee:	7603      	strb	r3, [r0, #24]
   d4cf0:	301c      	adds	r0, #28
   d4cf2:	f88d 5004 	strb.w	r5, [sp, #4]
   d4cf6:	f7ff fe42 	bl	d497e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4cfa:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4cfc:	2014      	movs	r0, #20
   d4cfe:	9301      	str	r3, [sp, #4]
   d4d00:	f7ff f9c9 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4d04:	b128      	cbz	r0, d4d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d06:	2301      	movs	r3, #1
   d4d08:	6043      	str	r3, [r0, #4]
   d4d0a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4d0c:	4b06      	ldr	r3, [pc, #24]	; (d4d28 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d4d0e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4d10:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d12:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4d14:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d16:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4d18:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d1a:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4d1c:	f7ff fe00 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d4d20:	4630      	mov	r0, r6
   d4d22:	b002      	add	sp, #8
   d4d24:	bd70      	pop	{r4, r5, r6, pc}
   d4d26:	bf00      	nop
   d4d28:	000d6234 	.word	0x000d6234

000d4d2c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4d2c:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d4d2e:	f04f 0100 	mov.w	r1, #0
   d4d32:	aa01      	add	r2, sp, #4
   d4d34:	4604      	mov	r4, r0
   d4d36:	f7ff ffbf 	bl	d4cb8 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	b002      	add	sp, #8
   d4d3e:	bd10      	pop	{r4, pc}

000d4d40 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d4d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d42:	4604      	mov	r4, r0
   d4d44:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d4d46:	460d      	mov	r5, r1
   d4d48:	2900      	cmp	r1, #0
   d4d4a:	f000 80a5 	beq.w	d4e98 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4d4e:	a803      	add	r0, sp, #12
   d4d50:	f7ff fc58 	bl	d4604 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d4d54:	6863      	ldr	r3, [r4, #4]
   d4d56:	3b03      	subs	r3, #3
   d4d58:	2b07      	cmp	r3, #7
   d4d5a:	f200 809a 	bhi.w	d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4d5e:	e8df f003 	tbb	[pc, r3]
   d4d62:	4404      	.short	0x4404
   d4d64:	98989898 	.word	0x98989898
   d4d68:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d4d6a:	a806      	add	r0, sp, #24
   d4d6c:	f7ff ffde 	bl	d4d2c <_ZN8particle13BlePeerDeviceC1Ev>
   d4d70:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d4d72:	89a2      	ldrh	r2, [r4, #12]
   d4d74:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d4d76:	8962      	ldrh	r2, [r4, #10]
   d4d78:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d4d7a:	8922      	ldrh	r2, [r4, #8]
   d4d7c:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d4d7e:	8922      	ldrh	r2, [r4, #8]
   d4d80:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d4d82:	8b22      	ldrh	r2, [r4, #24]
   d4d84:	82da      	strh	r2, [r3, #22]
   d4d86:	4622      	mov	r2, r4
   d4d88:	7da1      	ldrb	r1, [r4, #22]
   d4d8a:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d4d8e:	9004      	str	r0, [sp, #16]
   d4d90:	8892      	ldrh	r2, [r2, #4]
   d4d92:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4d96:	9804      	ldr	r0, [sp, #16]
   d4d98:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d4d9c:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4d9e:	f8c3 0001 	str.w	r0, [r3, #1]
   d4da2:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d4da6:	682b      	ldr	r3, [r5, #0]
   d4da8:	b113      	cbz	r3, d4db0 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d4daa:	68a9      	ldr	r1, [r5, #8]
   d4dac:	a806      	add	r0, sp, #24
   d4dae:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d4db0:	7ba3      	ldrb	r3, [r4, #14]
   d4db2:	2b01      	cmp	r3, #1
   d4db4:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4db6:	bf0b      	itete	eq
   d4db8:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4dba:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4dbc:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4dbe:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4dc0:	bf0c      	ite	eq
   d4dc2:	69ac      	ldreq	r4, [r5, #24]
   d4dc4:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d4dc6:	6863      	ldr	r3, [r4, #4]
   d4dc8:	2b00      	cmp	r3, #0
   d4dca:	dc0a      	bgt.n	d4de2 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4dcc:	a906      	add	r1, sp, #24
   d4dce:	a808      	add	r0, sp, #32
   d4dd0:	f7ff fdb9 	bl	d4946 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d4dd4:	a908      	add	r1, sp, #32
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	f7ff fe78 	bl	d4acc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ddc:	a809      	add	r0, sp, #36	; 0x24
   d4dde:	f7ff fd9f 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de2:	a807      	add	r0, sp, #28
   d4de4:	f7ff fd9c 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4de8:	e053      	b.n	d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d4dea:	89a1      	ldrh	r1, [r4, #12]
   d4dec:	4628      	mov	r0, r5
   d4dee:	f7ff fd75 	bl	d48dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4df2:	4604      	mov	r4, r0
   d4df4:	2800      	cmp	r0, #0
   d4df6:	d04c      	beq.n	d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d4df8:	686b      	ldr	r3, [r5, #4]
   d4dfa:	b10b      	cbz	r3, d4e00 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d4dfc:	68e9      	ldr	r1, [r5, #12]
   d4dfe:	4798      	blx	r3
   d4e00:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d4e02:	781a      	ldrb	r2, [r3, #0]
   d4e04:	2a01      	cmp	r2, #1
   d4e06:	d104      	bne.n	d4e12 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d4e08:	4621      	mov	r1, r4
   d4e0a:	69e8      	ldr	r0, [r5, #28]
   d4e0c:	f7ff fe18 	bl	d4a40 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d4e10:	e03f      	b.n	d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4e12:	69da      	ldr	r2, [r3, #28]
   d4e14:	69a8      	ldr	r0, [r5, #24]
   d4e16:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4e18:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4e1a:	2600      	movs	r6, #0
   d4e1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4e20:	4299      	cmp	r1, r3
   d4e22:	d00d      	beq.n	d4e40 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d4e24:	681d      	ldr	r5, [r3, #0]
   d4e26:	69aa      	ldr	r2, [r5, #24]
   d4e28:	69ed      	ldr	r5, [r5, #28]
   d4e2a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4e2e:	4295      	cmp	r5, r2
   d4e30:	d004      	beq.n	d4e3c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d4e32:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4e36:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d4e3a:	e7f8      	b.n	d4e2e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d4e3c:	3308      	adds	r3, #8
   d4e3e:	e7ef      	b.n	d4e20 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d4e40:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4e42:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4e46:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4e48:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4e4a:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4e4c:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4e4e:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4e50:	f8c3 200a 	str.w	r2, [r3, #10]
   d4e54:	f8c3 200e 	str.w	r2, [r3, #14]
   d4e58:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d4e5c:	f7ff fdb6 	bl	d49cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d4e60:	e017      	b.n	d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4e62:	8aa1      	ldrh	r1, [r4, #20]
   d4e64:	4628      	mov	r0, r5
   d4e66:	f7ff fd39 	bl	d48dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4e6a:	b190      	cbz	r0, d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d4e6c:	8ae1      	ldrh	r1, [r4, #22]
   d4e6e:	9000      	str	r0, [sp, #0]
   d4e70:	68e3      	ldr	r3, [r4, #12]
   d4e72:	6922      	ldr	r2, [r4, #16]
   d4e74:	6928      	ldr	r0, [r5, #16]
   d4e76:	e00a      	b.n	d4e8e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4e78:	8aa1      	ldrh	r1, [r4, #20]
   d4e7a:	4628      	mov	r0, r5
   d4e7c:	f7ff fd2e 	bl	d48dc <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4e80:	b138      	cbz	r0, d4e92 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4e82:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d4e84:	8ae1      	ldrh	r1, [r4, #22]
   d4e86:	9000      	str	r0, [sp, #0]
   d4e88:	68e3      	ldr	r3, [r4, #12]
   d4e8a:	6922      	ldr	r2, [r4, #16]
   d4e8c:	69e8      	ldr	r0, [r5, #28]
   d4e8e:	f7ff fc72 	bl	d4776 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4e92:	a803      	add	r0, sp, #12
   d4e94:	f7ff fbc4 	bl	d4620 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d4e98:	b00b      	add	sp, #44	; 0x2c
   d4e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e9c:	4802      	ldr	r0, [pc, #8]	; (d4ea8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4e9e:	2300      	movs	r3, #0
   d4ea0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4ea2:	f7ff b9ed 	b.w	d4280 <os_mutex_recursive_create>
   d4ea6:	bf00      	nop
   d4ea8:	2003e3e4 	.word	0x2003e3e4

000d4eac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4eac:	4770      	bx	lr

000d4eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4eae:	2000      	movs	r0, #0
   d4eb0:	4770      	bx	lr

000d4eb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4eb2:	b510      	push	{r4, lr}
   d4eb4:	2110      	movs	r1, #16
   d4eb6:	4604      	mov	r4, r0
   d4eb8:	f000 ffb7 	bl	d5e2a <_ZdlPvj>
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	bd10      	pop	{r4, pc}

000d4ec0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4ec0:	b508      	push	{r3, lr}
      { delete this; }
   d4ec2:	b108      	cbz	r0, d4ec8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ec4:	f7ff fff5 	bl	d4eb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ec8:	bd08      	pop	{r3, pc}

000d4eca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4eca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ecc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ece:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ed0:	b113      	cbz	r3, d4ed8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ed2:	2203      	movs	r2, #3
   d4ed4:	4601      	mov	r1, r0
   d4ed6:	4798      	blx	r3
    }
   d4ed8:	4620      	mov	r0, r4
   d4eda:	bd10      	pop	{r4, pc}

000d4edc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4edc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ede:	68c4      	ldr	r4, [r0, #12]
   d4ee0:	b1ec      	cbz	r4, d4f1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4ee2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4ee4:	2b02      	cmp	r3, #2
   d4ee6:	d102      	bne.n	d4eee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ee8:	68e0      	ldr	r0, [r4, #12]
   d4eea:	f7ff fb2d 	bl	d4548 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4eee:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ef0:	b135      	cbz	r5, d4f00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ef2:	4628      	mov	r0, r5
   d4ef4:	f7ff ffe9 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
   d4ef8:	2110      	movs	r1, #16
   d4efa:	4628      	mov	r0, r5
   d4efc:	f000 ff95 	bl	d5e2a <_ZdlPvj>
   d4f00:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f02:	b135      	cbz	r5, d4f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d4f04:	4628      	mov	r0, r5
   d4f06:	f7ff ffe0 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
   d4f0a:	2110      	movs	r1, #16
   d4f0c:	4628      	mov	r0, r5
   d4f0e:	f000 ff8c 	bl	d5e2a <_ZdlPvj>
   d4f12:	4620      	mov	r0, r4
   d4f14:	2114      	movs	r1, #20
   d4f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f1a:	f000 bf86 	b.w	d5e2a <_ZdlPvj>
   d4f1e:	bd38      	pop	{r3, r4, r5, pc}

000d4f20 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4f20:	b510      	push	{r4, lr}
   d4f22:	b088      	sub	sp, #32
   d4f24:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4f26:	4668      	mov	r0, sp
   d4f28:	f000 fd6b 	bl	d5a02 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4f2c:	4669      	mov	r1, sp
   d4f2e:	a804      	add	r0, sp, #16
   d4f30:	f000 fd89 	bl	d5a46 <_ZN6StringC1ERKS_>
   d4f34:	a804      	add	r0, sp, #16
   d4f36:	47a0      	blx	r4
   d4f38:	4604      	mov	r4, r0
   d4f3a:	a804      	add	r0, sp, #16
   d4f3c:	f000 fd1a 	bl	d5974 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4f40:	4668      	mov	r0, sp
   d4f42:	f000 fd17 	bl	d5974 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4f46:	4620      	mov	r0, r4
   d4f48:	b008      	add	sp, #32
   d4f4a:	bd10      	pop	{r4, pc}

000d4f4c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4f4e:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4f50:	b085      	sub	sp, #20
   d4f52:	4607      	mov	r7, r0
   d4f54:	460e      	mov	r6, r1
   d4f56:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d4f58:	2100      	movs	r1, #0
   d4f5a:	4622      	mov	r2, r4
   d4f5c:	4668      	mov	r0, sp
   d4f5e:	f001 f8f4 	bl	d614a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f62:	2200      	movs	r2, #0
   d4f64:	4669      	mov	r1, sp
   d4f66:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d4f68:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d4f6c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4f6e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4f70:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f72:	f7ff fa79 	bl	d4468 <spark_function>
}
   d4f76:	b005      	add	sp, #20
   d4f78:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4f7a:	b513      	push	{r0, r1, r4, lr}
   d4f7c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f7e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4f82:	2300      	movs	r3, #0
   d4f84:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f86:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f88:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4f8a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f8c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4f8e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f90:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f92:	f7ff fcc5 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f96:	4620      	mov	r0, r4
   d4f98:	b002      	add	sp, #8
   d4f9a:	bd10      	pop	{r4, pc}

000d4f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f9e:	460c      	mov	r4, r1
   d4fa0:	ad02      	add	r5, sp, #8
   d4fa2:	f854 3b04 	ldr.w	r3, [r4], #4
   d4fa6:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4faa:	4606      	mov	r6, r0
   d4fac:	460f      	mov	r7, r1
   d4fae:	a801      	add	r0, sp, #4
   d4fb0:	4621      	mov	r1, r4
   d4fb2:	f7ff fcc1 	bl	d4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4fb6:	4629      	mov	r1, r5
   d4fb8:	4630      	mov	r0, r6
   d4fba:	f7ff ffde 	bl	d4f7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fbe:	a801      	add	r0, sp, #4
   d4fc0:	f7ff fcae 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	f7ff fcab 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4fca:	4638      	mov	r0, r7
   d4fcc:	2108      	movs	r1, #8
   d4fce:	f000 ff2c 	bl	d5e2a <_ZdlPvj>
        return p;
    }
   d4fd2:	4630      	mov	r0, r6
   d4fd4:	b003      	add	sp, #12
   d4fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fd8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4fd8:	b513      	push	{r0, r1, r4, lr}
   d4fda:	460b      	mov	r3, r1
   d4fdc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fde:	c803      	ldmia	r0, {r0, r1}
   d4fe0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4fe8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4fec:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ff0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ff4:	b002      	add	sp, #8
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ff8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ffa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ffc:	b90a      	cbnz	r2, d5002 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ffe:	f000 ff16 	bl	d5e2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5002:	68c3      	ldr	r3, [r0, #12]
    }
   d5004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5008:	4718      	bx	r3

000d500a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d500a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d500c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d500e:	f100 0110 	add.w	r1, r0, #16
   d5012:	f7ff fff1 	bl	d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5016:	bd08      	pop	{r3, pc}

000d5018 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5018:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d501a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d501c:	b90a      	cbnz	r2, d5022 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d501e:	f000 ff06 	bl	d5e2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5022:	68c3      	ldr	r3, [r0, #12]
    }
   d5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5028:	4718      	bx	r3

000d502a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d502a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d502c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d502e:	f100 0110 	add.w	r1, r0, #16
   d5032:	f7ff fff1 	bl	d5018 <_ZNKSt8functionIFvRKbEEclES1_>
   d5036:	bd08      	pop	{r3, pc}

000d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5038:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d503a:	2300      	movs	r3, #0
   d503c:	6083      	str	r3, [r0, #8]
   d503e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5040:	4604      	mov	r4, r0
   d5042:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5044:	b12b      	cbz	r3, d5052 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5046:	2202      	movs	r2, #2
   d5048:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d504a:	68eb      	ldr	r3, [r5, #12]
   d504c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d504e:	68ab      	ldr	r3, [r5, #8]
   d5050:	60a3      	str	r3, [r4, #8]
	}
    }
   d5052:	4620      	mov	r0, r4
   d5054:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d505c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5060:	b086      	sub	sp, #24
   d5062:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5064:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5068:	808b      	strh	r3, [r1, #4]
   d506a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d506c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d506e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d5072:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5074:	f04f 0002 	mov.w	r0, #2
   d5078:	e8d4 1f4f 	ldrexb	r1, [r4]
   d507c:	4299      	cmp	r1, r3
   d507e:	d103      	bne.n	d5088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d5080:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5084:	2d00      	cmp	r5, #0
   d5086:	d1f7      	bne.n	d5078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5088:	d002      	beq.n	d5090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d508a:	f88d 1000 	strb.w	r1, [sp]
   d508e:	e06b      	b.n	d5168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5090:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5094:	bf1e      	ittt	ne
   d5096:	60e7      	strne	r7, [r4, #12]
   d5098:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d509a:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d509c:	2301      	movs	r3, #1
   d509e:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50a2:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d50a4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d50a6:	f104 0308 	add.w	r3, r4, #8
   d50aa:	f3bf 8f5f 	dmb	sy
   d50ae:	e853 6f00 	ldrex	r6, [r3]
   d50b2:	e843 0200 	strex	r2, r0, [r3]
   d50b6:	2a00      	cmp	r2, #0
   d50b8:	d1f9      	bne.n	d50ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d50ba:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d50be:	2e00      	cmp	r6, #0
   d50c0:	d052      	beq.n	d5168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d50c2:	f7ff f9ad 	bl	d4420 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d50c6:	b120      	cbz	r0, d50d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50c8:	4629      	mov	r1, r5
   d50ca:	4630      	mov	r0, r6
   d50cc:	f7ff ff94 	bl	d4ff8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50d0:	e043      	b.n	d515a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50d2:	4631      	mov	r1, r6
   d50d4:	4668      	mov	r0, sp
   d50d6:	f7ff ffaf 	bl	d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50da:	68e0      	ldr	r0, [r4, #12]
   d50dc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50e0:	b108      	cbz	r0, d50e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d50e2:	f001 f863 	bl	d61ac <strdup>
   d50e6:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50e8:	2010      	movs	r0, #16
   d50ea:	f8ad 5014 	strh.w	r5, [sp, #20]
   d50ee:	f7fe ffd2 	bl	d4096 <_Znwj>
   d50f2:	4605      	mov	r5, r0
   d50f4:	b330      	cbz	r0, d5144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50f6:	f04f 0800 	mov.w	r8, #0
   d50fa:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50fe:	2018      	movs	r0, #24
   d5100:	f7fe ffc9 	bl	d4096 <_Znwj>
   d5104:	4604      	mov	r4, r0
   d5106:	b1c0      	cbz	r0, d513a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5108:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d510c:	4601      	mov	r1, r0
   d510e:	4668      	mov	r0, sp
   d5110:	f7ff ff62 	bl	d4fd8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5114:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5116:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5118:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d511a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d511c:	9202      	str	r2, [sp, #8]
   d511e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5120:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5122:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5126:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5128:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d512c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5130:	9b04      	ldr	r3, [sp, #16]
   d5132:	9203      	str	r2, [sp, #12]
   d5134:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5136:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d513a:	4b0e      	ldr	r3, [pc, #56]	; (d5174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d513c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d513e:	4b0e      	ldr	r3, [pc, #56]	; (d5178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5140:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5142:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5144:	9804      	ldr	r0, [sp, #16]
   d5146:	f7ff f9ff 	bl	d4548 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d514a:	4668      	mov	r0, sp
   d514c:	f7ff febd 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5150:	2200      	movs	r2, #0
   d5152:	4629      	mov	r1, r5
   d5154:	4809      	ldr	r0, [pc, #36]	; (d517c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5156:	f7ff f96b 	bl	d4430 <application_thread_invoke>
   d515a:	4630      	mov	r0, r6
   d515c:	f7ff feb5 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5160:	2110      	movs	r1, #16
   d5162:	4630      	mov	r0, r6
   d5164:	f000 fe61 	bl	d5e2a <_ZdlPvj>
   d5168:	4638      	mov	r0, r7
   d516a:	f7ff f9ed 	bl	d4548 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d516e:	b006      	add	sp, #24
   d5170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5174:	000d500b 	.word	0x000d500b
   d5178:	000d5269 	.word	0x000d5269
   d517c:	000d4589 	.word	0x000d4589

000d5180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5184:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5186:	ad07      	add	r5, sp, #28
   d5188:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d518c:	4606      	mov	r6, r0
   d518e:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5190:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5192:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5194:	460f      	mov	r7, r1
   d5196:	4690      	mov	r8, r2
   d5198:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d519c:	f8c5 b004 	str.w	fp, [r5, #4]
   d51a0:	f8c5 b008 	str.w	fp, [r5, #8]
   d51a4:	9307      	str	r3, [sp, #28]
   d51a6:	f7fe ff76 	bl	d4096 <_Znwj>
   d51aa:	4604      	mov	r4, r0
   d51ac:	b138      	cbz	r0, d51be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51ae:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51b2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51b6:	f8c0 b004 	str.w	fp, [r0, #4]
   d51ba:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51be:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51c0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d51c2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51c4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51c6:	f7fe ff66 	bl	d4096 <_Znwj>
   d51ca:	b128      	cbz	r0, d51d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d51cc:	2301      	movs	r3, #1
   d51ce:	6043      	str	r3, [r0, #4]
   d51d0:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d51d2:	4b23      	ldr	r3, [pc, #140]	; (d5260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d51d4:	6003      	str	r3, [r0, #0]
   d51d6:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51d8:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d51da:	4b22      	ldr	r3, [pc, #136]	; (d5264 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d51dc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51de:	2008      	movs	r0, #8
   d51e0:	f7fe ff59 	bl	d4096 <_Znwj>
   d51e4:	4604      	mov	r4, r0
   d51e6:	b128      	cbz	r0, d51f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51e8:	9b03      	ldr	r3, [sp, #12]
   d51ea:	f840 3b04 	str.w	r3, [r0], #4
   d51ee:	a904      	add	r1, sp, #16
   d51f0:	f7ff fba2 	bl	d4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51f4:	9500      	str	r5, [sp, #0]
   d51f6:	fa5f f38a 	uxtb.w	r3, sl
   d51fa:	464a      	mov	r2, r9
   d51fc:	4641      	mov	r1, r8
   d51fe:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5200:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5202:	f7ff f939 	bl	d4478 <spark_send_event>
   d5206:	b9b8      	cbnz	r0, d5238 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5208:	9b03      	ldr	r3, [sp, #12]
   d520a:	785b      	ldrb	r3, [r3, #1]
   d520c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5210:	b993      	cbnz	r3, d5238 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5212:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5216:	a905      	add	r1, sp, #20
   d5218:	a803      	add	r0, sp, #12
   d521a:	9205      	str	r2, [sp, #20]
   d521c:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5220:	f7ff ff1a 	bl	d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5224:	9805      	ldr	r0, [sp, #20]
   d5226:	f7ff f98f 	bl	d4548 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d522a:	a805      	add	r0, sp, #20
   d522c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d522e:	f7ff feb5 	bl	d4f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5232:	a806      	add	r0, sp, #24
   d5234:	f7ff fb74 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5238:	9b03      	ldr	r3, [sp, #12]
   d523a:	9305      	str	r3, [sp, #20]
   d523c:	a904      	add	r1, sp, #16
   d523e:	a806      	add	r0, sp, #24
   d5240:	f7ff fb7a 	bl	d4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5244:	a905      	add	r1, sp, #20
   d5246:	4630      	mov	r0, r6
   d5248:	f7ff fe97 	bl	d4f7a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d524c:	a806      	add	r0, sp, #24
   d524e:	f7ff fb67 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5252:	a804      	add	r0, sp, #16
   d5254:	f7ff fb64 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5258:	4630      	mov	r0, r6
   d525a:	b00b      	add	sp, #44	; 0x2c
   d525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5260:	000d6250 	.word	0x000d6250
   d5264:	000d53d5 	.word	0x000d53d5

000d5268 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5268:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d526a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d526c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d526e:	d006      	beq.n	d527e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5270:	2a03      	cmp	r2, #3
   d5272:	d017      	beq.n	d52a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5274:	2a01      	cmp	r2, #1
   d5276:	d121      	bne.n	d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5278:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d527a:	6003      	str	r3, [r0, #0]
	      break;
   d527c:	e01e      	b.n	d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d527e:	2018      	movs	r0, #24
   d5280:	680e      	ldr	r6, [r1, #0]
   d5282:	f7fe ff08 	bl	d4096 <_Znwj>
   d5286:	4605      	mov	r5, r0
   d5288:	b150      	cbz	r0, d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d528a:	4631      	mov	r1, r6
   d528c:	f7ff fed4 	bl	d5038 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5290:	6930      	ldr	r0, [r6, #16]
   d5292:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5296:	b108      	cbz	r0, d529c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5298:	f000 ff88 	bl	d61ac <strdup>
   d529c:	6128      	str	r0, [r5, #16]
   d529e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52a0:	6025      	str	r5, [r4, #0]
   d52a2:	e00b      	b.n	d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52a4:	6804      	ldr	r4, [r0, #0]
   d52a6:	b14c      	cbz	r4, d52bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d52a8:	6920      	ldr	r0, [r4, #16]
   d52aa:	f7ff f94d 	bl	d4548 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff fe0b 	bl	d4eca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52b4:	2118      	movs	r1, #24
   d52b6:	4620      	mov	r0, r4
   d52b8:	f000 fdb7 	bl	d5e2a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52bc:	2000      	movs	r0, #0
   d52be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52c0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52c2:	2300      	movs	r3, #0
   d52c4:	6083      	str	r3, [r0, #8]
   d52c6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52c8:	4604      	mov	r4, r0
   d52ca:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d52cc:	b12b      	cbz	r3, d52da <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52ce:	2202      	movs	r2, #2
   d52d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52d2:	68eb      	ldr	r3, [r5, #12]
   d52d4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52d6:	68ab      	ldr	r3, [r5, #8]
   d52d8:	60a3      	str	r3, [r4, #8]
	}
    }
   d52da:	4620      	mov	r0, r4
   d52dc:	bd38      	pop	{r3, r4, r5, pc}

000d52de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52de:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52e0:	b570      	push	{r4, r5, r6, lr}
   d52e2:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52e4:	d006      	beq.n	d52f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d52e6:	2a03      	cmp	r2, #3
   d52e8:	d011      	beq.n	d530e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d52ea:	2a01      	cmp	r2, #1
   d52ec:	d118      	bne.n	d5320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52ee:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52f0:	6003      	str	r3, [r0, #0]
	      break;
   d52f2:	e015      	b.n	d5320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52f4:	2014      	movs	r0, #20
   d52f6:	680e      	ldr	r6, [r1, #0]
   d52f8:	f7fe fecd 	bl	d4096 <_Znwj>
   d52fc:	4605      	mov	r5, r0
   d52fe:	b120      	cbz	r0, d530a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5300:	4631      	mov	r1, r6
   d5302:	f7ff ffdd 	bl	d52c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5306:	7c33      	ldrb	r3, [r6, #16]
   d5308:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d530a:	6025      	str	r5, [r4, #0]
   d530c:	e008      	b.n	d5320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d530e:	6804      	ldr	r4, [r0, #0]
   d5310:	b134      	cbz	r4, d5320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5312:	4620      	mov	r0, r4
   d5314:	f7ff fdd9 	bl	d4eca <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5318:	2114      	movs	r1, #20
   d531a:	4620      	mov	r0, r4
   d531c:	f000 fd85 	bl	d5e2a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5320:	2000      	movs	r0, #0
   d5322:	bd70      	pop	{r4, r5, r6, pc}

000d5324 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5324:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5326:	2300      	movs	r3, #0
   d5328:	b087      	sub	sp, #28
   d532a:	460c      	mov	r4, r1
   d532c:	f3bf 8f5f 	dmb	sy
   d5330:	e850 6f00 	ldrex	r6, [r0]
   d5334:	e840 3200 	strex	r2, r3, [r0]
   d5338:	2a00      	cmp	r2, #0
   d533a:	d1f9      	bne.n	d5330 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d533c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5340:	2e00      	cmp	r6, #0
   d5342:	d03f      	beq.n	d53c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5344:	4618      	mov	r0, r3
   d5346:	f7ff f86b 	bl	d4420 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d534a:	4607      	mov	r7, r0
   d534c:	b120      	cbz	r0, d5358 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d534e:	4621      	mov	r1, r4
   d5350:	4630      	mov	r0, r6
   d5352:	f7ff fe61 	bl	d5018 <_ZNKSt8functionIFvRKbEEclES1_>
   d5356:	e02e      	b.n	d53b6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5358:	4631      	mov	r1, r6
   d535a:	a801      	add	r0, sp, #4
   d535c:	f7ff ffb0 	bl	d52c0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5360:	7823      	ldrb	r3, [r4, #0]
   d5362:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5366:	2010      	movs	r0, #16
   d5368:	f7fe fe95 	bl	d4096 <_Znwj>
   d536c:	4605      	mov	r5, r0
   d536e:	b1d0      	cbz	r0, d53a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5370:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5372:	2014      	movs	r0, #20
   d5374:	f7fe fe8f 	bl	d4096 <_Znwj>
   d5378:	4604      	mov	r4, r0
   d537a:	b178      	cbz	r0, d539c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d537c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d537e:	4601      	mov	r1, r0
   d5380:	a801      	add	r0, sp, #4
   d5382:	f7ff fe29 	bl	d4fd8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5386:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5388:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d538a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d538c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d538e:	9203      	str	r2, [sp, #12]
   d5390:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5392:	60e3      	str	r3, [r4, #12]
   d5394:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5398:	9204      	str	r2, [sp, #16]
   d539a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d539c:	4b0a      	ldr	r3, [pc, #40]	; (d53c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d539e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53a0:	4b0a      	ldr	r3, [pc, #40]	; (d53cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53a2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d53a4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53a6:	a801      	add	r0, sp, #4
   d53a8:	f7ff fd8f 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53ac:	2200      	movs	r2, #0
   d53ae:	4629      	mov	r1, r5
   d53b0:	4807      	ldr	r0, [pc, #28]	; (d53d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53b2:	f7ff f83d 	bl	d4430 <application_thread_invoke>
   d53b6:	4630      	mov	r0, r6
   d53b8:	f7ff fd87 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53bc:	2110      	movs	r1, #16
   d53be:	4630      	mov	r0, r6
   d53c0:	f000 fd33 	bl	d5e2a <_ZdlPvj>
        }
    }
   d53c4:	b007      	add	sp, #28
   d53c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53c8:	000d502b 	.word	0x000d502b
   d53cc:	000d52df 	.word	0x000d52df
   d53d0:	000d4589 	.word	0x000d4589

000d53d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d53d4:	b530      	push	{r4, r5, lr}
   d53d6:	b085      	sub	sp, #20
   d53d8:	4604      	mov	r4, r0
   d53da:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d53dc:	4668      	mov	r0, sp
   d53de:	4611      	mov	r1, r2
   d53e0:	f7ff fddc 	bl	d4f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d53e4:	b17c      	cbz	r4, d5406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d53e6:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53e8:	4628      	mov	r0, r5
   d53ea:	b10d      	cbz	r5, d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d53ec:	f000 fede 	bl	d61ac <strdup>
   d53f0:	9002      	str	r0, [sp, #8]
   d53f2:	a902      	add	r1, sp, #8
   d53f4:	4668      	mov	r0, sp
   d53f6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d53fa:	f7ff fe2d 	bl	d5058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d53fe:	9802      	ldr	r0, [sp, #8]
   d5400:	f7ff f8a2 	bl	d4548 <free>
   d5404:	e01d      	b.n	d5442 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5406:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5408:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d540c:	f04f 0201 	mov.w	r2, #1
   d5410:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5414:	42a3      	cmp	r3, r4
   d5416:	d103      	bne.n	d5420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5418:	e8c0 2f41 	strexb	r1, r2, [r0]
   d541c:	2900      	cmp	r1, #0
   d541e:	d1f7      	bne.n	d5410 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5420:	d002      	beq.n	d5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5422:	f88d 3008 	strb.w	r3, [sp, #8]
   d5426:	e00c      	b.n	d5442 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5428:	f110 010c 	adds.w	r1, r0, #12
   d542c:	f04f 0301 	mov.w	r3, #1
   d5430:	bf18      	it	ne
   d5432:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5434:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5438:	3004      	adds	r0, #4
   d543a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d543e:	f7ff ff71 	bl	d5324 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5442:	a801      	add	r0, sp, #4
   d5444:	f7ff fa6c 	bl	d4920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5448:	b005      	add	sp, #20
   d544a:	bd30      	pop	{r4, r5, pc}

000d544c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d544c:	2200      	movs	r2, #0
   d544e:	4611      	mov	r1, r2
   d5450:	6840      	ldr	r0, [r0, #4]
   d5452:	f7ff b859 	b.w	d4508 <network_listening>

000d5456 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5456:	2200      	movs	r2, #0
   d5458:	4611      	mov	r1, r2
   d545a:	6840      	ldr	r0, [r0, #4]
   d545c:	f7ff b864 	b.w	d4528 <network_get_listen_timeout>

000d5460 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5460:	2200      	movs	r2, #0
   d5462:	6840      	ldr	r0, [r0, #4]
   d5464:	f7ff b858 	b.w	d4518 <network_set_listen_timeout>

000d5468 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5468:	2200      	movs	r2, #0
   d546a:	f081 0101 	eor.w	r1, r1, #1
   d546e:	6840      	ldr	r0, [r0, #4]
   d5470:	f7ff b842 	b.w	d44f8 <network_listen>

000d5474 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5474:	2300      	movs	r3, #0
   d5476:	461a      	mov	r2, r3
   d5478:	4619      	mov	r1, r3
   d547a:	6840      	ldr	r0, [r0, #4]
   d547c:	f7ff b834 	b.w	d44e8 <network_off>

000d5480 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5480:	2300      	movs	r3, #0
   d5482:	461a      	mov	r2, r3
   d5484:	4619      	mov	r1, r3
   d5486:	6840      	ldr	r0, [r0, #4]
   d5488:	f7ff b826 	b.w	d44d8 <network_on>

000d548c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d548c:	2200      	movs	r2, #0
   d548e:	4611      	mov	r1, r2
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	f7ff b819 	b.w	d44c8 <network_ready>

000d5496 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5496:	2200      	movs	r2, #0
   d5498:	4611      	mov	r1, r2
   d549a:	6840      	ldr	r0, [r0, #4]
   d549c:	f7ff b804 	b.w	d44a8 <network_connecting>

000d54a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54a0:	2200      	movs	r2, #0
   d54a2:	2102      	movs	r1, #2
   d54a4:	6840      	ldr	r0, [r0, #4]
   d54a6:	f7ff b807 	b.w	d44b8 <network_disconnect>

000d54aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54aa:	2300      	movs	r3, #0
   d54ac:	461a      	mov	r2, r3
   d54ae:	6840      	ldr	r0, [r0, #4]
   d54b0:	f7fe bff2 	b.w	d4498 <network_connect>

000d54b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54b4:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54b6:	2203      	movs	r2, #3
   d54b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54ba:	4a02      	ldr	r2, [pc, #8]	; (d54c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54bc:	601a      	str	r2, [r3, #0]
   d54be:	4770      	bx	lr
   d54c0:	2003e3e8 	.word	0x2003e3e8
   d54c4:	000d626c 	.word	0x000d626c

000d54c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54c8:	4770      	bx	lr

000d54ca <_ZN9IPAddressD0Ev>:
   d54ca:	b510      	push	{r4, lr}
   d54cc:	2118      	movs	r1, #24
   d54ce:	4604      	mov	r4, r0
   d54d0:	f000 fcab 	bl	d5e2a <_ZdlPvj>
   d54d4:	4620      	mov	r0, r4
   d54d6:	bd10      	pop	{r4, pc}

000d54d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54da:	7d03      	ldrb	r3, [r0, #20]
   d54dc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54de:	b08d      	sub	sp, #52	; 0x34
   d54e0:	460e      	mov	r6, r1
   d54e2:	f100 0704 	add.w	r7, r0, #4
   d54e6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54ea:	d002      	beq.n	d54f2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d54ec:	f100 0508 	add.w	r5, r0, #8
   d54f0:	e018      	b.n	d5524 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54f2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54f4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54f6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54fa:	232f      	movs	r3, #47	; 0x2f
   d54fc:	462a      	mov	r2, r5
   d54fe:	200a      	movs	r0, #10
   d5500:	f7fe fef6 	bl	d42f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5504:	4628      	mov	r0, r5
   d5506:	f000 fe6c 	bl	d61e2 <strlen>
   d550a:	6833      	ldr	r3, [r6, #0]
   d550c:	4602      	mov	r2, r0
   d550e:	68db      	ldr	r3, [r3, #12]
   d5510:	4629      	mov	r1, r5
   d5512:	4630      	mov	r0, r6
   d5514:	4798      	blx	r3
   d5516:	e00f      	b.n	d5538 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5518:	b124      	cbz	r4, d5524 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d551a:	212e      	movs	r1, #46	; 0x2e
   d551c:	4630      	mov	r0, r6
   d551e:	f000 f9c7 	bl	d58b0 <_ZN5Print5printEc>
   d5522:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5524:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5528:	220a      	movs	r2, #10
   d552a:	4630      	mov	r0, r6
   d552c:	f000 f9f0 	bl	d5910 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5530:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5532:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5534:	d1f0      	bne.n	d5518 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5536:	4620      	mov	r0, r4
    }
    return n;
}
   d5538:	b00d      	add	sp, #52	; 0x34
   d553a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d553c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d553c:	b510      	push	{r4, lr}
   d553e:	4b05      	ldr	r3, [pc, #20]	; (d5554 <_ZN9IPAddressC1Ev+0x18>)
   d5540:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5542:	2211      	movs	r2, #17
   d5544:	f840 3b04 	str.w	r3, [r0], #4
   d5548:	2100      	movs	r1, #0
   d554a:	f000 fdfe 	bl	d614a <memset>
{
    clear();
}
   d554e:	4620      	mov	r0, r4
   d5550:	bd10      	pop	{r4, pc}
   d5552:	bf00      	nop
   d5554:	000d62a0 	.word	0x000d62a0

000d5558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5558:	4603      	mov	r3, r0
   d555a:	4a07      	ldr	r2, [pc, #28]	; (d5578 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d555c:	b510      	push	{r4, lr}
   d555e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5562:	f101 0210 	add.w	r2, r1, #16
   d5566:	f851 4b04 	ldr.w	r4, [r1], #4
   d556a:	f843 4b04 	str.w	r4, [r3], #4
   d556e:	4291      	cmp	r1, r2
   d5570:	d1f9      	bne.n	d5566 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5572:	780a      	ldrb	r2, [r1, #0]
   d5574:	701a      	strb	r2, [r3, #0]
}
   d5576:	bd10      	pop	{r4, pc}
   d5578:	000d62a0 	.word	0x000d62a0

000d557c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d557c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d557e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5582:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5586:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d558a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d558e:	2304      	movs	r3, #4
   d5590:	6041      	str	r1, [r0, #4]
   d5592:	7503      	strb	r3, [r0, #20]
   d5594:	bd10      	pop	{r4, pc}

000d5596 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5596:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5598:	780d      	ldrb	r5, [r1, #0]
   d559a:	788b      	ldrb	r3, [r1, #2]
   d559c:	784a      	ldrb	r2, [r1, #1]
   d559e:	78c9      	ldrb	r1, [r1, #3]
   d55a0:	9100      	str	r1, [sp, #0]
   d55a2:	4629      	mov	r1, r5
   d55a4:	f7ff ffea 	bl	d557c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d55a8:	b003      	add	sp, #12
   d55aa:	bd30      	pop	{r4, r5, pc}

000d55ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55ac:	4b01      	ldr	r3, [pc, #4]	; (d55b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55ae:	4a02      	ldr	r2, [pc, #8]	; (d55b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55b0:	601a      	str	r2, [r3, #0]
   d55b2:	4770      	bx	lr
   d55b4:	2003e3f0 	.word	0x2003e3f0
   d55b8:	000d6364 	.word	0x000d6364

000d55bc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55bc:	2200      	movs	r2, #0
   d55be:	4611      	mov	r1, r2
   d55c0:	6840      	ldr	r0, [r0, #4]
   d55c2:	f7fe bfa1 	b.w	d4508 <network_listening>

000d55c6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55c6:	2200      	movs	r2, #0
   d55c8:	4611      	mov	r1, r2
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	f7fe bfac 	b.w	d4528 <network_get_listen_timeout>

000d55d0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55d0:	2200      	movs	r2, #0
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	f7fe bfa0 	b.w	d4518 <network_set_listen_timeout>

000d55d8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55d8:	2200      	movs	r2, #0
   d55da:	f081 0101 	eor.w	r1, r1, #1
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	f7fe bf8a 	b.w	d44f8 <network_listen>

000d55e4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d55e4:	2300      	movs	r3, #0
   d55e6:	461a      	mov	r2, r3
   d55e8:	4619      	mov	r1, r3
   d55ea:	6840      	ldr	r0, [r0, #4]
   d55ec:	f7fe bf7c 	b.w	d44e8 <network_off>

000d55f0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55f0:	2300      	movs	r3, #0
   d55f2:	461a      	mov	r2, r3
   d55f4:	4619      	mov	r1, r3
   d55f6:	6840      	ldr	r0, [r0, #4]
   d55f8:	f7fe bf6e 	b.w	d44d8 <network_on>

000d55fc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55fc:	2200      	movs	r2, #0
   d55fe:	4611      	mov	r1, r2
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	f7fe bf61 	b.w	d44c8 <network_ready>

000d5606 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5606:	2200      	movs	r2, #0
   d5608:	4611      	mov	r1, r2
   d560a:	6840      	ldr	r0, [r0, #4]
   d560c:	f7fe bf4c 	b.w	d44a8 <network_connecting>

000d5610 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5610:	2200      	movs	r2, #0
   d5612:	2102      	movs	r1, #2
   d5614:	6840      	ldr	r0, [r0, #4]
   d5616:	f7fe bf4f 	b.w	d44b8 <network_disconnect>

000d561a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d561a:	2300      	movs	r3, #0
   d561c:	461a      	mov	r2, r3
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	f7fe bf3a 	b.w	d4498 <network_connect>

000d5624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5624:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5626:	4605      	mov	r5, r0
   d5628:	b188      	cbz	r0, d564e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d562a:	6804      	ldr	r4, [r0, #0]
   d562c:	b14c      	cbz	r4, d5642 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d562e:	68a3      	ldr	r3, [r4, #8]
   d5630:	b11b      	cbz	r3, d563a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5632:	2203      	movs	r2, #3
   d5634:	4621      	mov	r1, r4
   d5636:	4620      	mov	r0, r4
   d5638:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d563a:	2110      	movs	r1, #16
   d563c:	4620      	mov	r0, r4
   d563e:	f000 fbf4 	bl	d5e2a <_ZdlPvj>
   d5642:	4628      	mov	r0, r5
   d5644:	2114      	movs	r1, #20
      }
   d5646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d564a:	f000 bbee 	b.w	d5e2a <_ZdlPvj>
   d564e:	bd38      	pop	{r3, r4, r5, pc}

000d5650 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5650:	b110      	cbz	r0, d5658 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5652:	6803      	ldr	r3, [r0, #0]
   d5654:	685b      	ldr	r3, [r3, #4]
   d5656:	4718      	bx	r3
   d5658:	4770      	bx	lr

000d565a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d565a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d565c:	6803      	ldr	r3, [r0, #0]
   d565e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5660:	b1bb      	cbz	r3, d5692 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5662:	6858      	ldr	r0, [r3, #4]
   d5664:	f7fe fdec 	bl	d4240 <os_thread_is_current>
   d5668:	b978      	cbnz	r0, d568a <_ZN6ThreadD1Ev+0x30>
   d566a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d566c:	7c5a      	ldrb	r2, [r3, #17]
   d566e:	b912      	cbnz	r2, d5676 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5670:	6858      	ldr	r0, [r3, #4]
   d5672:	f7fe fded 	bl	d4250 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5676:	6823      	ldr	r3, [r4, #0]
   d5678:	6858      	ldr	r0, [r3, #4]
   d567a:	f7fe fdf1 	bl	d4260 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d567e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5680:	2300      	movs	r3, #0
   d5682:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5684:	b128      	cbz	r0, d5692 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5686:	f7ff ffcd 	bl	d5624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d568a:	6820      	ldr	r0, [r4, #0]
   d568c:	b108      	cbz	r0, d5692 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d568e:	f7ff ffc9 	bl	d5624 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5692:	4620      	mov	r0, r4
   d5694:	bd10      	pop	{r4, pc}
	...

000d5698 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5698:	b538      	push	{r3, r4, r5, lr}
   d569a:	4b0c      	ldr	r3, [pc, #48]	; (d56cc <_ZN5spark9MeshClassD1Ev+0x34>)
   d569c:	6003      	str	r3, [r0, #0]
   d569e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56a0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d56a4:	b108      	cbz	r0, d56aa <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d56a6:	f7fe fcfa 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56aa:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d56ae:	b135      	cbz	r5, d56be <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56b0:	4628      	mov	r0, r5
   d56b2:	f7ff ffd2 	bl	d565a <_ZN6ThreadD1Ev>
   d56b6:	2104      	movs	r1, #4
   d56b8:	4628      	mov	r0, r5
   d56ba:	f000 fbb6 	bl	d5e2a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56be:	68a0      	ldr	r0, [r4, #8]
   d56c0:	b108      	cbz	r0, d56c6 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d56c2:	f7ff ffc5 	bl	d5650 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d56c6:	4620      	mov	r0, r4
   d56c8:	bd38      	pop	{r3, r4, r5, pc}
   d56ca:	bf00      	nop
   d56cc:	000d6398 	.word	0x000d6398

000d56d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d56d0:	b538      	push	{r3, r4, r5, lr}
   d56d2:	4c0d      	ldr	r4, [pc, #52]	; (d5708 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d56d4:	4b0d      	ldr	r3, [pc, #52]	; (d570c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d56d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d56d8:	2500      	movs	r5, #0
   d56da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56e0:	6063      	str	r3, [r4, #4]
   d56e2:	60a5      	str	r5, [r4, #8]
   d56e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d56ec:	f7fe fdc8 	bl	d4280 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d56f0:	4b07      	ldr	r3, [pc, #28]	; (d5710 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d56f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d56f6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d56f8:	4620      	mov	r0, r4
   d56fa:	4a06      	ldr	r2, [pc, #24]	; (d5714 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d56fc:	4906      	ldr	r1, [pc, #24]	; (d5718 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d56fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5702:	f000 bb8d 	b.w	d5e20 <__aeabi_atexit>
   d5706:	bf00      	nop
   d5708:	2003e3f4 	.word	0x2003e3f4
   d570c:	000d63cc 	.word	0x000d63cc
   d5710:	000d6398 	.word	0x000d6398
   d5714:	2003e3a8 	.word	0x2003e3a8
   d5718:	000d5699 	.word	0x000d5699

000d571c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d571c:	2300      	movs	r3, #0
   d571e:	461a      	mov	r2, r3
   d5720:	6840      	ldr	r0, [r0, #4]
   d5722:	f7fe beb9 	b.w	d4498 <network_connect>

000d5726 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5726:	2200      	movs	r2, #0
   d5728:	2102      	movs	r1, #2
   d572a:	6840      	ldr	r0, [r0, #4]
   d572c:	f7fe bec4 	b.w	d44b8 <network_disconnect>

000d5730 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5730:	2200      	movs	r2, #0
   d5732:	4611      	mov	r1, r2
   d5734:	6840      	ldr	r0, [r0, #4]
   d5736:	f7fe beb7 	b.w	d44a8 <network_connecting>

000d573a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d573a:	2200      	movs	r2, #0
   d573c:	4611      	mov	r1, r2
   d573e:	6840      	ldr	r0, [r0, #4]
   d5740:	f7fe bec2 	b.w	d44c8 <network_ready>

000d5744 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5744:	2300      	movs	r3, #0
   d5746:	461a      	mov	r2, r3
   d5748:	4619      	mov	r1, r3
   d574a:	6840      	ldr	r0, [r0, #4]
   d574c:	f7fe bec4 	b.w	d44d8 <network_on>

000d5750 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5750:	2300      	movs	r3, #0
   d5752:	461a      	mov	r2, r3
   d5754:	4619      	mov	r1, r3
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	f7fe bec6 	b.w	d44e8 <network_off>

000d575c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d575c:	2200      	movs	r2, #0
   d575e:	f081 0101 	eor.w	r1, r1, #1
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7fe bec8 	b.w	d44f8 <network_listen>

000d5768 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5768:	2200      	movs	r2, #0
   d576a:	6840      	ldr	r0, [r0, #4]
   d576c:	f7fe bed4 	b.w	d4518 <network_set_listen_timeout>

000d5770 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5770:	2200      	movs	r2, #0
   d5772:	4611      	mov	r1, r2
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	f7fe bed7 	b.w	d4528 <network_get_listen_timeout>

000d577a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d577a:	2200      	movs	r2, #0
   d577c:	4611      	mov	r1, r2
   d577e:	6840      	ldr	r0, [r0, #4]
   d5780:	f7fe bec2 	b.w	d4508 <network_listening>

000d5784 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5788:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d578a:	b095      	sub	sp, #84	; 0x54
   d578c:	4616      	mov	r6, r2
   d578e:	460d      	mov	r5, r1
   d5790:	4607      	mov	r7, r0
    IPAddress addr;
   d5792:	f7ff fed3 	bl	d553c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5796:	4621      	mov	r1, r4
   d5798:	2220      	movs	r2, #32
   d579a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d579c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d579e:	f000 fcd4 	bl	d614a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57a2:	2340      	movs	r3, #64	; 0x40
   d57a4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57a6:	4621      	mov	r1, r4
   d57a8:	466b      	mov	r3, sp
   d57aa:	aa0c      	add	r2, sp, #48	; 0x30
   d57ac:	4630      	mov	r0, r6
   d57ae:	f7fe fdaf 	bl	d4310 <netdb_getaddrinfo>
    if (!r) {
   d57b2:	4604      	mov	r4, r0
   d57b4:	2800      	cmp	r0, #0
   d57b6:	d144      	bne.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57b8:	4602      	mov	r2, r0
   d57ba:	2101      	movs	r1, #1
   d57bc:	6868      	ldr	r0, [r5, #4]
   d57be:	f7fe fe83 	bl	d44c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57c2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57c4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57c6:	4622      	mov	r2, r4
   d57c8:	6868      	ldr	r0, [r5, #4]
   d57ca:	f7fe fe7d 	bl	d44c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57ce:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57d0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57d2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57d4:	2e00      	cmp	r6, #0
   d57d6:	d034      	beq.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57d8:	2900      	cmp	r1, #0
   d57da:	d132      	bne.n	d5842 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57dc:	6873      	ldr	r3, [r6, #4]
   d57de:	2b02      	cmp	r3, #2
   d57e0:	d002      	beq.n	d57e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57e2:	2b0a      	cmp	r3, #10
   d57e4:	d009      	beq.n	d57fa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57e6:	e02a      	b.n	d583e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57e8:	f1b8 0f00 	cmp.w	r8, #0
   d57ec:	d027      	beq.n	d583e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57ee:	6971      	ldr	r1, [r6, #20]
   d57f0:	4638      	mov	r0, r7
   d57f2:	3104      	adds	r1, #4
   d57f4:	f7ff fecf 	bl	d5596 <_ZN9IPAddressaSEPKh>
   d57f8:	e020      	b.n	d583c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d57fa:	f1b9 0f00 	cmp.w	r9, #0
   d57fe:	d01e      	beq.n	d583e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5800:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5802:	2211      	movs	r2, #17
   d5804:	a801      	add	r0, sp, #4
   d5806:	f000 fca0 	bl	d614a <memset>
                    a.v = 6;
   d580a:	2306      	movs	r3, #6
   d580c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5810:	ad01      	add	r5, sp, #4
   d5812:	f104 0308 	add.w	r3, r4, #8
   d5816:	3418      	adds	r4, #24
   d5818:	6818      	ldr	r0, [r3, #0]
   d581a:	6859      	ldr	r1, [r3, #4]
   d581c:	462a      	mov	r2, r5
   d581e:	c203      	stmia	r2!, {r0, r1}
   d5820:	3308      	adds	r3, #8
   d5822:	42a3      	cmp	r3, r4
   d5824:	4615      	mov	r5, r2
   d5826:	d1f7      	bne.n	d5818 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5828:	a901      	add	r1, sp, #4
   d582a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d582c:	ad07      	add	r5, sp, #28
   d582e:	f7ff fe93 	bl	d5558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5834:	1d3c      	adds	r4, r7, #4
   d5836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5838:	682b      	ldr	r3, [r5, #0]
   d583a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d583c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d583e:	69f6      	ldr	r6, [r6, #28]
   d5840:	e7c8      	b.n	d57d4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5842:	9800      	ldr	r0, [sp, #0]
   d5844:	f7fe fd5c 	bl	d4300 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5848:	4638      	mov	r0, r7
   d584a:	b015      	add	sp, #84	; 0x54
   d584c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5850 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5850:	4b02      	ldr	r3, [pc, #8]	; (d585c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5852:	4a03      	ldr	r2, [pc, #12]	; (d5860 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5854:	601a      	str	r2, [r3, #0]
   d5856:	2200      	movs	r2, #0
   d5858:	605a      	str	r2, [r3, #4]
   d585a:	4770      	bx	lr
   d585c:	2003e5c4 	.word	0x2003e5c4
   d5860:	000d63cc 	.word	0x000d63cc

000d5864 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5866:	4606      	mov	r6, r0
   d5868:	460d      	mov	r5, r1
   d586a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d586c:	2400      	movs	r4, #0
  while (size--) {
   d586e:	42bd      	cmp	r5, r7
   d5870:	d00c      	beq.n	d588c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5872:	6833      	ldr	r3, [r6, #0]
   d5874:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5878:	689b      	ldr	r3, [r3, #8]
   d587a:	4630      	mov	r0, r6
   d587c:	4798      	blx	r3
     if (chunk>=0)
   d587e:	2800      	cmp	r0, #0
   d5880:	db01      	blt.n	d5886 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5882:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5884:	e7f3      	b.n	d586e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5886:	2c00      	cmp	r4, #0
   d5888:	bf08      	it	eq
   d588a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d588c:	4620      	mov	r0, r4
   d588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5890 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5890:	b570      	push	{r4, r5, r6, lr}
   d5892:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5894:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5896:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5898:	b149      	cbz	r1, d58ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d589a:	f000 fca2 	bl	d61e2 <strlen>
   d589e:	682b      	ldr	r3, [r5, #0]
   d58a0:	4602      	mov	r2, r0
   d58a2:	4621      	mov	r1, r4
   d58a4:	4628      	mov	r0, r5
   d58a6:	68db      	ldr	r3, [r3, #12]
    }
   d58a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58ac:	4718      	bx	r3
    }
   d58ae:	bd70      	pop	{r4, r5, r6, pc}

000d58b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d58b0:	6803      	ldr	r3, [r0, #0]
   d58b2:	689b      	ldr	r3, [r3, #8]
   d58b4:	4718      	bx	r3

000d58b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d58b6:	b530      	push	{r4, r5, lr}
   d58b8:	b08b      	sub	sp, #44	; 0x2c
   d58ba:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d58bc:	2100      	movs	r1, #0
   d58be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d58c2:	2a01      	cmp	r2, #1
   d58c4:	bf98      	it	ls
   d58c6:	220a      	movls	r2, #10
   d58c8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d58cc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d58d0:	fb05 3312 	mls	r3, r5, r2, r3
   d58d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d58d8:	2b09      	cmp	r3, #9
   d58da:	bf94      	ite	ls
   d58dc:	3330      	addls	r3, #48	; 0x30
   d58de:	3337      	addhi	r3, #55	; 0x37
   d58e0:	b2db      	uxtb	r3, r3
   d58e2:	4621      	mov	r1, r4
   d58e4:	f804 3901 	strb.w	r3, [r4], #-1
   d58e8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d58ea:	2d00      	cmp	r5, #0
   d58ec:	d1ee      	bne.n	d58cc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d58ee:	f7ff ffcf 	bl	d5890 <_ZN5Print5writeEPKc>
}
   d58f2:	b00b      	add	sp, #44	; 0x2c
   d58f4:	bd30      	pop	{r4, r5, pc}

000d58f6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d58f6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d58f8:	b92a      	cbnz	r2, d5906 <_ZN5Print5printEmi+0x10>
   d58fa:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d58fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5900:	689b      	ldr	r3, [r3, #8]
   d5902:	b2c9      	uxtb	r1, r1
   d5904:	4718      	bx	r3
  else return printNumber(n, base);
   d5906:	b2d2      	uxtb	r2, r2
}
   d5908:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d590c:	f7ff bfd3 	b.w	d58b6 <_ZN5Print11printNumberEmh>

000d5910 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5910:	f7ff bff1 	b.w	d58f6 <_ZN5Print5printEmi>

000d5914 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5914:	b510      	push	{r4, lr}
   d5916:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5918:	f7ff fad7 	bl	d4eca <_ZNSt14_Function_baseD1Ev>
   d591c:	4620      	mov	r0, r4
   d591e:	bd10      	pop	{r4, pc}

000d5920 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5920:	4803      	ldr	r0, [pc, #12]	; (d5930 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5922:	4a04      	ldr	r2, [pc, #16]	; (d5934 <_GLOBAL__sub_I_RGB+0x14>)
   d5924:	4904      	ldr	r1, [pc, #16]	; (d5938 <_GLOBAL__sub_I_RGB+0x18>)
   d5926:	2300      	movs	r3, #0
   d5928:	6083      	str	r3, [r0, #8]
   d592a:	f000 ba79 	b.w	d5e20 <__aeabi_atexit>
   d592e:	bf00      	nop
   d5930:	2003e5cc 	.word	0x2003e5cc
   d5934:	2003e3a8 	.word	0x2003e3a8
   d5938:	000d5915 	.word	0x000d5915

000d593c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d593c:	4770      	bx	lr

000d593e <_ZN8SPIClassD0Ev>:
   d593e:	b510      	push	{r4, lr}
   d5940:	2110      	movs	r1, #16
   d5942:	4604      	mov	r4, r0
   d5944:	f000 fa71 	bl	d5e2a <_ZdlPvj>
   d5948:	4620      	mov	r0, r4
   d594a:	bd10      	pop	{r4, pc}

000d594c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d594c:	b570      	push	{r4, r5, r6, lr}
   d594e:	4b08      	ldr	r3, [pc, #32]	; (d5970 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5950:	6003      	str	r3, [r0, #0]
   d5952:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5954:	2500      	movs	r5, #0
   d5956:	460e      	mov	r6, r1
   d5958:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d595c:	f7fe fc88 	bl	d4270 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5960:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5962:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5964:	f7fe fcdc 	bl	d4320 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5968:	60a5      	str	r5, [r4, #8]
}
   d596a:	4620      	mov	r0, r4
   d596c:	bd70      	pop	{r4, r5, r6, pc}
   d596e:	bf00      	nop
   d5970:	000d6400 	.word	0x000d6400

000d5974 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5974:	b510      	push	{r4, lr}
   d5976:	4604      	mov	r4, r0
{
	free(buffer);
   d5978:	6800      	ldr	r0, [r0, #0]
   d597a:	f7fe fde5 	bl	d4548 <free>
}
   d597e:	4620      	mov	r0, r4
   d5980:	bd10      	pop	{r4, pc}

000d5982 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5982:	b510      	push	{r4, lr}
   d5984:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5986:	6800      	ldr	r0, [r0, #0]
   d5988:	b108      	cbz	r0, d598e <_ZN6String10invalidateEv+0xc>
   d598a:	f7fe fddd 	bl	d4548 <free>
	buffer = NULL;
   d598e:	2300      	movs	r3, #0
   d5990:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5992:	60a3      	str	r3, [r4, #8]
   d5994:	6063      	str	r3, [r4, #4]
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	4604      	mov	r4, r0
   d599c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d599e:	6800      	ldr	r0, [r0, #0]
   d59a0:	3101      	adds	r1, #1
   d59a2:	f7fe fdd9 	bl	d4558 <realloc>
	if (newbuffer) {
   d59a6:	b110      	cbz	r0, d59ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d59a8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d59ac:	2001      	movs	r0, #1
	}
	return 0;
}
   d59ae:	bd38      	pop	{r3, r4, r5, pc}

000d59b0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d59b2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d59b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d59b6:	b113      	cbz	r3, d59be <_ZN6String7reserveEj+0xe>
   d59b8:	6843      	ldr	r3, [r0, #4]
   d59ba:	428b      	cmp	r3, r1
   d59bc:	d207      	bcs.n	d59ce <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d59be:	4620      	mov	r0, r4
   d59c0:	f7ff ffea 	bl	d5998 <_ZN6String12changeBufferEj>
   d59c4:	b120      	cbz	r0, d59d0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d59c6:	68a3      	ldr	r3, [r4, #8]
   d59c8:	b90b      	cbnz	r3, d59ce <_ZN6String7reserveEj+0x1e>
   d59ca:	6822      	ldr	r2, [r4, #0]
   d59cc:	7013      	strb	r3, [r2, #0]
   d59ce:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d59d0:	bd10      	pop	{r4, pc}

000d59d2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59d2:	b570      	push	{r4, r5, r6, lr}
   d59d4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d59d6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d59d8:	4604      	mov	r4, r0
   d59da:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d59dc:	f7ff ffe8 	bl	d59b0 <_ZN6String7reserveEj>
   d59e0:	b918      	cbnz	r0, d59ea <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d59e2:	4620      	mov	r0, r4
   d59e4:	f7ff ffcd 	bl	d5982 <_ZN6String10invalidateEv>
		return *this;
   d59e8:	e009      	b.n	d59fe <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d59ea:	462a      	mov	r2, r5
   d59ec:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d59ee:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d59f0:	6820      	ldr	r0, [r4, #0]
   d59f2:	f000 fb84 	bl	d60fe <memcpy>
	buffer[len] = 0;
   d59f6:	6822      	ldr	r2, [r4, #0]
   d59f8:	68a3      	ldr	r3, [r4, #8]
   d59fa:	2100      	movs	r1, #0
   d59fc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d59fe:	4620      	mov	r0, r4
   d5a00:	bd70      	pop	{r4, r5, r6, pc}

000d5a02 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5a02:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a04:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5a06:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5a0a:	6043      	str	r3, [r0, #4]
	len = 0;
   d5a0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a0e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5a10:	460d      	mov	r5, r1
   d5a12:	b139      	cbz	r1, d5a24 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5a14:	4608      	mov	r0, r1
   d5a16:	f000 fbe4 	bl	d61e2 <strlen>
   d5a1a:	4629      	mov	r1, r5
   d5a1c:	4602      	mov	r2, r0
   d5a1e:	4620      	mov	r0, r4
   d5a20:	f7ff ffd7 	bl	d59d2 <_ZN6String4copyEPKcj>
}
   d5a24:	4620      	mov	r0, r4
   d5a26:	bd38      	pop	{r3, r4, r5, pc}

000d5a28 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5a28:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	460b      	mov	r3, r1
   d5a2e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5a30:	d007      	beq.n	d5a42 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5a32:	6809      	ldr	r1, [r1, #0]
   d5a34:	b119      	cbz	r1, d5a3e <_ZN6StringaSERKS_+0x16>
   d5a36:	689a      	ldr	r2, [r3, #8]
   d5a38:	f7ff ffcb 	bl	d59d2 <_ZN6String4copyEPKcj>
   d5a3c:	e001      	b.n	d5a42 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5a3e:	f7ff ffa0 	bl	d5982 <_ZN6String10invalidateEv>

	return *this;
}
   d5a42:	4620      	mov	r0, r4
   d5a44:	bd10      	pop	{r4, pc}

000d5a46 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5a46:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a48:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5a4a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5a4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5a4e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5a50:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5a52:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5a54:	f7ff ffe8 	bl	d5a28 <_ZN6StringaSERKS_>
}
   d5a58:	4620      	mov	r0, r4
   d5a5a:	bd10      	pop	{r4, pc}

000d5a5c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5a5c:	4b04      	ldr	r3, [pc, #16]	; (d5a70 <_GLOBAL__sub_I_System+0x14>)
   d5a5e:	2000      	movs	r0, #0
   d5a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a64:	7018      	strb	r0, [r3, #0]
   d5a66:	8058      	strh	r0, [r3, #2]
   d5a68:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a6a:	f7fe bcd1 	b.w	d4410 <set_system_mode>
   d5a6e:	bf00      	nop
   d5a70:	2003e5dc 	.word	0x2003e5dc

000d5a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a74:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a7a:	601a      	str	r2, [r3, #0]
   d5a7c:	4770      	bx	lr
   d5a7e:	bf00      	nop
   d5a80:	2003e340 	.word	0x2003e340
   d5a84:	2003e5e4 	.word	0x2003e5e4

000d5a88 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a88:	4770      	bx	lr

000d5a8a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a8a:	7441      	strb	r1, [r0, #17]
   d5a8c:	4770      	bx	lr

000d5a8e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a90:	7c00      	ldrb	r0, [r0, #16]
   d5a92:	f7fe fc7d 	bl	d4390 <HAL_USART_Available_Data_For_Write>
}
   d5a96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a9a:	bd08      	pop	{r3, pc}

000d5a9c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5a9e:	7c00      	ldrb	r0, [r0, #16]
   d5aa0:	f7fe fc56 	bl	d4350 <HAL_USART_Available_Data>
}
   d5aa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5aa8:	bd08      	pop	{r3, pc}

000d5aaa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5aaa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5aac:	7c00      	ldrb	r0, [r0, #16]
   d5aae:	f7fe fc5f 	bl	d4370 <HAL_USART_Peek_Data>
}
   d5ab2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ab6:	bf28      	it	cs
   d5ab8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5abc:	bd08      	pop	{r3, pc}

000d5abe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5abe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ac0:	7c00      	ldrb	r0, [r0, #16]
   d5ac2:	f7fe fc4d 	bl	d4360 <HAL_USART_Read_Data>
}
   d5ac6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5aca:	bf28      	it	cs
   d5acc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ad0:	bd08      	pop	{r3, pc}

000d5ad2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5ad2:	7c00      	ldrb	r0, [r0, #16]
   d5ad4:	f7fe bc54 	b.w	d4380 <HAL_USART_Flush_Data>

000d5ad8 <_ZN11USARTSerialD0Ev>:
   d5ad8:	b510      	push	{r4, lr}
   d5ada:	2114      	movs	r1, #20
   d5adc:	4604      	mov	r4, r0
   d5ade:	f000 f9a4 	bl	d5e2a <_ZdlPvj>
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	bd10      	pop	{r4, pc}

000d5ae6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5ae6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ae8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5aea:	4604      	mov	r4, r0
   d5aec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5aee:	b925      	cbnz	r5, d5afa <_ZN11USARTSerial5writeEh+0x14>
   d5af0:	7c00      	ldrb	r0, [r0, #16]
   d5af2:	f7fe fc4d 	bl	d4390 <HAL_USART_Available_Data_For_Write>
   d5af6:	2800      	cmp	r0, #0
   d5af8:	dd05      	ble.n	d5b06 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5afa:	4631      	mov	r1, r6
   d5afc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b02:	f7fe bc1d 	b.w	d4340 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b06:	4628      	mov	r0, r5
   d5b08:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5b0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5b0c:	b510      	push	{r4, lr}
   d5b0e:	4604      	mov	r4, r0
   d5b10:	4608      	mov	r0, r1
   d5b12:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b14:	2200      	movs	r2, #0
   d5b16:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5b1c:	60a2      	str	r2, [r4, #8]
   d5b1e:	4a05      	ldr	r2, [pc, #20]	; (d5b34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5b20:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5b22:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5b24:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5b26:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5b28:	461a      	mov	r2, r3
   d5b2a:	f7fe fc01 	bl	d4330 <HAL_USART_Init>
}
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd10      	pop	{r4, pc}
   d5b32:	bf00      	nop
   d5b34:	000d643c 	.word	0x000d643c

000d5b38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b38:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b3a:	4d0c      	ldr	r5, [pc, #48]	; (d5b6c <_Z22__fetch_global_Serial1v+0x34>)
   d5b3c:	6829      	ldr	r1, [r5, #0]
   d5b3e:	f011 0401 	ands.w	r4, r1, #1
   d5b42:	d111      	bne.n	d5b68 <_Z22__fetch_global_Serial1v+0x30>
   d5b44:	4628      	mov	r0, r5
   d5b46:	f7fe faac 	bl	d40a2 <__cxa_guard_acquire>
   d5b4a:	b168      	cbz	r0, d5b68 <_Z22__fetch_global_Serial1v+0x30>
   d5b4c:	4a08      	ldr	r2, [pc, #32]	; (d5b70 <_Z22__fetch_global_Serial1v+0x38>)
   d5b4e:	4b09      	ldr	r3, [pc, #36]	; (d5b74 <_Z22__fetch_global_Serial1v+0x3c>)
   d5b50:	4809      	ldr	r0, [pc, #36]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b52:	4621      	mov	r1, r4
   d5b54:	f7ff ffda 	bl	d5b0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b58:	4628      	mov	r0, r5
   d5b5a:	f7fe faa7 	bl	d40ac <__cxa_guard_release>
   d5b5e:	4a07      	ldr	r2, [pc, #28]	; (d5b7c <_Z22__fetch_global_Serial1v+0x44>)
   d5b60:	4907      	ldr	r1, [pc, #28]	; (d5b80 <_Z22__fetch_global_Serial1v+0x48>)
   d5b62:	4805      	ldr	r0, [pc, #20]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b64:	f000 f95c 	bl	d5e20 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b68:	4803      	ldr	r0, [pc, #12]	; (d5b78 <_Z22__fetch_global_Serial1v+0x40>)
   d5b6a:	bd38      	pop	{r3, r4, r5, pc}
   d5b6c:	2003e680 	.word	0x2003e680
   d5b70:	2003e684 	.word	0x2003e684
   d5b74:	2003e5fc 	.word	0x2003e5fc
   d5b78:	2003e5e8 	.word	0x2003e5e8
   d5b7c:	2003e3a8 	.word	0x2003e3a8
   d5b80:	000d5a89 	.word	0x000d5a89

000d5b84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b84:	7441      	strb	r1, [r0, #17]
   d5b86:	4770      	bx	lr

000d5b88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b88:	4770      	bx	lr

000d5b8a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b8c:	2100      	movs	r1, #0
   d5b8e:	7c00      	ldrb	r0, [r0, #16]
   d5b90:	f7fe fc1e 	bl	d43d0 <HAL_USB_USART_Receive_Data>
}
   d5b94:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b98:	bf28      	it	cs
   d5b9a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b9e:	bd08      	pop	{r3, pc}

000d5ba0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5ba0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ba2:	2101      	movs	r1, #1
   d5ba4:	7c00      	ldrb	r0, [r0, #16]
   d5ba6:	f7fe fc13 	bl	d43d0 <HAL_USB_USART_Receive_Data>
}
   d5baa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5bae:	bf28      	it	cs
   d5bb0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5bb4:	bd08      	pop	{r3, pc}

000d5bb6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5bb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5bb8:	7c00      	ldrb	r0, [r0, #16]
   d5bba:	f7fe fc01 	bl	d43c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bc2:	bd08      	pop	{r3, pc}

000d5bc4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5bc4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5bc6:	7c00      	ldrb	r0, [r0, #16]
   d5bc8:	f7fe fbf2 	bl	d43b0 <HAL_USB_USART_Available_Data>
}
   d5bcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bd0:	bd08      	pop	{r3, pc}

000d5bd2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bd2:	7c00      	ldrb	r0, [r0, #16]
   d5bd4:	f7fe bc0c 	b.w	d43f0 <HAL_USB_USART_Flush_Data>

000d5bd8 <_ZN9USBSerialD0Ev>:
   d5bd8:	b510      	push	{r4, lr}
   d5bda:	2114      	movs	r1, #20
   d5bdc:	4604      	mov	r4, r0
   d5bde:	f000 f924 	bl	d5e2a <_ZdlPvj>
   d5be2:	4620      	mov	r0, r4
   d5be4:	bd10      	pop	{r4, pc}

000d5be6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5be6:	b538      	push	{r3, r4, r5, lr}
   d5be8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5bec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bee:	f7fe fbe7 	bl	d43c0 <HAL_USB_USART_Available_Data_For_Write>
   d5bf2:	2800      	cmp	r0, #0
   d5bf4:	dc01      	bgt.n	d5bfa <_ZN9USBSerial5writeEh+0x14>
   d5bf6:	7c60      	ldrb	r0, [r4, #17]
   d5bf8:	b128      	cbz	r0, d5c06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5bfa:	4629      	mov	r1, r5
   d5bfc:	7c20      	ldrb	r0, [r4, #16]
   d5bfe:	f7fe fbef 	bl	d43e0 <HAL_USB_USART_Send_Data>
   d5c02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c06:	bd38      	pop	{r3, r4, r5, pc}

000d5c08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c08:	b510      	push	{r4, lr}
   d5c0a:	4604      	mov	r4, r0
   d5c0c:	2300      	movs	r3, #0
   d5c0e:	6063      	str	r3, [r4, #4]
   d5c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c14:	60a3      	str	r3, [r4, #8]
   d5c16:	4b05      	ldr	r3, [pc, #20]	; (d5c2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c18:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c1a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c1c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c1e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c20:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c22:	4611      	mov	r1, r2
   d5c24:	f7fe fbbc 	bl	d43a0 <HAL_USB_USART_Init>
}
   d5c28:	4620      	mov	r0, r4
   d5c2a:	bd10      	pop	{r4, pc}
   d5c2c:	000d646c 	.word	0x000d646c

000d5c30 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c32:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c34:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c36:	2100      	movs	r1, #0
   d5c38:	f000 fa87 	bl	d614a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	bd10      	pop	{r4, pc}

000d5c40 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c40:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c42:	4d0e      	ldr	r5, [pc, #56]	; (d5c7c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c44:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c46:	a801      	add	r0, sp, #4
   d5c48:	f7ff fff2 	bl	d5c30 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c4c:	6829      	ldr	r1, [r5, #0]
   d5c4e:	f011 0401 	ands.w	r4, r1, #1
   d5c52:	d110      	bne.n	d5c76 <_Z16_fetch_usbserialv+0x36>
   d5c54:	4628      	mov	r0, r5
   d5c56:	f7fe fa24 	bl	d40a2 <__cxa_guard_acquire>
   d5c5a:	b160      	cbz	r0, d5c76 <_Z16_fetch_usbserialv+0x36>
   d5c5c:	aa01      	add	r2, sp, #4
   d5c5e:	4621      	mov	r1, r4
   d5c60:	4807      	ldr	r0, [pc, #28]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c62:	f7ff ffd1 	bl	d5c08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c66:	4628      	mov	r0, r5
   d5c68:	f7fe fa20 	bl	d40ac <__cxa_guard_release>
   d5c6c:	4a05      	ldr	r2, [pc, #20]	; (d5c84 <_Z16_fetch_usbserialv+0x44>)
   d5c6e:	4906      	ldr	r1, [pc, #24]	; (d5c88 <_Z16_fetch_usbserialv+0x48>)
   d5c70:	4803      	ldr	r0, [pc, #12]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c72:	f000 f8d5 	bl	d5e20 <__aeabi_atexit>
	return _usbserial;
}
   d5c76:	4802      	ldr	r0, [pc, #8]	; (d5c80 <_Z16_fetch_usbserialv+0x40>)
   d5c78:	b007      	add	sp, #28
   d5c7a:	bd30      	pop	{r4, r5, pc}
   d5c7c:	2003e708 	.word	0x2003e708
   d5c80:	2003e70c 	.word	0x2003e70c
   d5c84:	2003e3a8 	.word	0x2003e3a8
   d5c88:	000d5b89 	.word	0x000d5b89

000d5c8c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5c8c:	2200      	movs	r2, #0
   d5c8e:	4611      	mov	r1, r2
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	f7fe bc19 	b.w	d44c8 <network_ready>

000d5c96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c96:	2200      	movs	r2, #0
   d5c98:	4611      	mov	r1, r2
   d5c9a:	6840      	ldr	r0, [r0, #4]
   d5c9c:	f7fe bc34 	b.w	d4508 <network_listening>

000d5ca0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ca0:	2200      	movs	r2, #0
   d5ca2:	4611      	mov	r1, r2
   d5ca4:	6840      	ldr	r0, [r0, #4]
   d5ca6:	f7fe bc3f 	b.w	d4528 <network_get_listen_timeout>

000d5caa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5caa:	2200      	movs	r2, #0
   d5cac:	6840      	ldr	r0, [r0, #4]
   d5cae:	f7fe bc33 	b.w	d4518 <network_set_listen_timeout>

000d5cb2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cb2:	2200      	movs	r2, #0
   d5cb4:	f081 0101 	eor.w	r1, r1, #1
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	f7fe bc1d 	b.w	d44f8 <network_listen>

000d5cbe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5cbe:	2300      	movs	r3, #0
   d5cc0:	461a      	mov	r2, r3
   d5cc2:	4619      	mov	r1, r3
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	f7fe bc0f 	b.w	d44e8 <network_off>

000d5cca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	461a      	mov	r2, r3
   d5cce:	4619      	mov	r1, r3
   d5cd0:	6840      	ldr	r0, [r0, #4]
   d5cd2:	f7fe bc01 	b.w	d44d8 <network_on>

000d5cd6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cd6:	2200      	movs	r2, #0
   d5cd8:	4611      	mov	r1, r2
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7fe bbe4 	b.w	d44a8 <network_connecting>

000d5ce0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ce0:	2200      	movs	r2, #0
   d5ce2:	2102      	movs	r1, #2
   d5ce4:	6840      	ldr	r0, [r0, #4]
   d5ce6:	f7fe bbe7 	b.w	d44b8 <network_disconnect>

000d5cea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cea:	2300      	movs	r3, #0
   d5cec:	461a      	mov	r2, r3
   d5cee:	6840      	ldr	r0, [r0, #4]
   d5cf0:	f7fe bbd2 	b.w	d4498 <network_connect>

000d5cf4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5cf4:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5cf6:	2204      	movs	r2, #4
   d5cf8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5cfa:	4a02      	ldr	r2, [pc, #8]	; (d5d04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5cfc:	601a      	str	r2, [r3, #0]
   d5cfe:	4770      	bx	lr
   d5d00:	2003e720 	.word	0x2003e720
   d5d04:	000d649c 	.word	0x000d649c

000d5d08 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5d08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d0a:	4b0c      	ldr	r3, [pc, #48]	; (d5d3c <serialEventRun+0x34>)
   d5d0c:	b133      	cbz	r3, d5d1c <serialEventRun+0x14>
   d5d0e:	f7ff ff97 	bl	d5c40 <_Z16_fetch_usbserialv>
   d5d12:	6803      	ldr	r3, [r0, #0]
   d5d14:	691b      	ldr	r3, [r3, #16]
   d5d16:	4798      	blx	r3
   d5d18:	2800      	cmp	r0, #0
   d5d1a:	dc09      	bgt.n	d5d30 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5d1c:	4b08      	ldr	r3, [pc, #32]	; (d5d40 <serialEventRun+0x38>)
   d5d1e:	b163      	cbz	r3, d5d3a <serialEventRun+0x32>
   d5d20:	f7ff ff0a 	bl	d5b38 <_Z22__fetch_global_Serial1v>
   d5d24:	6803      	ldr	r3, [r0, #0]
   d5d26:	691b      	ldr	r3, [r3, #16]
   d5d28:	4798      	blx	r3
   d5d2a:	2800      	cmp	r0, #0
   d5d2c:	dc03      	bgt.n	d5d36 <serialEventRun+0x2e>
   d5d2e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5d30:	f3af 8000 	nop.w
   d5d34:	e7f2      	b.n	d5d1c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5d36:	f3af 8000 	nop.w
   d5d3a:	bd08      	pop	{r3, pc}
	...

000d5d44 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5d44:	b508      	push	{r3, lr}
	serialEventRun();
   d5d46:	f7ff ffdf 	bl	d5d08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d4a:	f7fe fac1 	bl	d42d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d4e:	4b01      	ldr	r3, [pc, #4]	; (d5d54 <_post_loop+0x10>)
   d5d50:	6018      	str	r0, [r3, #0]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	2003e72c 	.word	0x2003e72c

000d5d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d5a:	2300      	movs	r3, #0
   d5d5c:	9300      	str	r3, [sp, #0]
   d5d5e:	461a      	mov	r2, r3
   d5d60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d64:	f7fe fb76 	bl	d4454 <system_ctrl_set_result>
}
   d5d68:	b003      	add	sp, #12
   d5d6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d70 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5d70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5d72:	8843      	ldrh	r3, [r0, #2]
   d5d74:	2b0a      	cmp	r3, #10
   d5d76:	d008      	beq.n	d5d8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5d78:	2b50      	cmp	r3, #80	; 0x50
   d5d7a:	d109      	bne.n	d5d90 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5d7c:	4b09      	ldr	r3, [pc, #36]	; (d5da4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5d7e:	681b      	ldr	r3, [r3, #0]
   d5d80:	b13b      	cbz	r3, d5d92 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5d82:	b003      	add	sp, #12
   d5d84:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5d88:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5d8a:	f7ff ffe5 	bl	d5d58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5d8e:	e006      	b.n	d5d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d90:	2300      	movs	r3, #0
   d5d92:	9300      	str	r3, [sp, #0]
   d5d94:	461a      	mov	r2, r3
   d5d96:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d9a:	f7fe fb5b 	bl	d4454 <system_ctrl_set_result>
        break;
    }
}
   d5d9e:	b003      	add	sp, #12
   d5da0:	f85d fb04 	ldr.w	pc, [sp], #4
   d5da4:	2003e728 	.word	0x2003e728

000d5da8 <module_user_init_hook>:

void module_user_init_hook()
{
   d5da8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5daa:	f7fe fa81 	bl	d42b0 <HAL_RNG_GetRandomNumber>
   d5dae:	4604      	mov	r4, r0
    srand(seed);
   d5db0:	f000 f9d4 	bl	d615c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5db4:	4b07      	ldr	r3, [pc, #28]	; (d5dd4 <module_user_init_hook+0x2c>)
   d5db6:	b113      	cbz	r3, d5dbe <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5db8:	4620      	mov	r0, r4
   d5dba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5dbe:	2100      	movs	r1, #0
   d5dc0:	4804      	ldr	r0, [pc, #16]	; (d5dd4 <module_user_init_hook+0x2c>)
   d5dc2:	f7fe fb61 	bl	d4488 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5dc6:	2100      	movs	r1, #0
   d5dc8:	4803      	ldr	r0, [pc, #12]	; (d5dd8 <module_user_init_hook+0x30>)
}
   d5dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5dce:	f7fe bb37 	b.w	d4440 <system_ctrl_set_app_request_handler>
   d5dd2:	bf00      	nop
   d5dd4:	00000000 	.word	0x00000000
   d5dd8:	000d5d71 	.word	0x000d5d71

000d5ddc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5ddc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5dde:	4c0c      	ldr	r4, [pc, #48]	; (d5e10 <_GLOBAL__sub_I_SPI+0x34>)
   d5de0:	4e0c      	ldr	r6, [pc, #48]	; (d5e14 <_GLOBAL__sub_I_SPI+0x38>)
   d5de2:	4d0d      	ldr	r5, [pc, #52]	; (d5e18 <_GLOBAL__sub_I_SPI+0x3c>)
   d5de4:	2100      	movs	r1, #0
   d5de6:	4620      	mov	r0, r4
   d5de8:	f7ff fdb0 	bl	d594c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5dec:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5dee:	4c0b      	ldr	r4, [pc, #44]	; (d5e1c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5df0:	4632      	mov	r2, r6
   d5df2:	4629      	mov	r1, r5
   d5df4:	f000 f814 	bl	d5e20 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5df8:	2101      	movs	r1, #1
   d5dfa:	4620      	mov	r0, r4
   d5dfc:	f7ff fda6 	bl	d594c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e00:	4632      	mov	r2, r6
   d5e02:	4629      	mov	r1, r5
   d5e04:	4620      	mov	r0, r4
   d5e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5e0a:	f000 b809 	b.w	d5e20 <__aeabi_atexit>
   d5e0e:	bf00      	nop
   d5e10:	2003e730 	.word	0x2003e730
   d5e14:	2003e3a8 	.word	0x2003e3a8
   d5e18:	000d593d 	.word	0x000d593d
   d5e1c:	2003e740 	.word	0x2003e740

000d5e20 <__aeabi_atexit>:
   d5e20:	460b      	mov	r3, r1
   d5e22:	4601      	mov	r1, r0
   d5e24:	4618      	mov	r0, r3
   d5e26:	f000 b94d 	b.w	d60c4 <__cxa_atexit>

000d5e2a <_ZdlPvj>:
   d5e2a:	f7fe b936 	b.w	d409a <_ZdlPv>

000d5e2e <_ZSt25__throw_bad_function_callv>:
   d5e2e:	b508      	push	{r3, lr}
   d5e30:	f7fe fb9a 	bl	d4568 <abort>

000d5e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5e34:	4b24      	ldr	r3, [pc, #144]	; (d5ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5e36:	681a      	ldr	r2, [r3, #0]
   d5e38:	07d0      	lsls	r0, r2, #31
   d5e3a:	bf5c      	itt	pl
   d5e3c:	2201      	movpl	r2, #1
   d5e3e:	601a      	strpl	r2, [r3, #0]
   d5e40:	4b22      	ldr	r3, [pc, #136]	; (d5ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5e42:	681a      	ldr	r2, [r3, #0]
   d5e44:	07d1      	lsls	r1, r2, #31
   d5e46:	bf5c      	itt	pl
   d5e48:	2201      	movpl	r2, #1
   d5e4a:	601a      	strpl	r2, [r3, #0]
   d5e4c:	4b20      	ldr	r3, [pc, #128]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5e4e:	681a      	ldr	r2, [r3, #0]
   d5e50:	07d2      	lsls	r2, r2, #31
   d5e52:	bf5c      	itt	pl
   d5e54:	2201      	movpl	r2, #1
   d5e56:	601a      	strpl	r2, [r3, #0]
   d5e58:	4b1e      	ldr	r3, [pc, #120]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5e5a:	681a      	ldr	r2, [r3, #0]
   d5e5c:	07d0      	lsls	r0, r2, #31
   d5e5e:	bf5c      	itt	pl
   d5e60:	2201      	movpl	r2, #1
   d5e62:	601a      	strpl	r2, [r3, #0]
   d5e64:	4b1c      	ldr	r3, [pc, #112]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5e66:	681a      	ldr	r2, [r3, #0]
   d5e68:	07d1      	lsls	r1, r2, #31
   d5e6a:	bf5c      	itt	pl
   d5e6c:	2201      	movpl	r2, #1
   d5e6e:	601a      	strpl	r2, [r3, #0]
   d5e70:	4b1a      	ldr	r3, [pc, #104]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5e72:	681a      	ldr	r2, [r3, #0]
   d5e74:	07d2      	lsls	r2, r2, #31
   d5e76:	bf5c      	itt	pl
   d5e78:	2201      	movpl	r2, #1
   d5e7a:	601a      	strpl	r2, [r3, #0]
   d5e7c:	4b18      	ldr	r3, [pc, #96]	; (d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5e7e:	681a      	ldr	r2, [r3, #0]
   d5e80:	07d0      	lsls	r0, r2, #31
   d5e82:	bf5c      	itt	pl
   d5e84:	2201      	movpl	r2, #1
   d5e86:	601a      	strpl	r2, [r3, #0]
   d5e88:	4b16      	ldr	r3, [pc, #88]	; (d5ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5e8a:	681a      	ldr	r2, [r3, #0]
   d5e8c:	07d1      	lsls	r1, r2, #31
   d5e8e:	bf5c      	itt	pl
   d5e90:	2201      	movpl	r2, #1
   d5e92:	601a      	strpl	r2, [r3, #0]
   d5e94:	4b14      	ldr	r3, [pc, #80]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5e96:	681a      	ldr	r2, [r3, #0]
   d5e98:	07d2      	lsls	r2, r2, #31
   d5e9a:	bf5c      	itt	pl
   d5e9c:	2201      	movpl	r2, #1
   d5e9e:	601a      	strpl	r2, [r3, #0]
   d5ea0:	4b12      	ldr	r3, [pc, #72]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	07d0      	lsls	r0, r2, #31
   d5ea6:	bf5c      	itt	pl
   d5ea8:	2201      	movpl	r2, #1
   d5eaa:	601a      	strpl	r2, [r3, #0]
   d5eac:	4b10      	ldr	r3, [pc, #64]	; (d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5eae:	681a      	ldr	r2, [r3, #0]
   d5eb0:	07d1      	lsls	r1, r2, #31
   d5eb2:	bf5c      	itt	pl
   d5eb4:	2201      	movpl	r2, #1
   d5eb6:	601a      	strpl	r2, [r3, #0]
   d5eb8:	4b0e      	ldr	r3, [pc, #56]	; (d5ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5eba:	681a      	ldr	r2, [r3, #0]
   d5ebc:	07d2      	lsls	r2, r2, #31
   d5ebe:	bf5c      	itt	pl
   d5ec0:	2201      	movpl	r2, #1
   d5ec2:	601a      	strpl	r2, [r3, #0]
   d5ec4:	4770      	bx	lr
   d5ec6:	bf00      	nop
   d5ec8:	2003e77c 	.word	0x2003e77c
   d5ecc:	2003e778 	.word	0x2003e778
   d5ed0:	2003e774 	.word	0x2003e774
   d5ed4:	2003e770 	.word	0x2003e770
   d5ed8:	2003e76c 	.word	0x2003e76c
   d5edc:	2003e768 	.word	0x2003e768
   d5ee0:	2003e764 	.word	0x2003e764
   d5ee4:	2003e760 	.word	0x2003e760
   d5ee8:	2003e75c 	.word	0x2003e75c
   d5eec:	2003e758 	.word	0x2003e758
   d5ef0:	2003e754 	.word	0x2003e754
   d5ef4:	2003e750 	.word	0x2003e750

000d5ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ef8:	4b18      	ldr	r3, [pc, #96]	; (d5f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5efa:	681a      	ldr	r2, [r3, #0]
   d5efc:	07d1      	lsls	r1, r2, #31
   d5efe:	bf5c      	itt	pl
   d5f00:	2201      	movpl	r2, #1
   d5f02:	601a      	strpl	r2, [r3, #0]
   d5f04:	4b16      	ldr	r3, [pc, #88]	; (d5f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f06:	681a      	ldr	r2, [r3, #0]
   d5f08:	07d2      	lsls	r2, r2, #31
   d5f0a:	bf5c      	itt	pl
   d5f0c:	2201      	movpl	r2, #1
   d5f0e:	601a      	strpl	r2, [r3, #0]
   d5f10:	4b14      	ldr	r3, [pc, #80]	; (d5f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f12:	681a      	ldr	r2, [r3, #0]
   d5f14:	07d0      	lsls	r0, r2, #31
   d5f16:	bf5c      	itt	pl
   d5f18:	2201      	movpl	r2, #1
   d5f1a:	601a      	strpl	r2, [r3, #0]
   d5f1c:	4b12      	ldr	r3, [pc, #72]	; (d5f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f1e:	681a      	ldr	r2, [r3, #0]
   d5f20:	07d1      	lsls	r1, r2, #31
   d5f22:	bf5c      	itt	pl
   d5f24:	2201      	movpl	r2, #1
   d5f26:	601a      	strpl	r2, [r3, #0]
   d5f28:	4b10      	ldr	r3, [pc, #64]	; (d5f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f2a:	681a      	ldr	r2, [r3, #0]
   d5f2c:	07d2      	lsls	r2, r2, #31
   d5f2e:	bf5c      	itt	pl
   d5f30:	2201      	movpl	r2, #1
   d5f32:	601a      	strpl	r2, [r3, #0]
   d5f34:	4b0e      	ldr	r3, [pc, #56]	; (d5f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f36:	681a      	ldr	r2, [r3, #0]
   d5f38:	07d0      	lsls	r0, r2, #31
   d5f3a:	bf5c      	itt	pl
   d5f3c:	2201      	movpl	r2, #1
   d5f3e:	601a      	strpl	r2, [r3, #0]
   d5f40:	4b0c      	ldr	r3, [pc, #48]	; (d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d1      	lsls	r1, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4b0a      	ldr	r3, [pc, #40]	; (d5f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f4e:	681a      	ldr	r2, [r3, #0]
   d5f50:	07d2      	lsls	r2, r2, #31
   d5f52:	bf5c      	itt	pl
   d5f54:	2201      	movpl	r2, #1
   d5f56:	601a      	strpl	r2, [r3, #0]
   d5f58:	4770      	bx	lr
   d5f5a:	bf00      	nop
   d5f5c:	2003e79c 	.word	0x2003e79c
   d5f60:	2003e798 	.word	0x2003e798
   d5f64:	2003e794 	.word	0x2003e794
   d5f68:	2003e790 	.word	0x2003e790
   d5f6c:	2003e78c 	.word	0x2003e78c
   d5f70:	2003e788 	.word	0x2003e788
   d5f74:	2003e784 	.word	0x2003e784
   d5f78:	2003e780 	.word	0x2003e780

000d5f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f7c:	4b18      	ldr	r3, [pc, #96]	; (d5fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f7e:	681a      	ldr	r2, [r3, #0]
   d5f80:	07d1      	lsls	r1, r2, #31
   d5f82:	bf5c      	itt	pl
   d5f84:	2201      	movpl	r2, #1
   d5f86:	601a      	strpl	r2, [r3, #0]
   d5f88:	4b16      	ldr	r3, [pc, #88]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f8a:	681a      	ldr	r2, [r3, #0]
   d5f8c:	07d2      	lsls	r2, r2, #31
   d5f8e:	bf5c      	itt	pl
   d5f90:	2201      	movpl	r2, #1
   d5f92:	601a      	strpl	r2, [r3, #0]
   d5f94:	4b14      	ldr	r3, [pc, #80]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f96:	681a      	ldr	r2, [r3, #0]
   d5f98:	07d0      	lsls	r0, r2, #31
   d5f9a:	bf5c      	itt	pl
   d5f9c:	2201      	movpl	r2, #1
   d5f9e:	601a      	strpl	r2, [r3, #0]
   d5fa0:	4b12      	ldr	r3, [pc, #72]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5fa2:	681a      	ldr	r2, [r3, #0]
   d5fa4:	07d1      	lsls	r1, r2, #31
   d5fa6:	bf5c      	itt	pl
   d5fa8:	2201      	movpl	r2, #1
   d5faa:	601a      	strpl	r2, [r3, #0]
   d5fac:	4b10      	ldr	r3, [pc, #64]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fae:	681a      	ldr	r2, [r3, #0]
   d5fb0:	07d2      	lsls	r2, r2, #31
   d5fb2:	bf5c      	itt	pl
   d5fb4:	2201      	movpl	r2, #1
   d5fb6:	601a      	strpl	r2, [r3, #0]
   d5fb8:	4b0e      	ldr	r3, [pc, #56]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fba:	681a      	ldr	r2, [r3, #0]
   d5fbc:	07d0      	lsls	r0, r2, #31
   d5fbe:	bf5c      	itt	pl
   d5fc0:	2201      	movpl	r2, #1
   d5fc2:	601a      	strpl	r2, [r3, #0]
   d5fc4:	4b0c      	ldr	r3, [pc, #48]	; (d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fc6:	681a      	ldr	r2, [r3, #0]
   d5fc8:	07d1      	lsls	r1, r2, #31
   d5fca:	bf5c      	itt	pl
   d5fcc:	2201      	movpl	r2, #1
   d5fce:	601a      	strpl	r2, [r3, #0]
   d5fd0:	4b0a      	ldr	r3, [pc, #40]	; (d5ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fd2:	681a      	ldr	r2, [r3, #0]
   d5fd4:	07d2      	lsls	r2, r2, #31
   d5fd6:	bf5c      	itt	pl
   d5fd8:	2201      	movpl	r2, #1
   d5fda:	601a      	strpl	r2, [r3, #0]
   d5fdc:	4770      	bx	lr
   d5fde:	bf00      	nop
   d5fe0:	2003e7bc 	.word	0x2003e7bc
   d5fe4:	2003e7b8 	.word	0x2003e7b8
   d5fe8:	2003e7b4 	.word	0x2003e7b4
   d5fec:	2003e7b0 	.word	0x2003e7b0
   d5ff0:	2003e7ac 	.word	0x2003e7ac
   d5ff4:	2003e7a8 	.word	0x2003e7a8
   d5ff8:	2003e7a4 	.word	0x2003e7a4
   d5ffc:	2003e7a0 	.word	0x2003e7a0

000d6000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6000:	4b24      	ldr	r3, [pc, #144]	; (d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6002:	681a      	ldr	r2, [r3, #0]
   d6004:	07d0      	lsls	r0, r2, #31
   d6006:	bf5c      	itt	pl
   d6008:	2201      	movpl	r2, #1
   d600a:	601a      	strpl	r2, [r3, #0]
   d600c:	4b22      	ldr	r3, [pc, #136]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d600e:	681a      	ldr	r2, [r3, #0]
   d6010:	07d1      	lsls	r1, r2, #31
   d6012:	bf5c      	itt	pl
   d6014:	2201      	movpl	r2, #1
   d6016:	601a      	strpl	r2, [r3, #0]
   d6018:	4b20      	ldr	r3, [pc, #128]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d2      	lsls	r2, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4b1e      	ldr	r3, [pc, #120]	; (d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	07d0      	lsls	r0, r2, #31
   d602a:	bf5c      	itt	pl
   d602c:	2201      	movpl	r2, #1
   d602e:	601a      	strpl	r2, [r3, #0]
   d6030:	4b1c      	ldr	r3, [pc, #112]	; (d60a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d1      	lsls	r1, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4b1a      	ldr	r3, [pc, #104]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d603e:	681a      	ldr	r2, [r3, #0]
   d6040:	07d2      	lsls	r2, r2, #31
   d6042:	bf5c      	itt	pl
   d6044:	2201      	movpl	r2, #1
   d6046:	601a      	strpl	r2, [r3, #0]
   d6048:	4b18      	ldr	r3, [pc, #96]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d604a:	681a      	ldr	r2, [r3, #0]
   d604c:	07d0      	lsls	r0, r2, #31
   d604e:	bf5c      	itt	pl
   d6050:	2201      	movpl	r2, #1
   d6052:	601a      	strpl	r2, [r3, #0]
   d6054:	4b16      	ldr	r3, [pc, #88]	; (d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d1      	lsls	r1, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4b14      	ldr	r3, [pc, #80]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d2      	lsls	r2, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4b12      	ldr	r3, [pc, #72]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d606e:	681a      	ldr	r2, [r3, #0]
   d6070:	07d0      	lsls	r0, r2, #31
   d6072:	bf5c      	itt	pl
   d6074:	2201      	movpl	r2, #1
   d6076:	601a      	strpl	r2, [r3, #0]
   d6078:	4b10      	ldr	r3, [pc, #64]	; (d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d607a:	681a      	ldr	r2, [r3, #0]
   d607c:	07d1      	lsls	r1, r2, #31
   d607e:	bf5c      	itt	pl
   d6080:	2201      	movpl	r2, #1
   d6082:	601a      	strpl	r2, [r3, #0]
   d6084:	4b0e      	ldr	r3, [pc, #56]	; (d60c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6086:	681a      	ldr	r2, [r3, #0]
   d6088:	07d2      	lsls	r2, r2, #31
   d608a:	bf5c      	itt	pl
   d608c:	2201      	movpl	r2, #1
   d608e:	601a      	strpl	r2, [r3, #0]
   d6090:	4770      	bx	lr
   d6092:	bf00      	nop
   d6094:	2003e7ec 	.word	0x2003e7ec
   d6098:	2003e7e8 	.word	0x2003e7e8
   d609c:	2003e7e4 	.word	0x2003e7e4
   d60a0:	2003e7e0 	.word	0x2003e7e0
   d60a4:	2003e7dc 	.word	0x2003e7dc
   d60a8:	2003e7d8 	.word	0x2003e7d8
   d60ac:	2003e7d4 	.word	0x2003e7d4
   d60b0:	2003e7d0 	.word	0x2003e7d0
   d60b4:	2003e7cc 	.word	0x2003e7cc
   d60b8:	2003e7c8 	.word	0x2003e7c8
   d60bc:	2003e7c4 	.word	0x2003e7c4
   d60c0:	2003e7c0 	.word	0x2003e7c0

000d60c4 <__cxa_atexit>:
   d60c4:	b510      	push	{r4, lr}
   d60c6:	4c05      	ldr	r4, [pc, #20]	; (d60dc <__cxa_atexit+0x18>)
   d60c8:	4613      	mov	r3, r2
   d60ca:	b12c      	cbz	r4, d60d8 <__cxa_atexit+0x14>
   d60cc:	460a      	mov	r2, r1
   d60ce:	4601      	mov	r1, r0
   d60d0:	2002      	movs	r0, #2
   d60d2:	f3af 8000 	nop.w
   d60d6:	bd10      	pop	{r4, pc}
   d60d8:	4620      	mov	r0, r4
   d60da:	bd10      	pop	{r4, pc}
   d60dc:	00000000 	.word	0x00000000

000d60e0 <memcmp>:
   d60e0:	b510      	push	{r4, lr}
   d60e2:	3901      	subs	r1, #1
   d60e4:	4402      	add	r2, r0
   d60e6:	4290      	cmp	r0, r2
   d60e8:	d007      	beq.n	d60fa <memcmp+0x1a>
   d60ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   d60ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d60f2:	42a3      	cmp	r3, r4
   d60f4:	d0f7      	beq.n	d60e6 <memcmp+0x6>
   d60f6:	1b18      	subs	r0, r3, r4
   d60f8:	bd10      	pop	{r4, pc}
   d60fa:	2000      	movs	r0, #0
   d60fc:	bd10      	pop	{r4, pc}

000d60fe <memcpy>:
   d60fe:	b510      	push	{r4, lr}
   d6100:	1e43      	subs	r3, r0, #1
   d6102:	440a      	add	r2, r1
   d6104:	4291      	cmp	r1, r2
   d6106:	d004      	beq.n	d6112 <memcpy+0x14>
   d6108:	f811 4b01 	ldrb.w	r4, [r1], #1
   d610c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6110:	e7f8      	b.n	d6104 <memcpy+0x6>
   d6112:	bd10      	pop	{r4, pc}

000d6114 <memmove>:
   d6114:	4288      	cmp	r0, r1
   d6116:	b510      	push	{r4, lr}
   d6118:	eb01 0302 	add.w	r3, r1, r2
   d611c:	d801      	bhi.n	d6122 <memmove+0xe>
   d611e:	1e42      	subs	r2, r0, #1
   d6120:	e00b      	b.n	d613a <memmove+0x26>
   d6122:	4298      	cmp	r0, r3
   d6124:	d2fb      	bcs.n	d611e <memmove+0xa>
   d6126:	1881      	adds	r1, r0, r2
   d6128:	1ad2      	subs	r2, r2, r3
   d612a:	42d3      	cmn	r3, r2
   d612c:	d004      	beq.n	d6138 <memmove+0x24>
   d612e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6132:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6136:	e7f8      	b.n	d612a <memmove+0x16>
   d6138:	bd10      	pop	{r4, pc}
   d613a:	4299      	cmp	r1, r3
   d613c:	d004      	beq.n	d6148 <memmove+0x34>
   d613e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6142:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6146:	e7f8      	b.n	d613a <memmove+0x26>
   d6148:	bd10      	pop	{r4, pc}

000d614a <memset>:
   d614a:	4402      	add	r2, r0
   d614c:	4603      	mov	r3, r0
   d614e:	4293      	cmp	r3, r2
   d6150:	d002      	beq.n	d6158 <memset+0xe>
   d6152:	f803 1b01 	strb.w	r1, [r3], #1
   d6156:	e7fa      	b.n	d614e <memset+0x4>
   d6158:	4770      	bx	lr
	...

000d615c <srand>:
   d615c:	b538      	push	{r3, r4, r5, lr}
   d615e:	4b12      	ldr	r3, [pc, #72]	; (d61a8 <srand+0x4c>)
   d6160:	681c      	ldr	r4, [r3, #0]
   d6162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6164:	4605      	mov	r5, r0
   d6166:	b9d3      	cbnz	r3, d619e <srand+0x42>
   d6168:	2018      	movs	r0, #24
   d616a:	f7fe f9e5 	bl	d4538 <malloc>
   d616e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6172:	63a0      	str	r0, [r4, #56]	; 0x38
   d6174:	8003      	strh	r3, [r0, #0]
   d6176:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d617a:	8043      	strh	r3, [r0, #2]
   d617c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6180:	8083      	strh	r3, [r0, #4]
   d6182:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6186:	80c3      	strh	r3, [r0, #6]
   d6188:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d618c:	8103      	strh	r3, [r0, #8]
   d618e:	2305      	movs	r3, #5
   d6190:	8143      	strh	r3, [r0, #10]
   d6192:	230b      	movs	r3, #11
   d6194:	8183      	strh	r3, [r0, #12]
   d6196:	2201      	movs	r2, #1
   d6198:	2300      	movs	r3, #0
   d619a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d619e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d61a0:	2200      	movs	r2, #0
   d61a2:	611d      	str	r5, [r3, #16]
   d61a4:	615a      	str	r2, [r3, #20]
   d61a6:	bd38      	pop	{r3, r4, r5, pc}
   d61a8:	2003e3a4 	.word	0x2003e3a4

000d61ac <strdup>:
   d61ac:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <strdup+0xc>)
   d61ae:	4601      	mov	r1, r0
   d61b0:	6818      	ldr	r0, [r3, #0]
   d61b2:	f000 b803 	b.w	d61bc <_strdup_r>
   d61b6:	bf00      	nop
   d61b8:	2003e3a4 	.word	0x2003e3a4

000d61bc <_strdup_r>:
   d61bc:	b570      	push	{r4, r5, r6, lr}
   d61be:	4606      	mov	r6, r0
   d61c0:	4608      	mov	r0, r1
   d61c2:	460c      	mov	r4, r1
   d61c4:	f000 f80d 	bl	d61e2 <strlen>
   d61c8:	1c45      	adds	r5, r0, #1
   d61ca:	4629      	mov	r1, r5
   d61cc:	4630      	mov	r0, r6
   d61ce:	f7fe f9d3 	bl	d4578 <_malloc_r>
   d61d2:	4606      	mov	r6, r0
   d61d4:	b118      	cbz	r0, d61de <_strdup_r+0x22>
   d61d6:	462a      	mov	r2, r5
   d61d8:	4621      	mov	r1, r4
   d61da:	f7ff ff90 	bl	d60fe <memcpy>
   d61de:	4630      	mov	r0, r6
   d61e0:	bd70      	pop	{r4, r5, r6, pc}

000d61e2 <strlen>:
   d61e2:	4603      	mov	r3, r0
   d61e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61e8:	2a00      	cmp	r2, #0
   d61ea:	d1fb      	bne.n	d61e4 <strlen+0x2>
   d61ec:	1a18      	subs	r0, r3, r0
   d61ee:	3801      	subs	r0, #1
   d61f0:	4770      	bx	lr

000d61f2 <link_code_end>:
	...

000d61f4 <dynalib_user>:
   d61f4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6204:	0000 0000 6562 6361 6e6f 612f 7664 6554     ....beacon/advTe
   d6214:	7478 7300 7465 6441 5476 7865 0074 6153     xt.setAdvText.Sa
   d6224:	706d 656c 0000 0000                         mple....

000d622c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6234:	45b1 000d 45b7 000d 49b7 000d 45c5 000d     .E...E...I...E..
   d6244:	45b3 000d                                   .E..

000d6248 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6250:	4ead 000d 4eb3 000d 4edd 000d 4ec1 000d     .N...N...N...N..
   d6260:	4eaf 000d                                   .N..

000d6264 <_ZTVN5spark13EthernetClassE>:
	...
   d626c:	54ab 000d 54a1 000d 5497 000d 548d 000d     .T...T...T...T..
   d627c:	5481 000d 5475 000d 5469 000d 5461 000d     .T..uT..iT..aT..
   d628c:	5457 000d 544d 000d 5785 000d               WT..MT...W..

000d6298 <_ZTV9IPAddress>:
	...
   d62a0:	54d9 000d 54c9 000d 54cb 000d 0066 6e6c     .T...T...T..f.ln
   d62b0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d62c0:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d62d0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d62e0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d62f0:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d6300:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d6310:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d6320:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d6330:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d6340:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d6350:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d6360:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d6370:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6380:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6390 <_ZTVN5spark9MeshClassE>:
	...
   d6398:	561b 000d 5611 000d 5607 000d 55fd 000d     .V...V...V...U..
   d63a8:	55f1 000d 55e5 000d 55d9 000d 55d1 000d     .U...U...U...U..
   d63b8:	55c7 000d 55bd 000d 5785 000d               .U...U...W..

000d63c4 <_ZTVN5spark12NetworkClassE>:
	...
   d63cc:	571d 000d 5727 000d 5731 000d 573b 000d     .W..'W..1W..;W..
   d63dc:	5745 000d 5751 000d 575d 000d 5769 000d     EW..QW..]W..iW..
   d63ec:	5771 000d 577b 000d 5785 000d               qW..{W...W..

000d63f8 <_ZTV8SPIClass>:
	...
   d6400:	593d 000d 593f 000d 005a 2b25 3330 3a64     =Y..?Y..Z.%+03d:
   d6410:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6420:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d6430:	0000 0000                                   ....

000d6434 <_ZTV11USARTSerial>:
	...
   d643c:	5a89 000d 5ad9 000d 5ae7 000d 5865 000d     .Z...Z...Z..eX..
   d644c:	5a9d 000d 5abf 000d 5aab 000d 5ad3 000d     .Z...Z...Z...Z..
   d645c:	5a8b 000d 5a8f 000d                         .Z...Z..

000d6464 <_ZTV9USBSerial>:
	...
   d646c:	5b89 000d 5bd9 000d 5be7 000d 5865 000d     .[...[...[..eX..
   d647c:	5bc5 000d 5b8b 000d 5ba1 000d 5bd3 000d     .[...[...[...[..
   d648c:	5bb7 000d 5b85 000d                         .[...[..

000d6494 <_ZTVN5spark9WiFiClassE>:
	...
   d649c:	5ceb 000d 5ce1 000d 5cd7 000d 5c8d 000d     .\...\...\...\..
   d64ac:	5ccb 000d 5cbf 000d 5cb3 000d 5cab 000d     .\...\...\...\..
   d64bc:	5ca1 000d 5c97 000d 5785 000d               .\...\...W..

000d64c8 <__sf_fake_stdin>:
	...

000d64e8 <__sf_fake_stdout>:
	...

000d6508 <__sf_fake_stderr>:
	...
   d6528:	0043                                        C.

000d652a <link_const_variable_data_end>:
	...

000d652c <link_constructors_location>:
   d652c:	000d4199 	.word	0x000d4199
   d6530:	000d4e9d 	.word	0x000d4e9d
   d6534:	000d54b5 	.word	0x000d54b5
   d6538:	000d55ad 	.word	0x000d55ad
   d653c:	000d56d1 	.word	0x000d56d1
   d6540:	000d5851 	.word	0x000d5851
   d6544:	000d5921 	.word	0x000d5921
   d6548:	000d5a5d 	.word	0x000d5a5d
   d654c:	000d5a75 	.word	0x000d5a75
   d6550:	000d5cf5 	.word	0x000d5cf5
   d6554:	000d5ddd 	.word	0x000d5ddd
   d6558:	000d5e35 	.word	0x000d5e35
   d655c:	000d5ef9 	.word	0x000d5ef9
   d6560:	000d5f7d 	.word	0x000d5f7d
   d6564:	000d6001 	.word	0x000d6001

000d6568 <link_constructors_end>:
	...
