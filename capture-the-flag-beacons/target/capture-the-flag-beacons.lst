
/Users/bsatrom/Development/particle/that-conf-beacons/capture-the-flag-beacons/target/capture-the-flag-beacons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002748  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000167f4  2**0
                  CONTENTS
  3 .data         00000068  2003e320  000d6760  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000468  2003e388  2003e388  0001e388  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d67c8  000d67c8  000167c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d67f0  000d67f0  000167f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000dcaee  00000000  00000000  000167f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000108e9  00000000  00000000  000f32e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000192f6  00000000  00000000  00103bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000022d8  00000000  00000000  0011cec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004030  00000000  00000000  0011f199  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003546d  00000000  00000000  001231c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026af0  00000000  00000000  00158636  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00106826  00000000  00000000  0017f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c364  00000000  00000000  0028594c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	90 63 0d 00                                         .c..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f934 	bl	d629a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f954 	bl	d62e6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e320 	.word	0x2003e320
   d4048:	000d6760 	.word	0x000d6760
   d404c:	2003e388 	.word	0x2003e388
   d4050:	2003e388 	.word	0x2003e388
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ff05 	bl	d5e68 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6754 	.word	0x000d6754
   d4080:	000d6718 	.word	0x000d6718

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f861 	bl	d4150 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 beb7 	b.w	d5e04 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bacb 	b.w	d4630 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bad1 	b.w	d4640 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bacf 	b.w	d4640 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
bool coolingDown = false;
unsigned long cooldownStart = 0;
#define COOLDOWN_DELAY 60000

void setup()
{
   d40b4:	b500      	push	{lr}
   d40b6:	b097      	sub	sp, #92	; 0x5c
  Serial.begin();
   d40b8:	f001 fe22 	bl	d5d00 <_Z16_fetch_usbserialv>
   d40bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c0:	f001 fe12 	bl	d5ce8 <_ZN9USBSerial5beginEl>

  pinMode(D7, OUTPUT);
   d40c4:	2101      	movs	r1, #1
   d40c6:	2007      	movs	r0, #7
   d40c8:	f001 ff0c 	bl	d5ee4 <pinMode>

  // Accept connections from Central devices (Badges)
  BleAdvertisingData data;
   d40cc:	a80d      	add	r0, sp, #52	; 0x34
   d40ce:	f000 fbef 	bl	d48b0 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d40d2:	4913      	ldr	r1, [pc, #76]	; (d4120 <setup+0x6c>)
   d40d4:	a803      	add	r0, sp, #12
   d40d6:	f000 fb1f 	bl	d4718 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d40da:	a903      	add	r1, sp, #12
   d40dc:	a808      	add	r0, sp, #32
   d40de:	f000 fb1b 	bl	d4718 <_ZN8particle7BleUuidC1ERKS0_>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d40e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   d40e6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
   d40ea:	d005      	beq.n	d40f8 <setup+0x44>
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.full(), BLE_SIG_UUID_128BIT_LEN, force);
   d40ec:	2300      	movs	r3, #0
   d40ee:	9300      	str	r3, [sp, #0]
   d40f0:	aa08      	add	r2, sp, #32
   d40f2:	2310      	movs	r3, #16
   d40f4:	2107      	movs	r1, #7
   d40f6:	e007      	b.n	d4108 <setup+0x54>

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d40f8:	aa16      	add	r2, sp, #88	; 0x58
   d40fa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d40fe:	f822 1d4e 	strh.w	r1, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4102:	9300      	str	r3, [sp, #0]
   d4104:	2103      	movs	r1, #3
   d4106:	2302      	movs	r3, #2
   d4108:	a80d      	add	r0, sp, #52	; 0x34
   d410a:	f000 fb8a 	bl	d4822 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d410e:	f000 fe53 	bl	d4db8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4112:	2200      	movs	r2, #0
   d4114:	a90d      	add	r1, sp, #52	; 0x34
   d4116:	f000 fc77 	bl	d4a08 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d411a:	b017      	add	sp, #92	; 0x5c
   d411c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4120:	2003e38e 	.word	0x2003e38e

000d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4124:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4126:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4128:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d412a:	b17c      	cbz	r4, d414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d412c:	6863      	ldr	r3, [r4, #4]
   d412e:	3b01      	subs	r3, #1
   d4130:	6063      	str	r3, [r4, #4]
   d4132:	b95b      	cbnz	r3, d414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4134:	6823      	ldr	r3, [r4, #0]
   d4136:	4620      	mov	r0, r4
   d4138:	689b      	ldr	r3, [r3, #8]
   d413a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d413c:	68a3      	ldr	r3, [r4, #8]
   d413e:	3b01      	subs	r3, #1
   d4140:	60a3      	str	r3, [r4, #8]
   d4142:	b91b      	cbnz	r3, d414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4144:	6823      	ldr	r3, [r4, #0]
   d4146:	4620      	mov	r0, r4
   d4148:	68db      	ldr	r3, [r3, #12]
   d414a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d414c:	4628      	mov	r0, r5
   d414e:	bd38      	pop	{r3, r4, r5, pc}

000d4150 <loop>:

void loop()
{
   d4150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!coolingDown) {
   d4152:	4c21      	ldr	r4, [pc, #132]	; (d41d8 <loop+0x88>)
   d4154:	7825      	ldrb	r5, [r4, #0]
   d4156:	2d00      	cmp	r5, #0
   d4158:	d131      	bne.n	d41be <loop+0x6e>
    /* When a connection is made, award a point by publishing a 
    message to the Particle Device Cloud */
    if (BLE.connected()) {
   d415a:	f000 fe2d 	bl	d4db8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d415e:	f000 fc70 	bl	d4a42 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4162:	2800      	cmp	r0, #0
   d4164:	d036      	beq.n	d41d4 <loop+0x84>
      coolingDown = true;
   d4166:	2601      	movs	r6, #1
   d4168:	7026      	strb	r6, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d416a:	f000 f8c5 	bl	d42f8 <HAL_Timer_Get_Milli_Seconds>
   d416e:	4c1b      	ldr	r4, [pc, #108]	; (d41dc <loop+0x8c>)
      cooldownStart = millis();
   d4170:	4b1b      	ldr	r3, [pc, #108]	; (d41e0 <loop+0x90>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4172:	4a1c      	ldr	r2, [pc, #112]	; (d41e4 <loop+0x94>)
   d4174:	6018      	str	r0, [r3, #0]
   d4176:	7823      	ldrb	r3, [r4, #0]
   d4178:	f88d 3000 	strb.w	r3, [sp]
   d417c:	491a      	ldr	r1, [pc, #104]	; (d41e8 <loop+0x98>)
   d417e:	233c      	movs	r3, #60	; 0x3c
   d4180:	a802      	add	r0, sp, #8
   d4182:	f001 f883 	bl	d528c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4186:	a803      	add	r0, sp, #12
   d4188:	f7ff ffcc 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d418c:	7823      	ldrb	r3, [r4, #0]
   d418e:	4a17      	ldr	r2, [pc, #92]	; (d41ec <loop+0x9c>)
   d4190:	f88d 3000 	strb.w	r3, [sp]
   d4194:	4916      	ldr	r1, [pc, #88]	; (d41f0 <loop+0xa0>)
   d4196:	233c      	movs	r3, #60	; 0x3c
   d4198:	a802      	add	r0, sp, #8
   d419a:	f001 f877 	bl	d528c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d419e:	a803      	add	r0, sp, #12
   d41a0:	f7ff ffc0 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
      Particle.publish("tc-ctf/point-scored", TEAM_NAME, PRIVATE);
      Particle.publish("tc-ctf/uuid", BLE_UUID, PRIVATE);
      
      digitalWrite(D7, HIGH);
   d41a4:	4631      	mov	r1, r6
   d41a6:	2007      	movs	r0, #7
   d41a8:	f001 fead 	bl	d5f06 <digitalWrite>
      delay(2000);
   d41ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41b0:	f000 fa5e 	bl	d4670 <delay>
      digitalWrite(D7, LOW);
   d41b4:	4629      	mov	r1, r5
   d41b6:	2007      	movs	r0, #7
   d41b8:	f001 fea5 	bl	d5f06 <digitalWrite>
   d41bc:	e00a      	b.n	d41d4 <loop+0x84>
   d41be:	f000 f89b 	bl	d42f8 <HAL_Timer_Get_Milli_Seconds>
    }
  } 
  else if (millis() > cooldownStart + COOLDOWN_DELAY)
   d41c2:	4b07      	ldr	r3, [pc, #28]	; (d41e0 <loop+0x90>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
   d41ca:	3360      	adds	r3, #96	; 0x60
   d41cc:	4298      	cmp	r0, r3
  {
    coolingDown = false;
   d41ce:	bf84      	itt	hi
   d41d0:	2300      	movhi	r3, #0
   d41d2:	7023      	strbhi	r3, [r4, #0]
  }
   d41d4:	b004      	add	sp, #16
   d41d6:	bd70      	pop	{r4, r5, r6, pc}
   d41d8:	2003e38c 	.word	0x2003e38c
   d41dc:	2003e3a2 	.word	0x2003e3a2
   d41e0:	2003e3a4 	.word	0x2003e3a4
   d41e4:	000d63a4 	.word	0x000d63a4
   d41e8:	000d63ac 	.word	0x000d63ac
   d41ec:	000d63c0 	.word	0x000d63c0
   d41f0:	000d63e5 	.word	0x000d63e5

000d41f4 <_GLOBAL__sub_I_coolingDown>:
   d41f4:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41f6:	4b05      	ldr	r3, [pc, #20]	; (d420c <_GLOBAL__sub_I_coolingDown+0x18>)
   d41f8:	2201      	movs	r2, #1
   d41fa:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41fc:	f000 f884 	bl	d4308 <HAL_Pin_Map>
// #define BLE_UUID "422b00f5-56e4-4969-9c70-52cc847f7e2c" // UUID for TEAM ONE

#define TEAM_NAME "TeamTwo"
#define BLE_UUID "107367af-834a-4690-bfc4-133c6e6ca6e4" // UUID for TEAM ONE

const BleUuid serviceUuid(BLE_UUID);
   d4200:	4903      	ldr	r1, [pc, #12]	; (d4210 <_GLOBAL__sub_I_coolingDown+0x1c>)
   d4202:	4804      	ldr	r0, [pc, #16]	; (d4214 <_GLOBAL__sub_I_coolingDown+0x20>)
  } 
  else if (millis() > cooldownStart + COOLDOWN_DELAY)
  {
    coolingDown = false;
  }
   d4204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// #define BLE_UUID "422b00f5-56e4-4969-9c70-52cc847f7e2c" // UUID for TEAM ONE

#define TEAM_NAME "TeamTwo"
#define BLE_UUID "107367af-834a-4690-bfc4-133c6e6ca6e4" // UUID for TEAM ONE

const BleUuid serviceUuid(BLE_UUID);
   d4208:	f000 ba91 	b.w	d472e <_ZN8particle7BleUuidC1EPKc>
   d420c:	2003e3a2 	.word	0x2003e3a2
   d4210:	000d63c0 	.word	0x000d63c0
   d4214:	2003e38e 	.word	0x2003e38e

000d4218 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4218:	b508      	push	{r3, lr}
   d421a:	4b02      	ldr	r3, [pc, #8]	; (d4224 <hal_ble_stack_init+0xc>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	689b      	ldr	r3, [r3, #8]
   d4220:	9301      	str	r3, [sp, #4]
   d4222:	bd08      	pop	{r3, pc}
   d4224:	00030278 	.word	0x00030278

000d4228 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d4228:	b508      	push	{r3, lr}
   d422a:	4b02      	ldr	r3, [pc, #8]	; (d4234 <hal_ble_set_callback_on_events+0xc>)
   d422c:	681b      	ldr	r3, [r3, #0]
   d422e:	695b      	ldr	r3, [r3, #20]
   d4230:	9301      	str	r3, [sp, #4]
   d4232:	bd08      	pop	{r3, pc}
   d4234:	00030278 	.word	0x00030278

000d4238 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4238:	b508      	push	{r3, lr}
   d423a:	4b02      	ldr	r3, [pc, #8]	; (d4244 <hal_ble_gap_set_advertising_data+0xc>)
   d423c:	681b      	ldr	r3, [r3, #0]
   d423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4240:	9301      	str	r3, [sp, #4]
   d4242:	bd08      	pop	{r3, pc}
   d4244:	00030278 	.word	0x00030278

000d4248 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4248:	b508      	push	{r3, lr}
   d424a:	4b02      	ldr	r3, [pc, #8]	; (d4254 <hal_ble_gap_set_scan_response_data+0xc>)
   d424c:	681b      	ldr	r3, [r3, #0]
   d424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4250:	9301      	str	r3, [sp, #4]
   d4252:	bd08      	pop	{r3, pc}
   d4254:	00030278 	.word	0x00030278

000d4258 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4258:	b508      	push	{r3, lr}
   d425a:	4b02      	ldr	r3, [pc, #8]	; (d4264 <hal_ble_gap_start_advertising+0xc>)
   d425c:	681b      	ldr	r3, [r3, #0]
   d425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	bd08      	pop	{r3, pc}
   d4264:	00030278 	.word	0x00030278

000d4268 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4268:	b508      	push	{r3, lr}
   d426a:	4b02      	ldr	r3, [pc, #8]	; (d4274 <os_thread_is_current+0xc>)
   d426c:	681b      	ldr	r3, [r3, #0]
   d426e:	689b      	ldr	r3, [r3, #8]
   d4270:	9301      	str	r3, [sp, #4]
   d4272:	bd08      	pop	{r3, pc}
   d4274:	00030248 	.word	0x00030248

000d4278 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4278:	b508      	push	{r3, lr}
   d427a:	4b02      	ldr	r3, [pc, #8]	; (d4284 <os_thread_join+0xc>)
   d427c:	681b      	ldr	r3, [r3, #0]
   d427e:	691b      	ldr	r3, [r3, #16]
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	bd08      	pop	{r3, pc}
   d4284:	00030248 	.word	0x00030248

000d4288 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <os_thread_cleanup+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	695b      	ldr	r3, [r3, #20]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	00030248 	.word	0x00030248

000d4298 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <os_mutex_create+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	00030248 	.word	0x00030248

000d42a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <os_mutex_recursive_create+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	00030248 	.word	0x00030248

000d42b8 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <os_mutex_recursive_lock+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030248 	.word	0x00030248

000d42c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <os_mutex_recursive_unlock+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030248 	.word	0x00030248

000d42d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_RNG_GetRandomNumber+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	685b      	ldr	r3, [r3, #4]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030218 	.word	0x00030218

000d42e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Delay_Microseconds+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	68db      	ldr	r3, [r3, #12]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030218 	.word	0x00030218

000d42f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	695b      	ldr	r3, [r3, #20]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	00030218 	.word	0x00030218

000d4308 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <HAL_Pin_Map+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	681b      	ldr	r3, [r3, #0]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	0003022c 	.word	0x0003022c

000d4318 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <HAL_Pin_Mode+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	689b      	ldr	r3, [r3, #8]
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	0003022c 	.word	0x0003022c

000d4328 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_Get_Pin_Mode+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	68db      	ldr	r3, [r3, #12]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	0003022c 	.word	0x0003022c

000d4338 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_GPIO_Write+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	691b      	ldr	r3, [r3, #16]
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	0003022c 	.word	0x0003022c

000d4348 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_I2C_Write_Data+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	6a1b      	ldr	r3, [r3, #32]
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030228 	.word	0x00030228

000d4358 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_I2C_Available_Data+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030228 	.word	0x00030228

000d4368 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_I2C_Read_Data+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030228 	.word	0x00030228

000d4378 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_I2C_Peek_Data+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030228 	.word	0x00030228

000d4388 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_I2C_Flush_Data+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030228 	.word	0x00030228

000d4398 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <HAL_I2C_Is_Enabled+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030228 	.word	0x00030228

000d43a8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <HAL_I2C_Init+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030228 	.word	0x00030228

000d43b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <inet_inet_ntop+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	695b      	ldr	r3, [r3, #20]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030264 	.word	0x00030264

000d43c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <netdb_freeaddrinfo+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	689b      	ldr	r3, [r3, #8]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030268 	.word	0x00030268

000d43d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <netdb_getaddrinfo+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	68db      	ldr	r3, [r3, #12]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030268 	.word	0x00030268

000d43e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_SPI_Init+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	69db      	ldr	r3, [r3, #28]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030230 	.word	0x00030230

000d43f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_SPI_Is_Enabled+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	6a1b      	ldr	r3, [r3, #32]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030230 	.word	0x00030230

000d4408 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USART_Init+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	681b      	ldr	r3, [r3, #0]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003023c 	.word	0x0003023c

000d4418 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USART_Write_Data+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	68db      	ldr	r3, [r3, #12]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003023c 	.word	0x0003023c

000d4428 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USART_Available_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	691b      	ldr	r3, [r3, #16]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003023c 	.word	0x0003023c

000d4438 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USART_Read_Data+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	695b      	ldr	r3, [r3, #20]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003023c 	.word	0x0003023c

000d4448 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USART_Peek_Data+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	699b      	ldr	r3, [r3, #24]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003023c 	.word	0x0003023c

000d4458 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USART_Flush_Data+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	69db      	ldr	r3, [r3, #28]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003023c 	.word	0x0003023c

000d4468 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USART_Is_Enabled+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6a1b      	ldr	r3, [r3, #32]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003023c 	.word	0x0003023c

000d4478 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USART_Available_Data_For_Write+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003023c 	.word	0x0003023c

000d4488 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_USB_USART_Init+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	681b      	ldr	r3, [r3, #0]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003024c 	.word	0x0003024c

000d4498 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_USB_USART_Begin+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	685b      	ldr	r3, [r3, #4]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003024c 	.word	0x0003024c

000d44a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_USB_USART_Available_Data+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	691b      	ldr	r3, [r3, #16]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003024c 	.word	0x0003024c

000d44b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	695b      	ldr	r3, [r3, #20]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003024c 	.word	0x0003024c

000d44c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_USB_USART_Receive_Data+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	699b      	ldr	r3, [r3, #24]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003024c 	.word	0x0003024c

000d44d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_USB_USART_Send_Data+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	69db      	ldr	r3, [r3, #28]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003024c 	.word	0x0003024c

000d44e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_USB_USART_Flush_Data+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6a1b      	ldr	r3, [r3, #32]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003024c 	.word	0x0003024c

000d44f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <panic_+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030260 	.word	0x00030260

000d4508 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <set_system_mode+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	685b      	ldr	r3, [r3, #4]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030220 	.word	0x00030220

000d4518 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <system_delay_ms+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	695b      	ldr	r3, [r3, #20]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030220 	.word	0x00030220

000d4528 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <application_thread_current+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030220 	.word	0x00030220

000d4538 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <application_thread_invoke+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030220 	.word	0x00030220

000d4548 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b03      	ldr	r3, [pc, #12]	; (d4558 <system_ctrl_set_app_request_handler+0x10>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4552:	9301      	str	r3, [sp, #4]
   d4554:	bd08      	pop	{r3, pc}
   d4556:	0000      	.short	0x0000
   d4558:	00030220 	.word	0x00030220

000d455c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b03      	ldr	r3, [pc, #12]	; (d456c <system_ctrl_set_result+0x10>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4566:	9301      	str	r3, [sp, #4]
   d4568:	bd08      	pop	{r3, pc}
   d456a:	0000      	.short	0x0000
   d456c:	00030220 	.word	0x00030220

000d4570 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <spark_send_event+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6a1b      	ldr	r3, [r3, #32]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030244 	.word	0x00030244

000d4580 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030244 	.word	0x00030244

000d4590 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_connect+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_connecting+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	689b      	ldr	r3, [r3, #8]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_disconnect+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	68db      	ldr	r3, [r3, #12]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_ready+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	691b      	ldr	r3, [r3, #16]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_on+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_off+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	699b      	ldr	r3, [r3, #24]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_listen+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	69db      	ldr	r3, [r3, #28]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_listening+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6a1b      	ldr	r3, [r3, #32]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_set_listen_timeout+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_get_listen_timeout+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <malloc+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	681b      	ldr	r3, [r3, #0]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003021c 	.word	0x0003021c

000d4640 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <free+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	685b      	ldr	r3, [r3, #4]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	0003021c 	.word	0x0003021c

000d4650 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <abort+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003021c 	.word	0x0003021c

000d4660 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <_malloc_r+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003021c 	.word	0x0003021c

000d4670 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4670:	2100      	movs	r1, #0
   d4672:	f7ff bf51 	b.w	d4518 <system_delay_ms>

000d4676 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4676:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4678:	6883      	ldr	r3, [r0, #8]
   d467a:	4604      	mov	r4, r0
   d467c:	b90b      	cbnz	r3, d4682 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d467e:	f001 fca4 	bl	d5fca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4682:	68c3      	ldr	r3, [r0, #12]
   d4684:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4686:	68a3      	ldr	r3, [r4, #8]
   d4688:	b11b      	cbz	r3, d4692 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d468a:	2203      	movs	r2, #3
   d468c:	4621      	mov	r1, r4
   d468e:	4620      	mov	r0, r4
   d4690:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4692:	4620      	mov	r0, r4
   d4694:	2110      	movs	r1, #16
}
   d4696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d469a:	f001 bc94 	b.w	d5fc6 <_ZdlPvj>

000d469e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d469e:	4770      	bx	lr

000d46a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d46a0:	2000      	movs	r0, #0
   d46a2:	4770      	bx	lr

000d46a4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d46a4:	b510      	push	{r4, lr}
   d46a6:	2114      	movs	r1, #20
   d46a8:	4604      	mov	r4, r0
   d46aa:	f001 fc8c 	bl	d5fc6 <_ZdlPvj>
   d46ae:	4620      	mov	r0, r4
   d46b0:	bd10      	pop	{r4, pc}

000d46b2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d46b2:	f7ff bcf2 	b.w	d409a <_ZdlPv>

000d46b6 <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d46b6:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d46b8:	7982      	ldrb	r2, [r0, #6]
   d46ba:	798b      	ldrb	r3, [r1, #6]
   d46bc:	429a      	cmp	r2, r3
   d46be:	d106      	bne.n	d46ce <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d46c0:	2206      	movs	r2, #6
   d46c2:	f001 fddb 	bl	d627c <memcmp>
   d46c6:	fab0 f080 	clz	r0, r0
   d46ca:	0940      	lsrs	r0, r0, #5
   d46cc:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d46ce:	2000      	movs	r0, #0
    }
   d46d0:	bd08      	pop	{r3, pc}

000d46d2 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d46d2:	b510      	push	{r4, lr}
            : uuid_() {
   d46d4:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d46d6:	4604      	mov	r4, r0
            : uuid_() {
   d46d8:	2100      	movs	r1, #0
   d46da:	f001 fe04 	bl	d62e6 <memset>
    }
   d46de:	4620      	mov	r0, r4
   d46e0:	bd10      	pop	{r4, pc}
	...

000d46e4 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46e4:	b510      	push	{r4, lr}
            locked_(false) {
   d46e6:	2300      	movs	r3, #0
   d46e8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d46ea:	4b04      	ldr	r3, [pc, #16]	; (d46fc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46ec:	4604      	mov	r4, r0
   d46ee:	6818      	ldr	r0, [r3, #0]
   d46f0:	f7ff fde2 	bl	d42b8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d46f4:	2301      	movs	r3, #1
   d46f6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d46f8:	4620      	mov	r0, r4
   d46fa:	bd10      	pop	{r4, pc}
   d46fc:	2003e3cc 	.word	0x2003e3cc

000d4700 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4700:	b510      	push	{r4, lr}
        if (locked_) {
   d4702:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4704:	4604      	mov	r4, r0
        if (locked_) {
   d4706:	b11b      	cbz	r3, d4710 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4708:	4b02      	ldr	r3, [pc, #8]	; (d4714 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d470a:	6818      	ldr	r0, [r3, #0]
   d470c:	f7ff fddc 	bl	d42c8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4710:	4620      	mov	r0, r4
   d4712:	bd10      	pop	{r4, pc}
   d4714:	2003e3cc 	.word	0x2003e3cc

000d4718 <_ZN8particle7BleUuidC1ERKS0_>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid(const BleUuid& uuid)
   d4718:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d471a:	4603      	mov	r3, r0
   d471c:	f101 0214 	add.w	r2, r1, #20
   d4720:	f851 4b04 	ldr.w	r4, [r1], #4
   d4724:	f843 4b04 	str.w	r4, [r3], #4
   d4728:	4291      	cmp	r1, r2
   d472a:	d1f9      	bne.n	d4720 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d472c:	bd10      	pop	{r4, pc}

000d472e <_ZN8particle7BleUuidC1EPKc>:
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
}

BleUuid::BleUuid(const char* uuid)
   d472e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4732:	4688      	mov	r8, r1
   d4734:	4607      	mov	r7, r0
        : BleUuid() {
   d4736:	f7ff ffcc 	bl	d46d2 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d473a:	f1b8 0f00 	cmp.w	r8, #0
   d473e:	d002      	beq.n	d4746 <_ZN8particle7BleUuidC1EPKc+0x18>
   d4740:	2600      	movs	r6, #0
   d4742:	2510      	movs	r5, #16
   d4744:	e00f      	b.n	d4766 <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4746:	2210      	movs	r2, #16
   d4748:	4641      	mov	r1, r8
   d474a:	4638      	mov	r0, r7
   d474c:	f001 fdcb 	bl	d62e6 <memset>
   d4750:	e04a      	b.n	d47e8 <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d4752:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4756:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d475a:	b2d1      	uxtb	r1, r2
   d475c:	2909      	cmp	r1, #9
   d475e:	d808      	bhi.n	d4772 <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d4760:	1c53      	adds	r3, r2, #1
   d4762:	d114      	bne.n	d478e <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d4764:	3601      	adds	r6, #1
   d4766:	4640      	mov	r0, r8
   d4768:	f001 fe09 	bl	d637e <strlen>
   d476c:	4286      	cmp	r6, r0
   d476e:	d3f0      	bcc.n	d4752 <_ZN8particle7BleUuidC1EPKc+0x24>
   d4770:	e033      	b.n	d47da <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d4772:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d4776:	2a05      	cmp	r2, #5
   d4778:	d802      	bhi.n	d4780 <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d477a:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d477e:	e7ef      	b.n	d4760 <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d4780:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d4784:	2a05      	cmp	r2, #5
   d4786:	d8ed      	bhi.n	d4764 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d4788:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d478c:	e7e8      	b.n	d4760 <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d478e:	0112      	lsls	r2, r2, #4
   d4790:	3d01      	subs	r5, #1
   d4792:	b2d4      	uxtb	r4, r2
   d4794:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d4796:	4640      	mov	r0, r8
   d4798:	f001 fdf1 	bl	d637e <strlen>
   d479c:	3601      	adds	r6, #1
   d479e:	4286      	cmp	r6, r0
   d47a0:	d2e0      	bcs.n	d4764 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d47a2:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d47a6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d47aa:	b2d9      	uxtb	r1, r3
   d47ac:	2909      	cmp	r1, #9
   d47ae:	d90e      	bls.n	d47ce <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d47b0:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d47b4:	2b05      	cmp	r3, #5
   d47b6:	d802      	bhi.n	d47be <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d47b8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d47bc:	e007      	b.n	d47ce <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d47be:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d47c2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d47c4:	bf94      	ite	ls
   d47c6:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d47ca:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
   d47ce:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d47d0:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d47d2:	bf1c      	itt	ne
   d47d4:	4314      	orrne	r4, r2
   d47d6:	557c      	strbne	r4, [r7, r5]
   d47d8:	e7c4      	b.n	d4764 <_ZN8particle7BleUuidC1EPKc+0x36>
   d47da:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d47dc:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d47de:	42bb      	cmp	r3, r7
   d47e0:	d002      	beq.n	d47e8 <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d47e2:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d47e6:	e7fa      	b.n	d47de <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d47e8:	2301      	movs	r3, #1
   d47ea:	743b      	strb	r3, [r7, #16]
}
   d47ec:	4638      	mov	r0, r7
   d47ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d47f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d47f4:	b18b      	cbz	r3, d481a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d47f6:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d47f8:	1ce5      	adds	r5, r4, #3
   d47fa:	428d      	cmp	r5, r1
   d47fc:	d80f      	bhi.n	d481e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d47fe:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4800:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4802:	5d87      	ldrb	r7, [r0, r6]
   d4804:	4297      	cmp	r7, r2
   d4806:	d105      	bne.n	d4814 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4808:	442e      	add	r6, r5
   d480a:	42b1      	cmp	r1, r6
   d480c:	d307      	bcc.n	d481e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d480e:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4810:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4812:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4814:	3501      	adds	r5, #1
   d4816:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4818:	e7ee      	b.n	d47f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d481a:	4618      	mov	r0, r3
   d481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d481e:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4820:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4822 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4822:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4826:	4604      	mov	r4, r0
   d4828:	460e      	mov	r6, r1
   d482a:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d482c:	4617      	mov	r7, r2
   d482e:	2a00      	cmp	r2, #0
   d4830:	d03a      	beq.n	d48a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4832:	460a      	mov	r2, r1
   d4834:	ab01      	add	r3, sp, #4
   d4836:	6a01      	ldr	r1, [r0, #32]
   d4838:	f7ff ffdb 	bl	d47f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d483c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4840:	6a22      	ldr	r2, [r4, #32]
   d4842:	bb03      	cbnz	r3, d4886 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4844:	b1f8      	cbz	r0, d4886 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4846:	1c96      	adds	r6, r2, #2
   d4848:	442e      	add	r6, r5
   d484a:	1a36      	subs	r6, r6, r0
   d484c:	2e1f      	cmp	r6, #31
   d484e:	d82b      	bhi.n	d48a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4850:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4854:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4858:	ebc8 0202 	rsb	r2, r8, r2
   d485c:	1a12      	subs	r2, r2, r0
   d485e:	eb00 0108 	add.w	r1, r0, r8
   d4862:	eb05 0009 	add.w	r0, r5, r9
   d4866:	b292      	uxth	r2, r2
   d4868:	4421      	add	r1, r4
   d486a:	4420      	add	r0, r4
   d486c:	f001 fd20 	bl	d62b0 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4870:	1c6b      	adds	r3, r5, #1
   d4872:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4876:	462a      	mov	r2, r5
   d4878:	4639      	mov	r1, r7
   d487a:	eb04 0009 	add.w	r0, r4, r9
   d487e:	f001 fd0c 	bl	d629a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4882:	6226      	str	r6, [r4, #32]
   d4884:	e010      	b.n	d48a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4886:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4888:	182b      	adds	r3, r5, r0
   d488a:	2b1f      	cmp	r3, #31
   d488c:	d80c      	bhi.n	d48a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d488e:	1c6b      	adds	r3, r5, #1
   d4890:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4892:	4422      	add	r2, r4
   d4894:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4896:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4898:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d489a:	4420      	add	r0, r4
   d489c:	462a      	mov	r2, r5
   d489e:	f001 fcfc 	bl	d629a <memcpy>
        selfLen_ += len;
   d48a2:	6a22      	ldr	r2, [r4, #32]
   d48a4:	442a      	add	r2, r5
   d48a6:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d48a8:	6a20      	ldr	r0, [r4, #32]
}
   d48aa:	b003      	add	sp, #12
   d48ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d48b0 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d48b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d48b2:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d48b4:	4603      	mov	r3, r0
   d48b6:	f100 021f 	add.w	r2, r0, #31
   d48ba:	2000      	movs	r0, #0
   d48bc:	f803 0b01 	strb.w	r0, [r3], #1
   d48c0:	4293      	cmp	r3, r2
   d48c2:	f04f 0100 	mov.w	r1, #0
   d48c6:	d1f9      	bne.n	d48bc <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d48c8:	aa04      	add	r2, sp, #16
   d48ca:	2306      	movs	r3, #6
   d48cc:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d48d0:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d48d2:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d48d4:	9100      	str	r1, [sp, #0]
   d48d6:	4620      	mov	r0, r4
   d48d8:	4619      	mov	r1, r3
   d48da:	f7ff ffa2 	bl	d4822 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d48de:	4620      	mov	r0, r4
   d48e0:	b004      	add	sp, #16
   d48e2:	bd10      	pop	{r4, pc}

000d48e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48e6:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48e8:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48ea:	ab01      	add	r3, sp, #4
   d48ec:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d48ee:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d48f0:	f7ff ff7f 	bl	d47f2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d48f4:	4605      	mov	r5, r0
   d48f6:	b178      	cbz	r0, d4918 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d48f8:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d48fa:	6a22      	ldr	r2, [r4, #32]
   d48fc:	1829      	adds	r1, r5, r0
   d48fe:	1a12      	subs	r2, r2, r0
   d4900:	1b52      	subs	r2, r2, r5
   d4902:	4421      	add	r1, r4
   d4904:	4420      	add	r0, r4
   d4906:	f001 fcc8 	bl	d629a <memcpy>
        selfLen_ -= len;
   d490a:	6a23      	ldr	r3, [r4, #32]
   d490c:	1b5d      	subs	r5, r3, r5
   d490e:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4910:	4631      	mov	r1, r6
   d4912:	4620      	mov	r0, r4
   d4914:	f7ff ffe6 	bl	d48e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4918:	b002      	add	sp, #8
   d491a:	bd70      	pop	{r4, r5, r6, pc}

000d491c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4920:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4924:	460d      	mov	r5, r1
   d4926:	4617      	mov	r7, r2
   d4928:	4698      	mov	r8, r3
   d492a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d492e:	42a6      	cmp	r6, r4
   d4930:	d033      	beq.n	d499a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d4932:	6823      	ldr	r3, [r4, #0]
   d4934:	699a      	ldr	r2, [r3, #24]
   d4936:	69d9      	ldr	r1, [r3, #28]
   d4938:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d493c:	4291      	cmp	r1, r2
   d493e:	d01b      	beq.n	d4978 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4940:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d4942:	b19b      	cbz	r3, d496c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d4944:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d4948:	42a8      	cmp	r0, r5
   d494a:	d011      	beq.n	d4970 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d494c:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d4950:	42a8      	cmp	r0, r5
   d4952:	d00d      	beq.n	d4970 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d4954:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d4958:	42a8      	cmp	r0, r5
   d495a:	d009      	beq.n	d4970 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d495c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d4960:	42a8      	cmp	r0, r5
   d4962:	d005      	beq.n	d4970 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d4964:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d4968:	42a8      	cmp	r0, r5
   d496a:	d001      	beq.n	d4970 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d496c:	3208      	adds	r2, #8
   d496e:	e7e5      	b.n	d493c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d4970:	b117      	cbz	r7, d4978 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4972:	f1b8 0f00 	cmp.w	r8, #0
   d4976:	d101      	bne.n	d497c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d4978:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d497a:	e7d8      	b.n	d492e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d497c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d4980:	f1b9 0f00 	cmp.w	r9, #0
   d4984:	d0f8      	beq.n	d4978 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4986:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d498a:	42aa      	cmp	r2, r5
   d498c:	d1f4      	bne.n	d4978 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4990:	9a08      	ldr	r2, [sp, #32]
   d4992:	4641      	mov	r1, r8
   d4994:	4638      	mov	r0, r7
   d4996:	47c8      	blx	r9
   d4998:	e7ee      	b.n	d4978 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d499a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d499e <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d499e:	b508      	push	{r3, lr}
   d49a0:	6800      	ldr	r0, [r0, #0]
   d49a2:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d49a4:	8ac2      	ldrh	r2, [r0, #22]
   d49a6:	8acb      	ldrh	r3, [r1, #22]
   d49a8:	429a      	cmp	r2, r3
   d49aa:	d104      	bne.n	d49b6 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d49ac:	3101      	adds	r1, #1
   d49ae:	3001      	adds	r0, #1
   d49b0:	f7ff fe81 	bl	d46b6 <_ZNK8particle10BleAddresseqERKS0_>
   d49b4:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d49b6:	2000      	movs	r0, #0
}
   d49b8:	bd08      	pop	{r3, pc}

000d49ba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d49ba:	4608      	mov	r0, r1
   d49bc:	b909      	cbnz	r1, d49c2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d49be:	460a      	mov	r2, r1
   d49c0:	e001      	b.n	d49c6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d49c2:	6a09      	ldr	r1, [r1, #32]
   d49c4:	2200      	movs	r2, #0
   d49c6:	f7ff bc37 	b.w	d4238 <hal_ble_gap_set_advertising_data>

000d49ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d49ca:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d49cc:	460c      	mov	r4, r1
   d49ce:	b911      	cbnz	r1, d49d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d49d0:	460a      	mov	r2, r1
   d49d2:	4608      	mov	r0, r1
   d49d4:	e006      	b.n	d49e4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d49d6:	2101      	movs	r1, #1
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff ff83 	bl	d48e4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d49de:	6a21      	ldr	r1, [r4, #32]
   d49e0:	2200      	movs	r2, #0
   d49e2:	4620      	mov	r0, r4
    }
}
   d49e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d49e8:	f7ff bc2e 	b.w	d4248 <hal_ble_gap_set_scan_response_data>

000d49ec <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d49ec:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d49ee:	a801      	add	r0, sp, #4
   d49f0:	f7ff fe78 	bl	d46e4 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d49f4:	2000      	movs	r0, #0
   d49f6:	f7ff fc2f 	bl	d4258 <hal_ble_gap_start_advertising>
   d49fa:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d49fc:	a801      	add	r0, sp, #4
   d49fe:	f7ff fe7f 	bl	d4700 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4a02:	4620      	mov	r0, r4
   d4a04:	b002      	add	sp, #8
   d4a06:	bd10      	pop	{r4, pc}

000d4a08 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a0a:	4605      	mov	r5, r0
   d4a0c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4a0e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4a10:	4616      	mov	r6, r2
    WiringBleLock lk;
   d4a12:	f7ff fe67 	bl	d46e4 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d4a16:	4621      	mov	r1, r4
   d4a18:	4628      	mov	r0, r5
   d4a1a:	f7ff ffce 	bl	d49ba <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4a1e:	2800      	cmp	r0, #0
   d4a20:	db08      	blt.n	d4a34 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d4a22:	4631      	mov	r1, r6
   d4a24:	4628      	mov	r0, r5
   d4a26:	f7ff ffd0 	bl	d49ca <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d4a2a:	2800      	cmp	r0, #0
   d4a2c:	db02      	blt.n	d4a34 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d4a2e:	4628      	mov	r0, r5
   d4a30:	f7ff ffdc 	bl	d49ec <_ZNK8particle14BleLocalDevice9advertiseEv>
   d4a34:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d4a36:	a801      	add	r0, sp, #4
   d4a38:	f7ff fe62 	bl	d4700 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	b002      	add	sp, #8
   d4a40:	bd70      	pop	{r4, r5, r6, pc}

000d4a42 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d4a42:	6983      	ldr	r3, [r0, #24]
    return (peripheralProxy_->connected() || centralProxy_->connected());
   d4a44:	685b      	ldr	r3, [r3, #4]
   d4a46:	2b00      	cmp	r3, #0
   d4a48:	dc06      	bgt.n	d4a58 <_ZNK8particle14BleLocalDevice9connectedEv+0x16>
   d4a4a:	69c3      	ldr	r3, [r0, #28]
   d4a4c:	6858      	ldr	r0, [r3, #4]
   d4a4e:	2800      	cmp	r0, #0
   d4a50:	bfd4      	ite	le
   d4a52:	2000      	movle	r0, #0
   d4a54:	2001      	movgt	r0, #1
   d4a56:	4770      	bx	lr
   d4a58:	2001      	movs	r0, #1
}
   d4a5a:	4770      	bx	lr

000d4a5c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d4a5c:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4a5e:	6983      	ldr	r3, [r0, #24]
   d4a60:	e893 0014 	ldmia.w	r3, {r2, r4}
   d4a64:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d4a68:	42a2      	cmp	r2, r4
   d4a6a:	4613      	mov	r3, r2
   d4a6c:	d007      	beq.n	d4a7e <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d4a6e:	681d      	ldr	r5, [r3, #0]
   d4a70:	8aed      	ldrh	r5, [r5, #22]
   d4a72:	428d      	cmp	r5, r1
   d4a74:	f102 0208 	add.w	r2, r2, #8
   d4a78:	d1f6      	bne.n	d4a68 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d4a7a:	4618      	mov	r0, r3
   d4a7c:	bd30      	pop	{r4, r5, pc}
   d4a7e:	69c2      	ldr	r2, [r0, #28]
   d4a80:	6813      	ldr	r3, [r2, #0]
   d4a82:	6852      	ldr	r2, [r2, #4]
   d4a84:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d4a88:	429a      	cmp	r2, r3
   d4a8a:	4618      	mov	r0, r3
   d4a8c:	d006      	beq.n	d4a9c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d4a8e:	6804      	ldr	r4, [r0, #0]
   d4a90:	8ae4      	ldrh	r4, [r4, #22]
   d4a92:	428c      	cmp	r4, r1
   d4a94:	f103 0308 	add.w	r3, r3, #8
   d4a98:	d1f6      	bne.n	d4a88 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d4a9a:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d4a9c:	2000      	movs	r0, #0
}
   d4a9e:	bd30      	pop	{r4, r5, pc}

000d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4aa0:	680b      	ldr	r3, [r1, #0]
   d4aa2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4aa4:	b113      	cbz	r3, d4aac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4aa6:	685a      	ldr	r2, [r3, #4]
   d4aa8:	3201      	adds	r2, #1
   d4aaa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4aac:	4770      	bx	lr

000d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4aae:	b510      	push	{r4, lr}
   d4ab0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4ab4:	4604      	mov	r4, r0
   d4ab6:	f840 3b04 	str.w	r3, [r0], #4
   d4aba:	f7ff fff1 	bl	d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4abe:	4620      	mov	r0, r4
   d4ac0:	bd10      	pop	{r4, pc}

000d4ac2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ac2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4ac4:	6804      	ldr	r4, [r0, #0]
   d4ac6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ac8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4aca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4ace:	42a6      	cmp	r6, r4
   d4ad0:	d004      	beq.n	d4adc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ad2:	1d20      	adds	r0, r4, #4
   d4ad4:	f7ff fb26 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ad8:	3408      	adds	r4, #8
   d4ada:	e7f8      	b.n	d4ace <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4adc:	6828      	ldr	r0, [r5, #0]
   d4ade:	f7ff fdaf 	bl	d4640 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4ae2:	4628      	mov	r0, r5
   d4ae4:	bd70      	pop	{r4, r5, r6, pc}

000d4ae6 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d4ae6:	b538      	push	{r3, r4, r5, lr}
   d4ae8:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4aea:	2010      	movs	r0, #16
   d4aec:	780d      	ldrb	r5, [r1, #0]
   d4aee:	f7ff fad2 	bl	d4096 <_Znwj>
   d4af2:	b120      	cbz	r0, d4afe <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4af4:	2300      	movs	r3, #0
   d4af6:	6003      	str	r3, [r0, #0]
   d4af8:	6043      	str	r3, [r0, #4]
   d4afa:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d4afc:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4afe:	6020      	str	r0, [r4, #0]
   d4b00:	4620      	mov	r0, r4
   d4b02:	bd38      	pop	{r3, r4, r5, pc}

000d4b04 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4b04:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b06:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4b08:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b0a:	b134      	cbz	r4, d4b1a <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	f7ff ffd8 	bl	d4ac2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b12:	2110      	movs	r1, #16
   d4b14:	4620      	mov	r0, r4
   d4b16:	f001 fa56 	bl	d5fc6 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d4b1a:	4628      	mov	r0, r5
   d4b1c:	bd38      	pop	{r3, r4, r5, pc}

000d4b1e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4b1e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4b20:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d4b22:	f104 001c 	add.w	r0, r4, #28
   d4b26:	f7ff ffed 	bl	d4b04 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4b30:	f7ff bab3 	b.w	d409a <_ZdlPv>

000d4b34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4b34:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4b36:	6804      	ldr	r4, [r0, #0]
   d4b38:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4b3a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4b3c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4b40:	42a6      	cmp	r6, r4
   d4b42:	d004      	beq.n	d4b4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b44:	1d20      	adds	r0, r4, #4
   d4b46:	f7ff faed 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b4a:	3408      	adds	r4, #8
   d4b4c:	e7f8      	b.n	d4b40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4b4e:	2300      	movs	r3, #0
   d4b50:	606b      	str	r3, [r5, #4]
   d4b52:	bd70      	pop	{r4, r5, r6, pc}

000d4b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4b54:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b58:	4606      	mov	r6, r0
   d4b5a:	460c      	mov	r4, r1
   d4b5c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4b5e:	d914      	bls.n	d4b8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d4b60:	4290      	cmp	r0, r2
   d4b62:	d213      	bcs.n	d4b8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d4b64:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d4b68:	1a6c      	subs	r4, r5, r1
   d4b6a:	f1a1 0708 	sub.w	r7, r1, #8
   d4b6e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4b70:	42af      	cmp	r7, r5
   d4b72:	d018      	beq.n	d4ba6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d4b74:	b11c      	cbz	r4, d4b7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4b76:	4629      	mov	r1, r5
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f7ff ff98 	bl	d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4b7e:	1d28      	adds	r0, r5, #4
   d4b80:	f7ff fad0 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4b84:	3d08      	subs	r5, #8
   d4b86:	3c08      	subs	r4, #8
   d4b88:	e7f2      	b.n	d4b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4b8a:	d00c      	beq.n	d4ba6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d4b8c:	42ac      	cmp	r4, r5
   d4b8e:	d00a      	beq.n	d4ba6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d4b90:	b11e      	cbz	r6, d4b9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d4b92:	4621      	mov	r1, r4
   d4b94:	4630      	mov	r0, r6
   d4b96:	f7ff ff8a 	bl	d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4b9a:	1d20      	adds	r0, r4, #4
   d4b9c:	f7ff fac2 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4ba0:	3408      	adds	r4, #8
   d4ba2:	3608      	adds	r6, #8
   d4ba4:	e7f2      	b.n	d4b8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d4ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ba8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d4ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4baa:	680b      	ldr	r3, [r1, #0]
   d4bac:	69da      	ldr	r2, [r3, #28]
   d4bae:	460e      	mov	r6, r1
   d4bb0:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4bb2:	6851      	ldr	r1, [r2, #4]
   d4bb4:	4605      	mov	r5, r0
   d4bb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4bba:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4bbc:	4299      	cmp	r1, r3
   d4bbe:	d00d      	beq.n	d4bdc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d4bc0:	6818      	ldr	r0, [r3, #0]
   d4bc2:	6982      	ldr	r2, [r0, #24]
   d4bc4:	69c0      	ldr	r0, [r0, #28]
   d4bc6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4bca:	4290      	cmp	r0, r2
   d4bcc:	d004      	beq.n	d4bd8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d4bce:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4bd2:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d4bd6:	e7f8      	b.n	d4bca <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d4bd8:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4bda:	e7ef      	b.n	d4bbc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d4bdc:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4bde:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4be2:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4be4:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4be6:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4be8:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4bea:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4bec:	f8c3 200a 	str.w	r2, [r3, #10]
   d4bf0:	f8c3 200e 	str.w	r2, [r3, #14]
   d4bf4:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d4bf8:	682c      	ldr	r4, [r5, #0]
   d4bfa:	686b      	ldr	r3, [r5, #4]
   d4bfc:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4c00:	42bc      	cmp	r4, r7
   d4c02:	d016      	beq.n	d4c32 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d4c04:	4631      	mov	r1, r6
   d4c06:	4620      	mov	r0, r4
   d4c08:	f7ff fec9 	bl	d499e <_ZN8particle13BlePeerDeviceeqERKS0_>
   d4c0c:	b908      	cbnz	r0, d4c12 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4c0e:	3408      	adds	r4, #8
   d4c10:	e7f6      	b.n	d4c00 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4c12:	b174      	cbz	r4, d4c32 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d4c14:	1d20      	adds	r0, r4, #4
   d4c16:	f7ff fa85 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4c1a:	682b      	ldr	r3, [r5, #0]
   d4c1c:	686a      	ldr	r2, [r5, #4]
   d4c1e:	f104 0108 	add.w	r1, r4, #8
   d4c22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4c26:	4620      	mov	r0, r4
   d4c28:	f7ff ff94 	bl	d4b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4c2c:	686b      	ldr	r3, [r5, #4]
   d4c2e:	3b01      	subs	r3, #1
   d4c30:	606b      	str	r3, [r5, #4]
   d4c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4c36:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d4c38:	6846      	ldr	r6, [r0, #4]
   d4c3a:	4668      	mov	r0, sp
   d4c3c:	f7ff ff37 	bl	d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4c40:	6867      	ldr	r7, [r4, #4]
   d4c42:	68a3      	ldr	r3, [r4, #8]
   d4c44:	429f      	cmp	r7, r3
   d4c46:	db14      	blt.n	d4c72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d4c48:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4c4a:	2f00      	cmp	r7, #0
   d4c4c:	dd0b      	ble.n	d4c66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4c4e:	00f8      	lsls	r0, r7, #3
   d4c50:	f7ff fcee 	bl	d4630 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4c54:	4605      	mov	r5, r0
   d4c56:	b300      	cbz	r0, d4c9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d4c58:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4c5c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4c60:	f7ff ff78 	bl	d4b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4c64:	e000      	b.n	d4c68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4c66:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4c68:	6820      	ldr	r0, [r4, #0]
   d4c6a:	f7ff fce9 	bl	d4640 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4c6e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4c70:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4c72:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4c74:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4c76:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d4c7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4c7e:	4629      	mov	r1, r5
   d4c80:	f105 0008 	add.w	r0, r5, #8
   d4c84:	f7ff ff66 	bl	d4b54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4c88:	b11d      	cbz	r5, d4c92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d4c8a:	4669      	mov	r1, sp
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	f7ff ff0e 	bl	d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d4c92:	6863      	ldr	r3, [r4, #4]
   d4c94:	3301      	adds	r3, #1
   d4c96:	6063      	str	r3, [r4, #4]
   d4c98:	2501      	movs	r5, #1
   d4c9a:	a801      	add	r0, sp, #4
   d4c9c:	f7ff fa42 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4ca0:	4628      	mov	r0, r5
   d4ca2:	b003      	add	sp, #12
   d4ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ca6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ca6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4ca8:	6804      	ldr	r4, [r0, #0]
   d4caa:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4cac:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4cae:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4cb2:	42a6      	cmp	r6, r4
   d4cb4:	d004      	beq.n	d4cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4cb6:	1d20      	adds	r0, r4, #4
   d4cb8:	f7ff fa34 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cbc:	3408      	adds	r4, #8
   d4cbe:	e7f8      	b.n	d4cb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4cc0:	6828      	ldr	r0, [r5, #0]
   d4cc2:	f7ff fcbd 	bl	d4640 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4cc6:	4628      	mov	r0, r5
   d4cc8:	bd70      	pop	{r4, r5, r6, pc}

000d4cca <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4cca:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ccc:	4604      	mov	r4, r0
   d4cce:	b138      	cbz	r0, d4ce0 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d4cd0:	f7ff ffe9 	bl	d4ca6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	210c      	movs	r1, #12
      }
   d4cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cdc:	f001 b973 	b.w	d5fc6 <_ZdlPvj>
   d4ce0:	bd10      	pop	{r4, pc}

000d4ce2 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4ce2:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	b138      	cbz	r0, d4cf8 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d4ce8:	f7ff ffdd 	bl	d4ca6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4cec:	4620      	mov	r0, r4
   d4cee:	210c      	movs	r1, #12
      }
   d4cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4cf4:	f001 b967 	b.w	d5fc6 <_ZdlPvj>
   d4cf8:	bd10      	pop	{r4, pc}
	...

000d4cfc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4cfe:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4d00:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4d02:	6005      	str	r5, [r0, #0]
   d4d04:	6045      	str	r5, [r0, #4]
   d4d06:	6085      	str	r5, [r0, #8]
   d4d08:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4d0a:	6105      	str	r5, [r0, #16]
   d4d0c:	6145      	str	r5, [r0, #20]
   d4d0e:	6185      	str	r5, [r0, #24]
   d4d10:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4d12:	4628      	mov	r0, r5
   d4d14:	f7ff fa80 	bl	d4218 <hal_ble_stack_init>
   d4d18:	b120      	cbz	r0, d4d24 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d4d1a:	4a25      	ldr	r2, [pc, #148]	; (d4db0 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d4d1c:	4629      	mov	r1, r5
   d4d1e:	200a      	movs	r0, #10
   d4d20:	f7ff fbea 	bl	d44f8 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4d24:	2301      	movs	r3, #1
   d4d26:	f10d 0103 	add.w	r1, sp, #3
   d4d2a:	a801      	add	r0, sp, #4
   d4d2c:	f88d 3003 	strb.w	r3, [sp, #3]
   d4d30:	f7ff fed9 	bl	d4ae6 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d34:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4d36:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d38:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d4d3a:	2200      	movs	r2, #0
   d4d3c:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d3e:	b135      	cbz	r5, d4d4e <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d4d40:	4628      	mov	r0, r5
   d4d42:	f7ff febe 	bl	d4ac2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d46:	2110      	movs	r1, #16
   d4d48:	4628      	mov	r0, r5
   d4d4a:	f001 f93c 	bl	d5fc6 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4d4e:	a801      	add	r0, sp, #4
   d4d50:	f7ff fed8 	bl	d4b04 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4d54:	2001      	movs	r0, #1
   d4d56:	f7ff f99e 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d5a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d5c:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d5e:	b11b      	cbz	r3, d4d68 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4d60:	2101      	movs	r1, #1
   d4d62:	4618      	mov	r0, r3
   d4d64:	f001 f92f 	bl	d5fc6 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4d68:	200c      	movs	r0, #12
   d4d6a:	f7ff f994 	bl	d4096 <_Znwj>
   d4d6e:	4603      	mov	r3, r0
   d4d70:	b118      	cbz	r0, d4d7a <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d4d72:	2200      	movs	r2, #0
   d4d74:	6002      	str	r2, [r0, #0]
   d4d76:	6042      	str	r2, [r0, #4]
   d4d78:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d7a:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4d7c:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d7e:	b108      	cbz	r0, d4d84 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d4d80:	f7ff ffa3 	bl	d4cca <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4d84:	200c      	movs	r0, #12
   d4d86:	f7ff f986 	bl	d4096 <_Znwj>
   d4d8a:	4603      	mov	r3, r0
   d4d8c:	b118      	cbz	r0, d4d96 <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d4d8e:	2200      	movs	r2, #0
   d4d90:	6002      	str	r2, [r0, #0]
   d4d92:	6042      	str	r2, [r0, #4]
   d4d94:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d96:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4d98:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4d9a:	b108      	cbz	r0, d4da0 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d4d9c:	f7ff ffa1 	bl	d4ce2 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d4da0:	2200      	movs	r2, #0
   d4da2:	4621      	mov	r1, r4
   d4da4:	4803      	ldr	r0, [pc, #12]	; (d4db4 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d4da6:	f7ff fa3f 	bl	d4228 <hal_ble_set_callback_on_events>
}
   d4daa:	4620      	mov	r0, r4
   d4dac:	b003      	add	sp, #12
   d4dae:	bd30      	pop	{r4, r5, pc}
   d4db0:	000d42e9 	.word	0x000d42e9
   d4db4:	000d4ea9 	.word	0x000d4ea9

000d4db8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4db8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4dba:	4c0a      	ldr	r4, [pc, #40]	; (d4de4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4dbc:	6823      	ldr	r3, [r4, #0]
   d4dbe:	07db      	lsls	r3, r3, #31
   d4dc0:	d40e      	bmi.n	d4de0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	f7ff f96d 	bl	d40a2 <__cxa_guard_acquire>
   d4dc8:	b150      	cbz	r0, d4de0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4dca:	4807      	ldr	r0, [pc, #28]	; (d4de8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4dcc:	f7ff ff96 	bl	d4cfc <_ZN8particle14BleLocalDeviceC1Ev>
   d4dd0:	4620      	mov	r0, r4
   d4dd2:	f7ff f96b 	bl	d40ac <__cxa_guard_release>
   d4dd6:	4a05      	ldr	r2, [pc, #20]	; (d4dec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4dd8:	4905      	ldr	r1, [pc, #20]	; (d4df0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4dda:	4803      	ldr	r0, [pc, #12]	; (d4de8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ddc:	f001 f8ee 	bl	d5fbc <__aeabi_atexit>
    return instance;
}
   d4de0:	4801      	ldr	r0, [pc, #4]	; (d4de8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4de2:	bd10      	pop	{r4, pc}
   d4de4:	2003e3c8 	.word	0x2003e3c8
   d4de8:	2003e3a8 	.word	0x2003e3a8
   d4dec:	2003e388 	.word	0x2003e388
   d4df0:	000d4df5 	.word	0x000d4df5

000d4df4 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4df4:	b510      	push	{r4, lr}
   d4df6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4df8:	69c0      	ldr	r0, [r0, #28]
   d4dfa:	b108      	cbz	r0, d4e00 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d4dfc:	f7ff ff71 	bl	d4ce2 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e00:	69a0      	ldr	r0, [r4, #24]
   d4e02:	b108      	cbz	r0, d4e08 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d4e04:	f7ff ff61 	bl	d4cca <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e08:	6960      	ldr	r0, [r4, #20]
   d4e0a:	b110      	cbz	r0, d4e12 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e0c:	2101      	movs	r1, #1
   d4e0e:	f001 f8da 	bl	d5fc6 <_ZdlPvj>
   d4e12:	f104 0010 	add.w	r0, r4, #16
   d4e16:	f7ff fe75 	bl	d4b04 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	bd10      	pop	{r4, pc}
	...

000d4e20 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d4e22:	2500      	movs	r5, #0
   d4e24:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4e26:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d4e28:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4e2a:	2020      	movs	r0, #32
   d4e2c:	f7ff f933 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4e30:	4604      	mov	r4, r0
   d4e32:	b1b0      	cbz	r0, d4e62 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d4e34:	4603      	mov	r3, r0
   d4e36:	a901      	add	r1, sp, #4
   d4e38:	f803 5b01 	strb.w	r5, [r3], #1
   d4e3c:	f8c0 5001 	str.w	r5, [r0, #1]
   d4e40:	605d      	str	r5, [r3, #4]
   d4e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4e46:	82c3      	strh	r3, [r0, #22]
   d4e48:	237f      	movs	r3, #127	; 0x7f
   d4e4a:	f8c0 500a 	str.w	r5, [r0, #10]
   d4e4e:	f8c0 500e 	str.w	r5, [r0, #14]
   d4e52:	f8c0 5012 	str.w	r5, [r0, #18]
   d4e56:	7603      	strb	r3, [r0, #24]
   d4e58:	301c      	adds	r0, #28
   d4e5a:	f88d 5004 	strb.w	r5, [sp, #4]
   d4e5e:	f7ff fe42 	bl	d4ae6 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d4e62:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4e64:	2014      	movs	r0, #20
   d4e66:	9301      	str	r3, [sp, #4]
   d4e68:	f7ff f915 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d4e6c:	b128      	cbz	r0, d4e7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4e6e:	2301      	movs	r3, #1
   d4e70:	6043      	str	r3, [r0, #4]
   d4e72:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d4e74:	4b06      	ldr	r3, [pc, #24]	; (d4e90 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d4e76:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d4e78:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e7a:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d4e7c:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4e7e:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4e80:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e82:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d4e84:	f7ff f94e 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d4e88:	4630      	mov	r0, r6
   d4e8a:	b002      	add	sp, #8
   d4e8c:	bd70      	pop	{r4, r5, r6, pc}
   d4e8e:	bf00      	nop
   d4e90:	000d63fc 	.word	0x000d63fc

000d4e94 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4e94:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d4e96:	f04f 0100 	mov.w	r1, #0
   d4e9a:	aa01      	add	r2, sp, #4
   d4e9c:	4604      	mov	r4, r0
   d4e9e:	f7ff ffbf 	bl	d4e20 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	b002      	add	sp, #8
   d4ea6:	bd10      	pop	{r4, pc}

000d4ea8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4eaa:	4604      	mov	r4, r0
   d4eac:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d4eae:	460d      	mov	r5, r1
   d4eb0:	2900      	cmp	r1, #0
   d4eb2:	f000 80a5 	beq.w	d5000 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4eb6:	a803      	add	r0, sp, #12
   d4eb8:	f7ff fc14 	bl	d46e4 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d4ebc:	6863      	ldr	r3, [r4, #4]
   d4ebe:	3b03      	subs	r3, #3
   d4ec0:	2b07      	cmp	r3, #7
   d4ec2:	f200 809a 	bhi.w	d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4ec6:	e8df f003 	tbb	[pc, r3]
   d4eca:	4404      	.short	0x4404
   d4ecc:	98989898 	.word	0x98989898
   d4ed0:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d4ed2:	a806      	add	r0, sp, #24
   d4ed4:	f7ff ffde 	bl	d4e94 <_ZN8particle13BlePeerDeviceC1Ev>
   d4ed8:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d4eda:	89a2      	ldrh	r2, [r4, #12]
   d4edc:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d4ede:	8962      	ldrh	r2, [r4, #10]
   d4ee0:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d4ee2:	8922      	ldrh	r2, [r4, #8]
   d4ee4:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d4ee6:	8922      	ldrh	r2, [r4, #8]
   d4ee8:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d4eea:	8b22      	ldrh	r2, [r4, #24]
   d4eec:	82da      	strh	r2, [r3, #22]
   d4eee:	4622      	mov	r2, r4
   d4ef0:	7da1      	ldrb	r1, [r4, #22]
   d4ef2:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d4ef6:	9004      	str	r0, [sp, #16]
   d4ef8:	8892      	ldrh	r2, [r2, #4]
   d4efa:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4efe:	9804      	ldr	r0, [sp, #16]
   d4f00:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d4f04:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d4f06:	f8c3 0001 	str.w	r0, [r3, #1]
   d4f0a:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d4f0e:	682b      	ldr	r3, [r5, #0]
   d4f10:	b113      	cbz	r3, d4f18 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d4f12:	68a9      	ldr	r1, [r5, #8]
   d4f14:	a806      	add	r0, sp, #24
   d4f16:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d4f18:	7ba3      	ldrb	r3, [r4, #14]
   d4f1a:	2b01      	cmp	r3, #1
   d4f1c:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4f1e:	bf0b      	itete	eq
   d4f20:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4f22:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d4f24:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d4f26:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f28:	bf0c      	ite	eq
   d4f2a:	69ac      	ldreq	r4, [r5, #24]
   d4f2c:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d4f2e:	6863      	ldr	r3, [r4, #4]
   d4f30:	2b00      	cmp	r3, #0
   d4f32:	dc0a      	bgt.n	d4f4a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4f34:	a906      	add	r1, sp, #24
   d4f36:	a808      	add	r0, sp, #32
   d4f38:	f7ff fdb9 	bl	d4aae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d4f3c:	a908      	add	r1, sp, #32
   d4f3e:	4620      	mov	r0, r4
   d4f40:	f7ff fe78 	bl	d4c34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f44:	a809      	add	r0, sp, #36	; 0x24
   d4f46:	f7ff f8ed 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f4a:	a807      	add	r0, sp, #28
   d4f4c:	f7ff f8ea 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f50:	e053      	b.n	d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d4f52:	89a1      	ldrh	r1, [r4, #12]
   d4f54:	4628      	mov	r0, r5
   d4f56:	f7ff fd81 	bl	d4a5c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	2800      	cmp	r0, #0
   d4f5e:	d04c      	beq.n	d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d4f60:	686b      	ldr	r3, [r5, #4]
   d4f62:	b10b      	cbz	r3, d4f68 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d4f64:	68e9      	ldr	r1, [r5, #12]
   d4f66:	4798      	blx	r3
   d4f68:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d4f6a:	781a      	ldrb	r2, [r3, #0]
   d4f6c:	2a01      	cmp	r2, #1
   d4f6e:	d104      	bne.n	d4f7a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d4f70:	4621      	mov	r1, r4
   d4f72:	69e8      	ldr	r0, [r5, #28]
   d4f74:	f7ff fe18 	bl	d4ba8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d4f78:	e03f      	b.n	d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4f7a:	69da      	ldr	r2, [r3, #28]
   d4f7c:	69a8      	ldr	r0, [r5, #24]
   d4f7e:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4f80:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4f82:	2600      	movs	r6, #0
   d4f84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4f88:	4299      	cmp	r1, r3
   d4f8a:	d00d      	beq.n	d4fa8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d4f8c:	681d      	ldr	r5, [r3, #0]
   d4f8e:	69aa      	ldr	r2, [r5, #24]
   d4f90:	69ed      	ldr	r5, [r5, #28]
   d4f92:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4f96:	4295      	cmp	r5, r2
   d4f98:	d004      	beq.n	d4fa4 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d4f9a:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4f9e:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d4fa2:	e7f8      	b.n	d4f96 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d4fa4:	3308      	adds	r3, #8
   d4fa6:	e7ef      	b.n	d4f88 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d4fa8:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4faa:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4fae:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4fb0:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4fb2:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4fb4:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4fb6:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4fb8:	f8c3 200a 	str.w	r2, [r3, #10]
   d4fbc:	f8c3 200e 	str.w	r2, [r3, #14]
   d4fc0:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d4fc4:	f7ff fdb6 	bl	d4b34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d4fc8:	e017      	b.n	d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4fca:	8aa1      	ldrh	r1, [r4, #20]
   d4fcc:	4628      	mov	r0, r5
   d4fce:	f7ff fd45 	bl	d4a5c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4fd2:	b190      	cbz	r0, d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d4fd4:	8ae1      	ldrh	r1, [r4, #22]
   d4fd6:	9000      	str	r0, [sp, #0]
   d4fd8:	68e3      	ldr	r3, [r4, #12]
   d4fda:	6922      	ldr	r2, [r4, #16]
   d4fdc:	6928      	ldr	r0, [r5, #16]
   d4fde:	e00a      	b.n	d4ff6 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d4fe0:	8aa1      	ldrh	r1, [r4, #20]
   d4fe2:	4628      	mov	r0, r5
   d4fe4:	f7ff fd3a 	bl	d4a5c <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d4fe8:	b138      	cbz	r0, d4ffa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d4fea:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d4fec:	8ae1      	ldrh	r1, [r4, #22]
   d4fee:	9000      	str	r0, [sp, #0]
   d4ff0:	68e3      	ldr	r3, [r4, #12]
   d4ff2:	6922      	ldr	r2, [r4, #16]
   d4ff4:	69e8      	ldr	r0, [r5, #28]
   d4ff6:	f7ff fc91 	bl	d491c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d4ffa:	a803      	add	r0, sp, #12
   d4ffc:	f7ff fb80 	bl	d4700 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d5000:	b00b      	add	sp, #44	; 0x2c
   d5002:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5004:	4802      	ldr	r0, [pc, #8]	; (d5010 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5006:	2300      	movs	r3, #0
   d5008:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d500a:	f7ff b94d 	b.w	d42a8 <os_mutex_recursive_create>
   d500e:	bf00      	nop
   d5010:	2003e3cc 	.word	0x2003e3cc

000d5014 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5014:	4770      	bx	lr

000d5016 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5016:	2000      	movs	r0, #0
   d5018:	4770      	bx	lr

000d501a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d501a:	b510      	push	{r4, lr}
   d501c:	2110      	movs	r1, #16
   d501e:	4604      	mov	r4, r0
   d5020:	f000 ffd1 	bl	d5fc6 <_ZdlPvj>
   d5024:	4620      	mov	r0, r4
   d5026:	bd10      	pop	{r4, pc}

000d5028 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5028:	b508      	push	{r3, lr}
      { delete this; }
   d502a:	b108      	cbz	r0, d5030 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d502c:	f7ff fff5 	bl	d501a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5030:	bd08      	pop	{r3, pc}

000d5032 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5032:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5034:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5036:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5038:	b113      	cbz	r3, d5040 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d503a:	2203      	movs	r2, #3
   d503c:	4601      	mov	r1, r0
   d503e:	4798      	blx	r3
    }
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}

000d5044 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5044:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5046:	68c4      	ldr	r4, [r0, #12]
   d5048:	b1ec      	cbz	r4, d5086 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d504a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d504c:	2b02      	cmp	r3, #2
   d504e:	d102      	bne.n	d5056 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5050:	68e0      	ldr	r0, [r4, #12]
   d5052:	f7ff faf5 	bl	d4640 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5056:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5058:	b135      	cbz	r5, d5068 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d505a:	4628      	mov	r0, r5
   d505c:	f7ff ffe9 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d5060:	2110      	movs	r1, #16
   d5062:	4628      	mov	r0, r5
   d5064:	f000 ffaf 	bl	d5fc6 <_ZdlPvj>
   d5068:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d506a:	b135      	cbz	r5, d507a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d506c:	4628      	mov	r0, r5
   d506e:	f7ff ffe0 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d5072:	2110      	movs	r1, #16
   d5074:	4628      	mov	r0, r5
   d5076:	f000 ffa6 	bl	d5fc6 <_ZdlPvj>
   d507a:	4620      	mov	r0, r4
   d507c:	2114      	movs	r1, #20
   d507e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5082:	f000 bfa0 	b.w	d5fc6 <_ZdlPvj>
   d5086:	bd38      	pop	{r3, r4, r5, pc}

000d5088 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5088:	b513      	push	{r0, r1, r4, lr}
   d508a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d508c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5090:	2300      	movs	r3, #0
   d5092:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5094:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5096:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5098:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d509a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d509c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d509e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50a0:	f7ff f840 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50a4:	4620      	mov	r0, r4
   d50a6:	b002      	add	sp, #8
   d50a8:	bd10      	pop	{r4, pc}

000d50aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d50aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50ac:	460c      	mov	r4, r1
   d50ae:	ad02      	add	r5, sp, #8
   d50b0:	f854 3b04 	ldr.w	r3, [r4], #4
   d50b4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d50b8:	4606      	mov	r6, r0
   d50ba:	460f      	mov	r7, r1
   d50bc:	a801      	add	r0, sp, #4
   d50be:	4621      	mov	r1, r4
   d50c0:	f7ff fcee 	bl	d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d50c4:	4629      	mov	r1, r5
   d50c6:	4630      	mov	r0, r6
   d50c8:	f7ff ffde 	bl	d5088 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50cc:	a801      	add	r0, sp, #4
   d50ce:	f7ff f829 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50d2:	4620      	mov	r0, r4
   d50d4:	f7ff f826 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d50d8:	4638      	mov	r0, r7
   d50da:	2108      	movs	r1, #8
   d50dc:	f000 ff73 	bl	d5fc6 <_ZdlPvj>
        return p;
    }
   d50e0:	4630      	mov	r0, r6
   d50e2:	b003      	add	sp, #12
   d50e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d50e6:	b513      	push	{r0, r1, r4, lr}
   d50e8:	460b      	mov	r3, r1
   d50ea:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50ec:	c803      	ldmia	r0, {r0, r1}
   d50ee:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d50f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d50f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d50fa:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d50fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5102:	b002      	add	sp, #8
   d5104:	bd10      	pop	{r4, pc}

000d5106 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5106:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5108:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d510a:	b90a      	cbnz	r2, d5110 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d510c:	f000 ff5d 	bl	d5fca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5110:	68c3      	ldr	r3, [r0, #12]
    }
   d5112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5116:	4718      	bx	r3

000d5118 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5118:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d511a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d511c:	f100 0110 	add.w	r1, r0, #16
   d5120:	f7ff fff1 	bl	d5106 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5124:	bd08      	pop	{r3, pc}

000d5126 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5126:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5128:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d512a:	b90a      	cbnz	r2, d5130 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d512c:	f000 ff4d 	bl	d5fca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5130:	68c3      	ldr	r3, [r0, #12]
    }
   d5132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5136:	4718      	bx	r3

000d5138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5138:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d513a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d513c:	f100 0110 	add.w	r1, r0, #16
   d5140:	f7ff fff1 	bl	d5126 <_ZNKSt8functionIFvRKbEEclES1_>
   d5144:	bd08      	pop	{r3, pc}

000d5146 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5146:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5148:	2300      	movs	r3, #0
   d514a:	6083      	str	r3, [r0, #8]
   d514c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d514e:	4604      	mov	r4, r0
   d5150:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5152:	b12b      	cbz	r3, d5160 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5154:	2202      	movs	r2, #2
   d5156:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5158:	68eb      	ldr	r3, [r5, #12]
   d515a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d515c:	68ab      	ldr	r3, [r5, #8]
   d515e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5160:	4620      	mov	r0, r4
   d5162:	bd38      	pop	{r3, r4, r5, pc}

000d5164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5168:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d516c:	b086      	sub	sp, #24
   d516e:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5170:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5174:	808b      	strh	r3, [r1, #4]
   d5176:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5178:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d517a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d517e:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5180:	f04f 0002 	mov.w	r0, #2
   d5184:	e8d4 1f4f 	ldrexb	r1, [r4]
   d5188:	4299      	cmp	r1, r3
   d518a:	d103      	bne.n	d5194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d518c:	e8c4 0f45 	strexb	r5, r0, [r4]
   d5190:	2d00      	cmp	r5, #0
   d5192:	d1f7      	bne.n	d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5194:	d002      	beq.n	d519c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d5196:	f88d 1000 	strb.w	r1, [sp]
   d519a:	e06b      	b.n	d5274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d519c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51a0:	bf1e      	ittt	ne
   d51a2:	60e7      	strne	r7, [r4, #12]
   d51a4:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d51a6:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51a8:	2301      	movs	r3, #1
   d51aa:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51ae:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d51b0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51b2:	f104 0308 	add.w	r3, r4, #8
   d51b6:	f3bf 8f5f 	dmb	sy
   d51ba:	e853 6f00 	ldrex	r6, [r3]
   d51be:	e843 0200 	strex	r2, r0, [r3]
   d51c2:	2a00      	cmp	r2, #0
   d51c4:	d1f9      	bne.n	d51ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d51c6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d51ca:	2e00      	cmp	r6, #0
   d51cc:	d052      	beq.n	d5274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d51ce:	f7ff f9ab 	bl	d4528 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d51d2:	b120      	cbz	r0, d51de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d51d4:	4629      	mov	r1, r5
   d51d6:	4630      	mov	r0, r6
   d51d8:	f7ff ff95 	bl	d5106 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d51dc:	e043      	b.n	d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d51de:	4631      	mov	r1, r6
   d51e0:	4668      	mov	r0, sp
   d51e2:	f7ff ffb0 	bl	d5146 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d51e6:	68e0      	ldr	r0, [r4, #12]
   d51e8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d51ec:	b108      	cbz	r0, d51f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d51ee:	f001 f8ab 	bl	d6348 <strdup>
   d51f2:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51f4:	2010      	movs	r0, #16
   d51f6:	f8ad 5014 	strh.w	r5, [sp, #20]
   d51fa:	f7fe ff4c 	bl	d4096 <_Znwj>
   d51fe:	4605      	mov	r5, r0
   d5200:	b330      	cbz	r0, d5250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5202:	f04f 0800 	mov.w	r8, #0
   d5206:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d520a:	2018      	movs	r0, #24
   d520c:	f7fe ff43 	bl	d4096 <_Znwj>
   d5210:	4604      	mov	r4, r0
   d5212:	b1c0      	cbz	r0, d5246 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5214:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5218:	4601      	mov	r1, r0
   d521a:	4668      	mov	r0, sp
   d521c:	f7ff ff63 	bl	d50e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5220:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5222:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5224:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5226:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5228:	9202      	str	r2, [sp, #8]
   d522a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d522c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d522e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5232:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5234:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5238:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d523c:	9b04      	ldr	r3, [sp, #16]
   d523e:	9203      	str	r2, [sp, #12]
   d5240:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5242:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5246:	4b0e      	ldr	r3, [pc, #56]	; (d5280 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5248:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d524a:	4b0e      	ldr	r3, [pc, #56]	; (d5284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d524c:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d524e:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5250:	9804      	ldr	r0, [sp, #16]
   d5252:	f7ff f9f5 	bl	d4640 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5256:	4668      	mov	r0, sp
   d5258:	f7ff feeb 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d525c:	2200      	movs	r2, #0
   d525e:	4629      	mov	r1, r5
   d5260:	4809      	ldr	r0, [pc, #36]	; (d5288 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5262:	f7ff f969 	bl	d4538 <application_thread_invoke>
   d5266:	4630      	mov	r0, r6
   d5268:	f7ff fee3 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d526c:	2110      	movs	r1, #16
   d526e:	4630      	mov	r0, r6
   d5270:	f000 fea9 	bl	d5fc6 <_ZdlPvj>
   d5274:	4638      	mov	r0, r7
   d5276:	f7ff f9e3 	bl	d4640 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d527a:	b006      	add	sp, #24
   d527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5280:	000d5119 	.word	0x000d5119
   d5284:	000d5375 	.word	0x000d5375
   d5288:	000d4677 	.word	0x000d4677

000d528c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5290:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5292:	ad07      	add	r5, sp, #28
   d5294:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5298:	4606      	mov	r6, r0
   d529a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d529c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d529e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d52a0:	460f      	mov	r7, r1
   d52a2:	4690      	mov	r8, r2
   d52a4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d52a8:	f8c5 b004 	str.w	fp, [r5, #4]
   d52ac:	f8c5 b008 	str.w	fp, [r5, #8]
   d52b0:	9307      	str	r3, [sp, #28]
   d52b2:	f7fe fef0 	bl	d4096 <_Znwj>
   d52b6:	4604      	mov	r4, r0
   d52b8:	b138      	cbz	r0, d52ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52ba:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52be:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52c2:	f8c0 b004 	str.w	fp, [r0, #4]
   d52c6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d52ca:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52cc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d52ce:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d52d0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52d2:	f7fe fee0 	bl	d4096 <_Znwj>
   d52d6:	b128      	cbz	r0, d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d52d8:	2301      	movs	r3, #1
   d52da:	6043      	str	r3, [r0, #4]
   d52dc:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d52de:	4b23      	ldr	r3, [pc, #140]	; (d536c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d52e0:	6003      	str	r3, [r0, #0]
   d52e2:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d52e4:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d52e6:	4b22      	ldr	r3, [pc, #136]	; (d5370 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d52e8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d52ea:	2008      	movs	r0, #8
   d52ec:	f7fe fed3 	bl	d4096 <_Znwj>
   d52f0:	4604      	mov	r4, r0
   d52f2:	b128      	cbz	r0, d5300 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52f4:	9b03      	ldr	r3, [sp, #12]
   d52f6:	f840 3b04 	str.w	r3, [r0], #4
   d52fa:	a904      	add	r1, sp, #16
   d52fc:	f7ff fbd0 	bl	d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5300:	9500      	str	r5, [sp, #0]
   d5302:	fa5f f38a 	uxtb.w	r3, sl
   d5306:	464a      	mov	r2, r9
   d5308:	4641      	mov	r1, r8
   d530a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d530c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d530e:	f7ff f92f 	bl	d4570 <spark_send_event>
   d5312:	b9b8      	cbnz	r0, d5344 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5314:	9b03      	ldr	r3, [sp, #12]
   d5316:	785b      	ldrb	r3, [r3, #1]
   d5318:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d531c:	b993      	cbnz	r3, d5344 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d531e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5322:	a905      	add	r1, sp, #20
   d5324:	a803      	add	r0, sp, #12
   d5326:	9205      	str	r2, [sp, #20]
   d5328:	f8ad 3018 	strh.w	r3, [sp, #24]
   d532c:	f7ff ff1a 	bl	d5164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5330:	9805      	ldr	r0, [sp, #20]
   d5332:	f7ff f985 	bl	d4640 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5336:	a805      	add	r0, sp, #20
   d5338:	9909      	ldr	r1, [sp, #36]	; 0x24
   d533a:	f7ff feb6 	bl	d50aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d533e:	a806      	add	r0, sp, #24
   d5340:	f7fe fef0 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5344:	9b03      	ldr	r3, [sp, #12]
   d5346:	9305      	str	r3, [sp, #20]
   d5348:	a904      	add	r1, sp, #16
   d534a:	a806      	add	r0, sp, #24
   d534c:	f7ff fba8 	bl	d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5350:	a905      	add	r1, sp, #20
   d5352:	4630      	mov	r0, r6
   d5354:	f7ff fe98 	bl	d5088 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5358:	a806      	add	r0, sp, #24
   d535a:	f7fe fee3 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d535e:	a804      	add	r0, sp, #16
   d5360:	f7fe fee0 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5364:	4630      	mov	r0, r6
   d5366:	b00b      	add	sp, #44	; 0x2c
   d5368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d536c:	000d6418 	.word	0x000d6418
   d5370:	000d54e1 	.word	0x000d54e1

000d5374 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5374:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5378:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d537a:	d006      	beq.n	d538a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d537c:	2a03      	cmp	r2, #3
   d537e:	d017      	beq.n	d53b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5380:	2a01      	cmp	r2, #1
   d5382:	d121      	bne.n	d53c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5384:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5386:	6003      	str	r3, [r0, #0]
	      break;
   d5388:	e01e      	b.n	d53c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d538a:	2018      	movs	r0, #24
   d538c:	680e      	ldr	r6, [r1, #0]
   d538e:	f7fe fe82 	bl	d4096 <_Znwj>
   d5392:	4605      	mov	r5, r0
   d5394:	b150      	cbz	r0, d53ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5396:	4631      	mov	r1, r6
   d5398:	f7ff fed5 	bl	d5146 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d539c:	6930      	ldr	r0, [r6, #16]
   d539e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d53a2:	b108      	cbz	r0, d53a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d53a4:	f000 ffd0 	bl	d6348 <strdup>
   d53a8:	6128      	str	r0, [r5, #16]
   d53aa:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53ac:	6025      	str	r5, [r4, #0]
   d53ae:	e00b      	b.n	d53c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53b0:	6804      	ldr	r4, [r0, #0]
   d53b2:	b14c      	cbz	r4, d53c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d53b4:	6920      	ldr	r0, [r4, #16]
   d53b6:	f7ff f943 	bl	d4640 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53ba:	4620      	mov	r0, r4
   d53bc:	f7ff fe39 	bl	d5032 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53c0:	2118      	movs	r1, #24
   d53c2:	4620      	mov	r0, r4
   d53c4:	f000 fdff 	bl	d5fc6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d53c8:	2000      	movs	r0, #0
   d53ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d53cc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53ce:	2300      	movs	r3, #0
   d53d0:	6083      	str	r3, [r0, #8]
   d53d2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d53d4:	4604      	mov	r4, r0
   d53d6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d53d8:	b12b      	cbz	r3, d53e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d53da:	2202      	movs	r2, #2
   d53dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d53de:	68eb      	ldr	r3, [r5, #12]
   d53e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d53e2:	68ab      	ldr	r3, [r5, #8]
   d53e4:	60a3      	str	r3, [r4, #8]
	}
    }
   d53e6:	4620      	mov	r0, r4
   d53e8:	bd38      	pop	{r3, r4, r5, pc}

000d53ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d53ea:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53ec:	b570      	push	{r4, r5, r6, lr}
   d53ee:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d53f0:	d006      	beq.n	d5400 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d53f2:	2a03      	cmp	r2, #3
   d53f4:	d011      	beq.n	d541a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d53f6:	2a01      	cmp	r2, #1
   d53f8:	d118      	bne.n	d542c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d53fa:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53fc:	6003      	str	r3, [r0, #0]
	      break;
   d53fe:	e015      	b.n	d542c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5400:	2014      	movs	r0, #20
   d5402:	680e      	ldr	r6, [r1, #0]
   d5404:	f7fe fe47 	bl	d4096 <_Znwj>
   d5408:	4605      	mov	r5, r0
   d540a:	b120      	cbz	r0, d5416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d540c:	4631      	mov	r1, r6
   d540e:	f7ff ffdd 	bl	d53cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5412:	7c33      	ldrb	r3, [r6, #16]
   d5414:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5416:	6025      	str	r5, [r4, #0]
   d5418:	e008      	b.n	d542c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d541a:	6804      	ldr	r4, [r0, #0]
   d541c:	b134      	cbz	r4, d542c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d541e:	4620      	mov	r0, r4
   d5420:	f7ff fe07 	bl	d5032 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5424:	2114      	movs	r1, #20
   d5426:	4620      	mov	r0, r4
   d5428:	f000 fdcd 	bl	d5fc6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d542c:	2000      	movs	r0, #0
   d542e:	bd70      	pop	{r4, r5, r6, pc}

000d5430 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5430:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5432:	2300      	movs	r3, #0
   d5434:	b087      	sub	sp, #28
   d5436:	460c      	mov	r4, r1
   d5438:	f3bf 8f5f 	dmb	sy
   d543c:	e850 6f00 	ldrex	r6, [r0]
   d5440:	e840 3200 	strex	r2, r3, [r0]
   d5444:	2a00      	cmp	r2, #0
   d5446:	d1f9      	bne.n	d543c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5448:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d544c:	2e00      	cmp	r6, #0
   d544e:	d03f      	beq.n	d54d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5450:	4618      	mov	r0, r3
   d5452:	f7ff f869 	bl	d4528 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5456:	4607      	mov	r7, r0
   d5458:	b120      	cbz	r0, d5464 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d545a:	4621      	mov	r1, r4
   d545c:	4630      	mov	r0, r6
   d545e:	f7ff fe62 	bl	d5126 <_ZNKSt8functionIFvRKbEEclES1_>
   d5462:	e02e      	b.n	d54c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5464:	4631      	mov	r1, r6
   d5466:	a801      	add	r0, sp, #4
   d5468:	f7ff ffb0 	bl	d53cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d546c:	7823      	ldrb	r3, [r4, #0]
   d546e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5472:	2010      	movs	r0, #16
   d5474:	f7fe fe0f 	bl	d4096 <_Znwj>
   d5478:	4605      	mov	r5, r0
   d547a:	b1d0      	cbz	r0, d54b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d547c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d547e:	2014      	movs	r0, #20
   d5480:	f7fe fe09 	bl	d4096 <_Znwj>
   d5484:	4604      	mov	r4, r0
   d5486:	b178      	cbz	r0, d54a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5488:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d548a:	4601      	mov	r1, r0
   d548c:	a801      	add	r0, sp, #4
   d548e:	f7ff fe2a 	bl	d50e6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5492:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5494:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5496:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5498:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d549a:	9203      	str	r2, [sp, #12]
   d549c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d549e:	60e3      	str	r3, [r4, #12]
   d54a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d54a4:	9204      	str	r2, [sp, #16]
   d54a6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d54a8:	4b0a      	ldr	r3, [pc, #40]	; (d54d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d54aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d54ac:	4b0a      	ldr	r3, [pc, #40]	; (d54d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d54ae:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d54b0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54b2:	a801      	add	r0, sp, #4
   d54b4:	f7ff fdbd 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d54b8:	2200      	movs	r2, #0
   d54ba:	4629      	mov	r1, r5
   d54bc:	4807      	ldr	r0, [pc, #28]	; (d54dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d54be:	f7ff f83b 	bl	d4538 <application_thread_invoke>
   d54c2:	4630      	mov	r0, r6
   d54c4:	f7ff fdb5 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d54c8:	2110      	movs	r1, #16
   d54ca:	4630      	mov	r0, r6
   d54cc:	f000 fd7b 	bl	d5fc6 <_ZdlPvj>
        }
    }
   d54d0:	b007      	add	sp, #28
   d54d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d54d4:	000d5139 	.word	0x000d5139
   d54d8:	000d53eb 	.word	0x000d53eb
   d54dc:	000d4677 	.word	0x000d4677

000d54e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d54e0:	b530      	push	{r4, r5, lr}
   d54e2:	b085      	sub	sp, #20
   d54e4:	4604      	mov	r4, r0
   d54e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d54e8:	4668      	mov	r0, sp
   d54ea:	4611      	mov	r1, r2
   d54ec:	f7ff fddd 	bl	d50aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d54f0:	b17c      	cbz	r4, d5512 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d54f2:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d54f4:	4628      	mov	r0, r5
   d54f6:	b10d      	cbz	r5, d54fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d54f8:	f000 ff26 	bl	d6348 <strdup>
   d54fc:	9002      	str	r0, [sp, #8]
   d54fe:	a902      	add	r1, sp, #8
   d5500:	4668      	mov	r0, sp
   d5502:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5506:	f7ff fe2d 	bl	d5164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d550a:	9802      	ldr	r0, [sp, #8]
   d550c:	f7ff f898 	bl	d4640 <free>
   d5510:	e01d      	b.n	d554e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5512:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5514:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5518:	f04f 0201 	mov.w	r2, #1
   d551c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5520:	42a3      	cmp	r3, r4
   d5522:	d103      	bne.n	d552c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5524:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5528:	2900      	cmp	r1, #0
   d552a:	d1f7      	bne.n	d551c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d552c:	d002      	beq.n	d5534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d552e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5532:	e00c      	b.n	d554e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5534:	f110 010c 	adds.w	r1, r0, #12
   d5538:	f04f 0301 	mov.w	r3, #1
   d553c:	bf18      	it	ne
   d553e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5540:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5544:	3004      	adds	r0, #4
   d5546:	f800 3c03 	strb.w	r3, [r0, #-3]
   d554a:	f7ff ff71 	bl	d5430 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d554e:	a801      	add	r0, sp, #4
   d5550:	f7fe fde8 	bl	d4124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5554:	b005      	add	sp, #20
   d5556:	bd30      	pop	{r4, r5, pc}

000d5558 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5558:	2200      	movs	r2, #0
   d555a:	4611      	mov	r1, r2
   d555c:	6840      	ldr	r0, [r0, #4]
   d555e:	f7ff b84f 	b.w	d4600 <network_listening>

000d5562 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5562:	2200      	movs	r2, #0
   d5564:	4611      	mov	r1, r2
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff b85a 	b.w	d4620 <network_get_listen_timeout>

000d556c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d556c:	2200      	movs	r2, #0
   d556e:	6840      	ldr	r0, [r0, #4]
   d5570:	f7ff b84e 	b.w	d4610 <network_set_listen_timeout>

000d5574 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5574:	2200      	movs	r2, #0
   d5576:	f081 0101 	eor.w	r1, r1, #1
   d557a:	6840      	ldr	r0, [r0, #4]
   d557c:	f7ff b838 	b.w	d45f0 <network_listen>

000d5580 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5580:	2300      	movs	r3, #0
   d5582:	461a      	mov	r2, r3
   d5584:	4619      	mov	r1, r3
   d5586:	6840      	ldr	r0, [r0, #4]
   d5588:	f7ff b82a 	b.w	d45e0 <network_off>

000d558c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d558c:	2300      	movs	r3, #0
   d558e:	461a      	mov	r2, r3
   d5590:	4619      	mov	r1, r3
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	f7ff b81c 	b.w	d45d0 <network_on>

000d5598 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5598:	2200      	movs	r2, #0
   d559a:	4611      	mov	r1, r2
   d559c:	6840      	ldr	r0, [r0, #4]
   d559e:	f7ff b80f 	b.w	d45c0 <network_ready>

000d55a2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55a2:	2200      	movs	r2, #0
   d55a4:	4611      	mov	r1, r2
   d55a6:	6840      	ldr	r0, [r0, #4]
   d55a8:	f7fe bffa 	b.w	d45a0 <network_connecting>

000d55ac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55ac:	2200      	movs	r2, #0
   d55ae:	2102      	movs	r1, #2
   d55b0:	6840      	ldr	r0, [r0, #4]
   d55b2:	f7fe bffd 	b.w	d45b0 <network_disconnect>

000d55b6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d55b6:	2300      	movs	r3, #0
   d55b8:	461a      	mov	r2, r3
   d55ba:	6840      	ldr	r0, [r0, #4]
   d55bc:	f7fe bfe8 	b.w	d4590 <network_connect>

000d55c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d55c0:	4b02      	ldr	r3, [pc, #8]	; (d55cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d55c2:	2203      	movs	r2, #3
   d55c4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d55c6:	4a02      	ldr	r2, [pc, #8]	; (d55d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d55c8:	601a      	str	r2, [r3, #0]
   d55ca:	4770      	bx	lr
   d55cc:	2003e3d0 	.word	0x2003e3d0
   d55d0:	000d6434 	.word	0x000d6434

000d55d4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d55d4:	4770      	bx	lr

000d55d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d55d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55d8:	4606      	mov	r6, r0
   d55da:	4615      	mov	r5, r2
   d55dc:	460c      	mov	r4, r1
   d55de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55e0:	42bc      	cmp	r4, r7
   d55e2:	d006      	beq.n	d55f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d55e4:	6833      	ldr	r3, [r6, #0]
   d55e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d55ea:	689b      	ldr	r3, [r3, #8]
   d55ec:	4630      	mov	r0, r6
   d55ee:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55f0:	e7f6      	b.n	d55e0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d55f2:	4628      	mov	r0, r5
   d55f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55f6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d55f6:	2200      	movs	r2, #0
   d55f8:	7c00      	ldrb	r0, [r0, #16]
   d55fa:	f7fe bea5 	b.w	d4348 <HAL_I2C_Write_Data>

000d55fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d55fe:	2100      	movs	r1, #0
   d5600:	7c00      	ldrb	r0, [r0, #16]
   d5602:	f7fe bea9 	b.w	d4358 <HAL_I2C_Available_Data>

000d5606 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5606:	2100      	movs	r1, #0
   d5608:	7c00      	ldrb	r0, [r0, #16]
   d560a:	f7fe bead 	b.w	d4368 <HAL_I2C_Read_Data>

000d560e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d560e:	2100      	movs	r1, #0
   d5610:	7c00      	ldrb	r0, [r0, #16]
   d5612:	f7fe beb1 	b.w	d4378 <HAL_I2C_Peek_Data>

000d5616 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5616:	2100      	movs	r1, #0
   d5618:	7c00      	ldrb	r0, [r0, #16]
   d561a:	f7fe beb5 	b.w	d4388 <HAL_I2C_Flush_Data>

000d561e <_ZN7TwoWireD0Ev>:
   d561e:	b510      	push	{r4, lr}
   d5620:	2114      	movs	r1, #20
   d5622:	4604      	mov	r4, r0
   d5624:	f000 fccf 	bl	d5fc6 <_ZdlPvj>
   d5628:	4620      	mov	r0, r4
   d562a:	bd10      	pop	{r4, pc}

000d562c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d562c:	b510      	push	{r4, lr}
   d562e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5634:	4608      	mov	r0, r1
   d5636:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5638:	2100      	movs	r1, #0
   d563a:	4b04      	ldr	r3, [pc, #16]	; (d564c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d563c:	7420      	strb	r0, [r4, #16]
   d563e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5640:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5642:	f7fe feb1 	bl	d43a8 <HAL_I2C_Init>

}
   d5646:	4620      	mov	r0, r4
   d5648:	bd10      	pop	{r4, pc}
   d564a:	bf00      	nop
   d564c:	000d6468 	.word	0x000d6468

000d5650 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5650:	2100      	movs	r1, #0
   d5652:	7c00      	ldrb	r0, [r0, #16]
   d5654:	f7fe bea0 	b.w	d4398 <HAL_I2C_Is_Enabled>

000d5658 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5658:	4770      	bx	lr

000d565a <_ZN9IPAddressD0Ev>:
   d565a:	b510      	push	{r4, lr}
   d565c:	2118      	movs	r1, #24
   d565e:	4604      	mov	r4, r0
   d5660:	f000 fcb1 	bl	d5fc6 <_ZdlPvj>
   d5664:	4620      	mov	r0, r4
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5668:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d566a:	7d03      	ldrb	r3, [r0, #20]
   d566c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d566e:	b08d      	sub	sp, #52	; 0x34
   d5670:	460e      	mov	r6, r1
   d5672:	f100 0704 	add.w	r7, r0, #4
   d5676:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d567a:	d002      	beq.n	d5682 <_ZNK9IPAddress7printToER5Print+0x1a>
   d567c:	f100 0508 	add.w	r5, r0, #8
   d5680:	e018      	b.n	d56b4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5682:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5684:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5686:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d568a:	232f      	movs	r3, #47	; 0x2f
   d568c:	462a      	mov	r2, r5
   d568e:	200a      	movs	r0, #10
   d5690:	f7fe fe92 	bl	d43b8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5694:	4628      	mov	r0, r5
   d5696:	f000 fe72 	bl	d637e <strlen>
   d569a:	6833      	ldr	r3, [r6, #0]
   d569c:	4602      	mov	r2, r0
   d569e:	68db      	ldr	r3, [r3, #12]
   d56a0:	4629      	mov	r1, r5
   d56a2:	4630      	mov	r0, r6
   d56a4:	4798      	blx	r3
   d56a6:	e00f      	b.n	d56c8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56a8:	b124      	cbz	r4, d56b4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56aa:	212e      	movs	r1, #46	; 0x2e
   d56ac:	4630      	mov	r0, r6
   d56ae:	f000 f9c7 	bl	d5a40 <_ZN5Print5printEc>
   d56b2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d56b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56b8:	220a      	movs	r2, #10
   d56ba:	4630      	mov	r0, r6
   d56bc:	f000 f9f0 	bl	d5aa0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56c0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56c2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56c4:	d1f0      	bne.n	d56a8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56c6:	4620      	mov	r0, r4
    }
    return n;
}
   d56c8:	b00d      	add	sp, #52	; 0x34
   d56ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56cc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d56cc:	b510      	push	{r4, lr}
   d56ce:	4b05      	ldr	r3, [pc, #20]	; (d56e4 <_ZN9IPAddressC1Ev+0x18>)
   d56d0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d56d2:	2211      	movs	r2, #17
   d56d4:	f840 3b04 	str.w	r3, [r0], #4
   d56d8:	2100      	movs	r1, #0
   d56da:	f000 fe04 	bl	d62e6 <memset>
{
    clear();
}
   d56de:	4620      	mov	r0, r4
   d56e0:	bd10      	pop	{r4, pc}
   d56e2:	bf00      	nop
   d56e4:	000d6490 	.word	0x000d6490

000d56e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56e8:	4603      	mov	r3, r0
   d56ea:	4a07      	ldr	r2, [pc, #28]	; (d5708 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56ec:	b510      	push	{r4, lr}
   d56ee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56f2:	f101 0210 	add.w	r2, r1, #16
   d56f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d56fa:	f843 4b04 	str.w	r4, [r3], #4
   d56fe:	4291      	cmp	r1, r2
   d5700:	d1f9      	bne.n	d56f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5702:	780a      	ldrb	r2, [r1, #0]
   d5704:	701a      	strb	r2, [r3, #0]
}
   d5706:	bd10      	pop	{r4, pc}
   d5708:	000d6490 	.word	0x000d6490

000d570c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d570c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d570e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5712:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5716:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d571a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d571e:	2304      	movs	r3, #4
   d5720:	6041      	str	r1, [r0, #4]
   d5722:	7503      	strb	r3, [r0, #20]
   d5724:	bd10      	pop	{r4, pc}

000d5726 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5726:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5728:	780d      	ldrb	r5, [r1, #0]
   d572a:	788b      	ldrb	r3, [r1, #2]
   d572c:	784a      	ldrb	r2, [r1, #1]
   d572e:	78c9      	ldrb	r1, [r1, #3]
   d5730:	9100      	str	r1, [sp, #0]
   d5732:	4629      	mov	r1, r5
   d5734:	f7ff ffea 	bl	d570c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5738:	b003      	add	sp, #12
   d573a:	bd30      	pop	{r4, r5, pc}

000d573c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d573c:	4b01      	ldr	r3, [pc, #4]	; (d5744 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d573e:	4a02      	ldr	r2, [pc, #8]	; (d5748 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5740:	601a      	str	r2, [r3, #0]
   d5742:	4770      	bx	lr
   d5744:	2003e3d8 	.word	0x2003e3d8
   d5748:	000d6551 	.word	0x000d6551

000d574c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d574c:	2200      	movs	r2, #0
   d574e:	4611      	mov	r1, r2
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	f7fe bf55 	b.w	d4600 <network_listening>

000d5756 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5756:	2200      	movs	r2, #0
   d5758:	4611      	mov	r1, r2
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7fe bf60 	b.w	d4620 <network_get_listen_timeout>

000d5760 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5760:	2200      	movs	r2, #0
   d5762:	6840      	ldr	r0, [r0, #4]
   d5764:	f7fe bf54 	b.w	d4610 <network_set_listen_timeout>

000d5768 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5768:	2200      	movs	r2, #0
   d576a:	f081 0101 	eor.w	r1, r1, #1
   d576e:	6840      	ldr	r0, [r0, #4]
   d5770:	f7fe bf3e 	b.w	d45f0 <network_listen>

000d5774 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5774:	2300      	movs	r3, #0
   d5776:	461a      	mov	r2, r3
   d5778:	4619      	mov	r1, r3
   d577a:	6840      	ldr	r0, [r0, #4]
   d577c:	f7fe bf30 	b.w	d45e0 <network_off>

000d5780 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5780:	2300      	movs	r3, #0
   d5782:	461a      	mov	r2, r3
   d5784:	4619      	mov	r1, r3
   d5786:	6840      	ldr	r0, [r0, #4]
   d5788:	f7fe bf22 	b.w	d45d0 <network_on>

000d578c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d578c:	2200      	movs	r2, #0
   d578e:	4611      	mov	r1, r2
   d5790:	6840      	ldr	r0, [r0, #4]
   d5792:	f7fe bf15 	b.w	d45c0 <network_ready>

000d5796 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5796:	2200      	movs	r2, #0
   d5798:	4611      	mov	r1, r2
   d579a:	6840      	ldr	r0, [r0, #4]
   d579c:	f7fe bf00 	b.w	d45a0 <network_connecting>

000d57a0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d57a0:	2200      	movs	r2, #0
   d57a2:	2102      	movs	r1, #2
   d57a4:	6840      	ldr	r0, [r0, #4]
   d57a6:	f7fe bf03 	b.w	d45b0 <network_disconnect>

000d57aa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d57aa:	2300      	movs	r3, #0
   d57ac:	461a      	mov	r2, r3
   d57ae:	6840      	ldr	r0, [r0, #4]
   d57b0:	f7fe beee 	b.w	d4590 <network_connect>

000d57b4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d57b4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57b6:	4605      	mov	r5, r0
   d57b8:	b188      	cbz	r0, d57de <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57ba:	6804      	ldr	r4, [r0, #0]
   d57bc:	b14c      	cbz	r4, d57d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d57be:	68a3      	ldr	r3, [r4, #8]
   d57c0:	b11b      	cbz	r3, d57ca <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57c2:	2203      	movs	r2, #3
   d57c4:	4621      	mov	r1, r4
   d57c6:	4620      	mov	r0, r4
   d57c8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57ca:	2110      	movs	r1, #16
   d57cc:	4620      	mov	r0, r4
   d57ce:	f000 fbfa 	bl	d5fc6 <_ZdlPvj>
   d57d2:	4628      	mov	r0, r5
   d57d4:	2114      	movs	r1, #20
      }
   d57d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d57da:	f000 bbf4 	b.w	d5fc6 <_ZdlPvj>
   d57de:	bd38      	pop	{r3, r4, r5, pc}

000d57e0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d57e0:	b110      	cbz	r0, d57e8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d57e2:	6803      	ldr	r3, [r0, #0]
   d57e4:	685b      	ldr	r3, [r3, #4]
   d57e6:	4718      	bx	r3
   d57e8:	4770      	bx	lr

000d57ea <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d57ea:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d57ec:	6803      	ldr	r3, [r0, #0]
   d57ee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d57f0:	b1bb      	cbz	r3, d5822 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d57f2:	6858      	ldr	r0, [r3, #4]
   d57f4:	f7fe fd38 	bl	d4268 <os_thread_is_current>
   d57f8:	b978      	cbnz	r0, d581a <_ZN6ThreadD1Ev+0x30>
   d57fa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57fc:	7c5a      	ldrb	r2, [r3, #17]
   d57fe:	b912      	cbnz	r2, d5806 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5800:	6858      	ldr	r0, [r3, #4]
   d5802:	f7fe fd39 	bl	d4278 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5806:	6823      	ldr	r3, [r4, #0]
   d5808:	6858      	ldr	r0, [r3, #4]
   d580a:	f7fe fd3d 	bl	d4288 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d580e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5810:	2300      	movs	r3, #0
   d5812:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5814:	b128      	cbz	r0, d5822 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5816:	f7ff ffcd 	bl	d57b4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d581a:	6820      	ldr	r0, [r4, #0]
   d581c:	b108      	cbz	r0, d5822 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d581e:	f7ff ffc9 	bl	d57b4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}
	...

000d5828 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5828:	b538      	push	{r3, r4, r5, lr}
   d582a:	4b0c      	ldr	r3, [pc, #48]	; (d585c <_ZN5spark9MeshClassD1Ev+0x34>)
   d582c:	6003      	str	r3, [r0, #0]
   d582e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5830:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5834:	b108      	cbz	r0, d583a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5836:	f7fe fc32 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d583a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d583e:	b135      	cbz	r5, d584e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5840:	4628      	mov	r0, r5
   d5842:	f7ff ffd2 	bl	d57ea <_ZN6ThreadD1Ev>
   d5846:	2104      	movs	r1, #4
   d5848:	4628      	mov	r0, r5
   d584a:	f000 fbbc 	bl	d5fc6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d584e:	68a0      	ldr	r0, [r4, #8]
   d5850:	b108      	cbz	r0, d5856 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5852:	f7ff ffc5 	bl	d57e0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5856:	4620      	mov	r0, r4
   d5858:	bd38      	pop	{r3, r4, r5, pc}
   d585a:	bf00      	nop
   d585c:	000d6584 	.word	0x000d6584

000d5860 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5860:	b538      	push	{r3, r4, r5, lr}
   d5862:	4c0d      	ldr	r4, [pc, #52]	; (d5898 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5864:	4b0d      	ldr	r3, [pc, #52]	; (d589c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5866:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5868:	2500      	movs	r5, #0
   d586a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d586c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5870:	6063      	str	r3, [r4, #4]
   d5872:	60a5      	str	r5, [r4, #8]
   d5874:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5878:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d587c:	f7fe fd14 	bl	d42a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5880:	4b07      	ldr	r3, [pc, #28]	; (d58a0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5882:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5886:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5888:	4620      	mov	r0, r4
   d588a:	4a06      	ldr	r2, [pc, #24]	; (d58a4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d588c:	4906      	ldr	r1, [pc, #24]	; (d58a8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d588e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5892:	f000 bb93 	b.w	d5fbc <__aeabi_atexit>
   d5896:	bf00      	nop
   d5898:	2003e3dc 	.word	0x2003e3dc
   d589c:	000d65b8 	.word	0x000d65b8
   d58a0:	000d6584 	.word	0x000d6584
   d58a4:	2003e388 	.word	0x2003e388
   d58a8:	000d5829 	.word	0x000d5829

000d58ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58ac:	2300      	movs	r3, #0
   d58ae:	461a      	mov	r2, r3
   d58b0:	6840      	ldr	r0, [r0, #4]
   d58b2:	f7fe be6d 	b.w	d4590 <network_connect>

000d58b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58b6:	2200      	movs	r2, #0
   d58b8:	2102      	movs	r1, #2
   d58ba:	6840      	ldr	r0, [r0, #4]
   d58bc:	f7fe be78 	b.w	d45b0 <network_disconnect>

000d58c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58c0:	2200      	movs	r2, #0
   d58c2:	4611      	mov	r1, r2
   d58c4:	6840      	ldr	r0, [r0, #4]
   d58c6:	f7fe be6b 	b.w	d45a0 <network_connecting>

000d58ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58ca:	2200      	movs	r2, #0
   d58cc:	4611      	mov	r1, r2
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	f7fe be76 	b.w	d45c0 <network_ready>

000d58d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58d4:	2300      	movs	r3, #0
   d58d6:	461a      	mov	r2, r3
   d58d8:	4619      	mov	r1, r3
   d58da:	6840      	ldr	r0, [r0, #4]
   d58dc:	f7fe be78 	b.w	d45d0 <network_on>

000d58e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d58e0:	2300      	movs	r3, #0
   d58e2:	461a      	mov	r2, r3
   d58e4:	4619      	mov	r1, r3
   d58e6:	6840      	ldr	r0, [r0, #4]
   d58e8:	f7fe be7a 	b.w	d45e0 <network_off>

000d58ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d58ec:	2200      	movs	r2, #0
   d58ee:	f081 0101 	eor.w	r1, r1, #1
   d58f2:	6840      	ldr	r0, [r0, #4]
   d58f4:	f7fe be7c 	b.w	d45f0 <network_listen>

000d58f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d58f8:	2200      	movs	r2, #0
   d58fa:	6840      	ldr	r0, [r0, #4]
   d58fc:	f7fe be88 	b.w	d4610 <network_set_listen_timeout>

000d5900 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5900:	2200      	movs	r2, #0
   d5902:	4611      	mov	r1, r2
   d5904:	6840      	ldr	r0, [r0, #4]
   d5906:	f7fe be8b 	b.w	d4620 <network_get_listen_timeout>

000d590a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d590a:	2200      	movs	r2, #0
   d590c:	4611      	mov	r1, r2
   d590e:	6840      	ldr	r0, [r0, #4]
   d5910:	f7fe be76 	b.w	d4600 <network_listening>

000d5914 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5918:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d591a:	b095      	sub	sp, #84	; 0x54
   d591c:	4616      	mov	r6, r2
   d591e:	460d      	mov	r5, r1
   d5920:	4607      	mov	r7, r0
    IPAddress addr;
   d5922:	f7ff fed3 	bl	d56cc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5926:	4621      	mov	r1, r4
   d5928:	2220      	movs	r2, #32
   d592a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d592c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d592e:	f000 fcda 	bl	d62e6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5932:	2340      	movs	r3, #64	; 0x40
   d5934:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5936:	4621      	mov	r1, r4
   d5938:	466b      	mov	r3, sp
   d593a:	aa0c      	add	r2, sp, #48	; 0x30
   d593c:	4630      	mov	r0, r6
   d593e:	f7fe fd4b 	bl	d43d8 <netdb_getaddrinfo>
    if (!r) {
   d5942:	4604      	mov	r4, r0
   d5944:	2800      	cmp	r0, #0
   d5946:	d144      	bne.n	d59d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5948:	4602      	mov	r2, r0
   d594a:	2101      	movs	r1, #1
   d594c:	6868      	ldr	r0, [r5, #4]
   d594e:	f7fe fe37 	bl	d45c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5952:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5954:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5956:	4622      	mov	r2, r4
   d5958:	6868      	ldr	r0, [r5, #4]
   d595a:	f7fe fe31 	bl	d45c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d595e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5960:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5962:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5964:	2e00      	cmp	r6, #0
   d5966:	d034      	beq.n	d59d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5968:	2900      	cmp	r1, #0
   d596a:	d132      	bne.n	d59d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d596c:	6873      	ldr	r3, [r6, #4]
   d596e:	2b02      	cmp	r3, #2
   d5970:	d002      	beq.n	d5978 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5972:	2b0a      	cmp	r3, #10
   d5974:	d009      	beq.n	d598a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5976:	e02a      	b.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5978:	f1b8 0f00 	cmp.w	r8, #0
   d597c:	d027      	beq.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d597e:	6971      	ldr	r1, [r6, #20]
   d5980:	4638      	mov	r0, r7
   d5982:	3104      	adds	r1, #4
   d5984:	f7ff fecf 	bl	d5726 <_ZN9IPAddressaSEPKh>
   d5988:	e020      	b.n	d59cc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d598a:	f1b9 0f00 	cmp.w	r9, #0
   d598e:	d01e      	beq.n	d59ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5990:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5992:	2211      	movs	r2, #17
   d5994:	a801      	add	r0, sp, #4
   d5996:	f000 fca6 	bl	d62e6 <memset>
                    a.v = 6;
   d599a:	2306      	movs	r3, #6
   d599c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d59a0:	ad01      	add	r5, sp, #4
   d59a2:	f104 0308 	add.w	r3, r4, #8
   d59a6:	3418      	adds	r4, #24
   d59a8:	6818      	ldr	r0, [r3, #0]
   d59aa:	6859      	ldr	r1, [r3, #4]
   d59ac:	462a      	mov	r2, r5
   d59ae:	c203      	stmia	r2!, {r0, r1}
   d59b0:	3308      	adds	r3, #8
   d59b2:	42a3      	cmp	r3, r4
   d59b4:	4615      	mov	r5, r2
   d59b6:	d1f7      	bne.n	d59a8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d59b8:	a901      	add	r1, sp, #4
   d59ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59bc:	ad07      	add	r5, sp, #28
   d59be:	f7ff fe93 	bl	d56e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59c4:	1d3c      	adds	r4, r7, #4
   d59c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59c8:	682b      	ldr	r3, [r5, #0]
   d59ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d59cc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59ce:	69f6      	ldr	r6, [r6, #28]
   d59d0:	e7c8      	b.n	d5964 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d59d2:	9800      	ldr	r0, [sp, #0]
   d59d4:	f7fe fcf8 	bl	d43c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59d8:	4638      	mov	r0, r7
   d59da:	b015      	add	sp, #84	; 0x54
   d59dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d59e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d59e0:	4b02      	ldr	r3, [pc, #8]	; (d59ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d59e2:	4a03      	ldr	r2, [pc, #12]	; (d59f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d59e4:	601a      	str	r2, [r3, #0]
   d59e6:	2200      	movs	r2, #0
   d59e8:	605a      	str	r2, [r3, #4]
   d59ea:	4770      	bx	lr
   d59ec:	2003e5ac 	.word	0x2003e5ac
   d59f0:	000d65b8 	.word	0x000d65b8

000d59f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d59f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59f6:	4606      	mov	r6, r0
   d59f8:	460d      	mov	r5, r1
   d59fa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d59fc:	2400      	movs	r4, #0
  while (size--) {
   d59fe:	42bd      	cmp	r5, r7
   d5a00:	d00c      	beq.n	d5a1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a02:	6833      	ldr	r3, [r6, #0]
   d5a04:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a08:	689b      	ldr	r3, [r3, #8]
   d5a0a:	4630      	mov	r0, r6
   d5a0c:	4798      	blx	r3
     if (chunk>=0)
   d5a0e:	2800      	cmp	r0, #0
   d5a10:	db01      	blt.n	d5a16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a12:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5a14:	e7f3      	b.n	d59fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a16:	2c00      	cmp	r4, #0
   d5a18:	bf08      	it	eq
   d5a1a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5a20:	b570      	push	{r4, r5, r6, lr}
   d5a22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5a24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5a26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5a28:	b149      	cbz	r1, d5a3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5a2a:	f000 fca8 	bl	d637e <strlen>
   d5a2e:	682b      	ldr	r3, [r5, #0]
   d5a30:	4602      	mov	r2, r0
   d5a32:	4621      	mov	r1, r4
   d5a34:	4628      	mov	r0, r5
   d5a36:	68db      	ldr	r3, [r3, #12]
    }
   d5a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a3c:	4718      	bx	r3
    }
   d5a3e:	bd70      	pop	{r4, r5, r6, pc}

000d5a40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a40:	6803      	ldr	r3, [r0, #0]
   d5a42:	689b      	ldr	r3, [r3, #8]
   d5a44:	4718      	bx	r3

000d5a46 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a46:	b530      	push	{r4, r5, lr}
   d5a48:	b08b      	sub	sp, #44	; 0x2c
   d5a4a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a4c:	2100      	movs	r1, #0
   d5a4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a52:	2a01      	cmp	r2, #1
   d5a54:	bf98      	it	ls
   d5a56:	220a      	movls	r2, #10
   d5a58:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5a5c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5a60:	fb05 3312 	mls	r3, r5, r2, r3
   d5a64:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a68:	2b09      	cmp	r3, #9
   d5a6a:	bf94      	ite	ls
   d5a6c:	3330      	addls	r3, #48	; 0x30
   d5a6e:	3337      	addhi	r3, #55	; 0x37
   d5a70:	b2db      	uxtb	r3, r3
   d5a72:	4621      	mov	r1, r4
   d5a74:	f804 3901 	strb.w	r3, [r4], #-1
   d5a78:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a7a:	2d00      	cmp	r5, #0
   d5a7c:	d1ee      	bne.n	d5a5c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a7e:	f7ff ffcf 	bl	d5a20 <_ZN5Print5writeEPKc>
}
   d5a82:	b00b      	add	sp, #44	; 0x2c
   d5a84:	bd30      	pop	{r4, r5, pc}

000d5a86 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5a86:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5a88:	b92a      	cbnz	r2, d5a96 <_ZN5Print5printEmi+0x10>
   d5a8a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5a90:	689b      	ldr	r3, [r3, #8]
   d5a92:	b2c9      	uxtb	r1, r1
   d5a94:	4718      	bx	r3
  else return printNumber(n, base);
   d5a96:	b2d2      	uxtb	r2, r2
}
   d5a98:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5a9c:	f7ff bfd3 	b.w	d5a46 <_ZN5Print11printNumberEmh>

000d5aa0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5aa0:	f7ff bff1 	b.w	d5a86 <_ZN5Print5printEmi>

000d5aa4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5aa4:	b510      	push	{r4, lr}
   d5aa6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5aa8:	f7ff fac3 	bl	d5032 <_ZNSt14_Function_baseD1Ev>
   d5aac:	4620      	mov	r0, r4
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ab0:	4803      	ldr	r0, [pc, #12]	; (d5ac0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ab2:	4a04      	ldr	r2, [pc, #16]	; (d5ac4 <_GLOBAL__sub_I_RGB+0x14>)
   d5ab4:	4904      	ldr	r1, [pc, #16]	; (d5ac8 <_GLOBAL__sub_I_RGB+0x18>)
   d5ab6:	2300      	movs	r3, #0
   d5ab8:	6083      	str	r3, [r0, #8]
   d5aba:	f000 ba7f 	b.w	d5fbc <__aeabi_atexit>
   d5abe:	bf00      	nop
   d5ac0:	2003e5b4 	.word	0x2003e5b4
   d5ac4:	2003e388 	.word	0x2003e388
   d5ac8:	000d5aa5 	.word	0x000d5aa5

000d5acc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5acc:	4770      	bx	lr

000d5ace <_ZN8SPIClassD0Ev>:
   d5ace:	b510      	push	{r4, lr}
   d5ad0:	2110      	movs	r1, #16
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	f000 fa77 	bl	d5fc6 <_ZdlPvj>
   d5ad8:	4620      	mov	r0, r4
   d5ada:	bd10      	pop	{r4, pc}

000d5adc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5adc:	b570      	push	{r4, r5, r6, lr}
   d5ade:	4b08      	ldr	r3, [pc, #32]	; (d5b00 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5ae0:	6003      	str	r3, [r0, #0]
   d5ae2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5ae4:	2500      	movs	r5, #0
   d5ae6:	460e      	mov	r6, r1
   d5ae8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5aec:	f7fe fbd4 	bl	d4298 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5af0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5af2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5af4:	f7fe fc78 	bl	d43e8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5af8:	60a5      	str	r5, [r4, #8]
}
   d5afa:	4620      	mov	r0, r4
   d5afc:	bd70      	pop	{r4, r5, r6, pc}
   d5afe:	bf00      	nop
   d5b00:	000d65ec 	.word	0x000d65ec

000d5b04 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5b04:	7900      	ldrb	r0, [r0, #4]
   d5b06:	f7fe bc77 	b.w	d43f8 <HAL_SPI_Is_Enabled>
	...

000d5b0c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5b0c:	4b04      	ldr	r3, [pc, #16]	; (d5b20 <_GLOBAL__sub_I_System+0x14>)
   d5b0e:	2000      	movs	r0, #0
   d5b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b14:	7018      	strb	r0, [r3, #0]
   d5b16:	8058      	strh	r0, [r3, #2]
   d5b18:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b1a:	f7fe bcf5 	b.w	d4508 <set_system_mode>
   d5b1e:	bf00      	nop
   d5b20:	2003e5c4 	.word	0x2003e5c4

000d5b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5b24:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5b26:	681a      	ldr	r2, [r3, #0]
   d5b28:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5b2a:	601a      	str	r2, [r3, #0]
   d5b2c:	4770      	bx	lr
   d5b2e:	bf00      	nop
   d5b30:	2003e320 	.word	0x2003e320
   d5b34:	2003e5cc 	.word	0x2003e5cc

000d5b38 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5b38:	4770      	bx	lr

000d5b3a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b3a:	7441      	strb	r1, [r0, #17]
   d5b3c:	4770      	bx	lr

000d5b3e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5b3e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5b40:	7c00      	ldrb	r0, [r0, #16]
   d5b42:	f7fe fc99 	bl	d4478 <HAL_USART_Available_Data_For_Write>
}
   d5b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b4a:	bd08      	pop	{r3, pc}

000d5b4c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5b4e:	7c00      	ldrb	r0, [r0, #16]
   d5b50:	f7fe fc6a 	bl	d4428 <HAL_USART_Available_Data>
}
   d5b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b58:	bd08      	pop	{r3, pc}

000d5b5a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5b5c:	7c00      	ldrb	r0, [r0, #16]
   d5b5e:	f7fe fc73 	bl	d4448 <HAL_USART_Peek_Data>
}
   d5b62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b66:	bf28      	it	cs
   d5b68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b6c:	bd08      	pop	{r3, pc}

000d5b6e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5b70:	7c00      	ldrb	r0, [r0, #16]
   d5b72:	f7fe fc61 	bl	d4438 <HAL_USART_Read_Data>
}
   d5b76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b7a:	bf28      	it	cs
   d5b7c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b80:	bd08      	pop	{r3, pc}

000d5b82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5b82:	7c00      	ldrb	r0, [r0, #16]
   d5b84:	f7fe bc68 	b.w	d4458 <HAL_USART_Flush_Data>

000d5b88 <_ZN11USARTSerialD0Ev>:
   d5b88:	b510      	push	{r4, lr}
   d5b8a:	2114      	movs	r1, #20
   d5b8c:	4604      	mov	r4, r0
   d5b8e:	f000 fa1a 	bl	d5fc6 <_ZdlPvj>
   d5b92:	4620      	mov	r0, r4
   d5b94:	bd10      	pop	{r4, pc}

000d5b96 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b96:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b98:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5b9a:	4604      	mov	r4, r0
   d5b9c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b9e:	b925      	cbnz	r5, d5baa <_ZN11USARTSerial5writeEh+0x14>
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
   d5ba2:	f7fe fc69 	bl	d4478 <HAL_USART_Available_Data_For_Write>
   d5ba6:	2800      	cmp	r0, #0
   d5ba8:	dd05      	ble.n	d5bb6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5baa:	4631      	mov	r1, r6
   d5bac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5bb2:	f7fe bc31 	b.w	d4418 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5bb6:	4628      	mov	r0, r5
   d5bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5bbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5bbc:	b510      	push	{r4, lr}
   d5bbe:	4604      	mov	r4, r0
   d5bc0:	4608      	mov	r0, r1
   d5bc2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5bc4:	2200      	movs	r2, #0
   d5bc6:	6062      	str	r2, [r4, #4]
   d5bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bcc:	60a2      	str	r2, [r4, #8]
   d5bce:	4a05      	ldr	r2, [pc, #20]	; (d5be4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5bd0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5bd2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5bd4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5bd6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5bd8:	461a      	mov	r2, r3
   d5bda:	f7fe fc15 	bl	d4408 <HAL_USART_Init>
}
   d5bde:	4620      	mov	r0, r4
   d5be0:	bd10      	pop	{r4, pc}
   d5be2:	bf00      	nop
   d5be4:	000d6628 	.word	0x000d6628

000d5be8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5be8:	7c00      	ldrb	r0, [r0, #16]
   d5bea:	f7fe bc3d 	b.w	d4468 <HAL_USART_Is_Enabled>
	...

000d5bf0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5bf0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5bf2:	4d0c      	ldr	r5, [pc, #48]	; (d5c24 <_Z22__fetch_global_Serial1v+0x34>)
   d5bf4:	6829      	ldr	r1, [r5, #0]
   d5bf6:	f011 0401 	ands.w	r4, r1, #1
   d5bfa:	d111      	bne.n	d5c20 <_Z22__fetch_global_Serial1v+0x30>
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7fe fa50 	bl	d40a2 <__cxa_guard_acquire>
   d5c02:	b168      	cbz	r0, d5c20 <_Z22__fetch_global_Serial1v+0x30>
   d5c04:	4a08      	ldr	r2, [pc, #32]	; (d5c28 <_Z22__fetch_global_Serial1v+0x38>)
   d5c06:	4b09      	ldr	r3, [pc, #36]	; (d5c2c <_Z22__fetch_global_Serial1v+0x3c>)
   d5c08:	4809      	ldr	r0, [pc, #36]	; (d5c30 <_Z22__fetch_global_Serial1v+0x40>)
   d5c0a:	4621      	mov	r1, r4
   d5c0c:	f7ff ffd6 	bl	d5bbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c10:	4628      	mov	r0, r5
   d5c12:	f7fe fa4b 	bl	d40ac <__cxa_guard_release>
   d5c16:	4a07      	ldr	r2, [pc, #28]	; (d5c34 <_Z22__fetch_global_Serial1v+0x44>)
   d5c18:	4907      	ldr	r1, [pc, #28]	; (d5c38 <_Z22__fetch_global_Serial1v+0x48>)
   d5c1a:	4805      	ldr	r0, [pc, #20]	; (d5c30 <_Z22__fetch_global_Serial1v+0x40>)
   d5c1c:	f000 f9ce 	bl	d5fbc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5c20:	4803      	ldr	r0, [pc, #12]	; (d5c30 <_Z22__fetch_global_Serial1v+0x40>)
   d5c22:	bd38      	pop	{r3, r4, r5, pc}
   d5c24:	2003e668 	.word	0x2003e668
   d5c28:	2003e66c 	.word	0x2003e66c
   d5c2c:	2003e5e4 	.word	0x2003e5e4
   d5c30:	2003e5d0 	.word	0x2003e5d0
   d5c34:	2003e388 	.word	0x2003e388
   d5c38:	000d5b39 	.word	0x000d5b39

000d5c3c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c3c:	7441      	strb	r1, [r0, #17]
   d5c3e:	4770      	bx	lr

000d5c40 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c40:	4770      	bx	lr

000d5c42 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5c42:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c44:	2100      	movs	r1, #0
   d5c46:	7c00      	ldrb	r0, [r0, #16]
   d5c48:	f7fe fc3e 	bl	d44c8 <HAL_USB_USART_Receive_Data>
}
   d5c4c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c50:	bf28      	it	cs
   d5c52:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c56:	bd08      	pop	{r3, pc}

000d5c58 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5c58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c5a:	2101      	movs	r1, #1
   d5c5c:	7c00      	ldrb	r0, [r0, #16]
   d5c5e:	f7fe fc33 	bl	d44c8 <HAL_USB_USART_Receive_Data>
}
   d5c62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c66:	bf28      	it	cs
   d5c68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c6c:	bd08      	pop	{r3, pc}

000d5c6e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5c6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5c70:	7c00      	ldrb	r0, [r0, #16]
   d5c72:	f7fe fc21 	bl	d44b8 <HAL_USB_USART_Available_Data_For_Write>
}
   d5c76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c7a:	bd08      	pop	{r3, pc}

000d5c7c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5c7c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5c7e:	7c00      	ldrb	r0, [r0, #16]
   d5c80:	f7fe fc12 	bl	d44a8 <HAL_USB_USART_Available_Data>
}
   d5c84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c88:	bd08      	pop	{r3, pc}

000d5c8a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5c8a:	7c00      	ldrb	r0, [r0, #16]
   d5c8c:	f7fe bc2c 	b.w	d44e8 <HAL_USB_USART_Flush_Data>

000d5c90 <_ZN9USBSerialD0Ev>:
   d5c90:	b510      	push	{r4, lr}
   d5c92:	2114      	movs	r1, #20
   d5c94:	4604      	mov	r4, r0
   d5c96:	f000 f996 	bl	d5fc6 <_ZdlPvj>
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	bd10      	pop	{r4, pc}

000d5c9e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c9e:	b538      	push	{r3, r4, r5, lr}
   d5ca0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ca2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ca4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ca6:	f7fe fc07 	bl	d44b8 <HAL_USB_USART_Available_Data_For_Write>
   d5caa:	2800      	cmp	r0, #0
   d5cac:	dc01      	bgt.n	d5cb2 <_ZN9USBSerial5writeEh+0x14>
   d5cae:	7c60      	ldrb	r0, [r4, #17]
   d5cb0:	b128      	cbz	r0, d5cbe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5cb2:	4629      	mov	r1, r5
   d5cb4:	7c20      	ldrb	r0, [r4, #16]
   d5cb6:	f7fe fc0f 	bl	d44d8 <HAL_USB_USART_Send_Data>
   d5cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5cbe:	bd38      	pop	{r3, r4, r5, pc}

000d5cc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5cc0:	b510      	push	{r4, lr}
   d5cc2:	4604      	mov	r4, r0
   d5cc4:	2300      	movs	r3, #0
   d5cc6:	6063      	str	r3, [r4, #4]
   d5cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ccc:	60a3      	str	r3, [r4, #8]
   d5cce:	4b05      	ldr	r3, [pc, #20]	; (d5ce4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5cd0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5cd2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5cd4:	4608      	mov	r0, r1
{
  _serial = serial;
   d5cd6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5cd8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5cda:	4611      	mov	r1, r2
   d5cdc:	f7fe fbd4 	bl	d4488 <HAL_USB_USART_Init>
}
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}
   d5ce4:	000d6658 	.word	0x000d6658

000d5ce8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5ce8:	2200      	movs	r2, #0
   d5cea:	7c00      	ldrb	r0, [r0, #16]
   d5cec:	f7fe bbd4 	b.w	d4498 <HAL_USB_USART_Begin>

000d5cf0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5cf0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5cf2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5cf4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5cf6:	2100      	movs	r1, #0
   d5cf8:	f000 faf5 	bl	d62e6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	bd10      	pop	{r4, pc}

000d5d00 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d00:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d02:	4d0e      	ldr	r5, [pc, #56]	; (d5d3c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5d04:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d06:	a801      	add	r0, sp, #4
   d5d08:	f7ff fff2 	bl	d5cf0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d0c:	6829      	ldr	r1, [r5, #0]
   d5d0e:	f011 0401 	ands.w	r4, r1, #1
   d5d12:	d110      	bne.n	d5d36 <_Z16_fetch_usbserialv+0x36>
   d5d14:	4628      	mov	r0, r5
   d5d16:	f7fe f9c4 	bl	d40a2 <__cxa_guard_acquire>
   d5d1a:	b160      	cbz	r0, d5d36 <_Z16_fetch_usbserialv+0x36>
   d5d1c:	aa01      	add	r2, sp, #4
   d5d1e:	4621      	mov	r1, r4
   d5d20:	4807      	ldr	r0, [pc, #28]	; (d5d40 <_Z16_fetch_usbserialv+0x40>)
   d5d22:	f7ff ffcd 	bl	d5cc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d26:	4628      	mov	r0, r5
   d5d28:	f7fe f9c0 	bl	d40ac <__cxa_guard_release>
   d5d2c:	4a05      	ldr	r2, [pc, #20]	; (d5d44 <_Z16_fetch_usbserialv+0x44>)
   d5d2e:	4906      	ldr	r1, [pc, #24]	; (d5d48 <_Z16_fetch_usbserialv+0x48>)
   d5d30:	4803      	ldr	r0, [pc, #12]	; (d5d40 <_Z16_fetch_usbserialv+0x40>)
   d5d32:	f000 f943 	bl	d5fbc <__aeabi_atexit>
	return _usbserial;
}
   d5d36:	4802      	ldr	r0, [pc, #8]	; (d5d40 <_Z16_fetch_usbserialv+0x40>)
   d5d38:	b007      	add	sp, #28
   d5d3a:	bd30      	pop	{r4, r5, pc}
   d5d3c:	2003e6f0 	.word	0x2003e6f0
   d5d40:	2003e6f4 	.word	0x2003e6f4
   d5d44:	2003e388 	.word	0x2003e388
   d5d48:	000d5c41 	.word	0x000d5c41

000d5d4c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	4611      	mov	r1, r2
   d5d50:	6840      	ldr	r0, [r0, #4]
   d5d52:	f7fe bc35 	b.w	d45c0 <network_ready>

000d5d56 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d56:	2200      	movs	r2, #0
   d5d58:	4611      	mov	r1, r2
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	f7fe bc50 	b.w	d4600 <network_listening>

000d5d60 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d60:	2200      	movs	r2, #0
   d5d62:	4611      	mov	r1, r2
   d5d64:	6840      	ldr	r0, [r0, #4]
   d5d66:	f7fe bc5b 	b.w	d4620 <network_get_listen_timeout>

000d5d6a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d6a:	2200      	movs	r2, #0
   d5d6c:	6840      	ldr	r0, [r0, #4]
   d5d6e:	f7fe bc4f 	b.w	d4610 <network_set_listen_timeout>

000d5d72 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d72:	2200      	movs	r2, #0
   d5d74:	f081 0101 	eor.w	r1, r1, #1
   d5d78:	6840      	ldr	r0, [r0, #4]
   d5d7a:	f7fe bc39 	b.w	d45f0 <network_listen>

000d5d7e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5d7e:	2300      	movs	r3, #0
   d5d80:	461a      	mov	r2, r3
   d5d82:	4619      	mov	r1, r3
   d5d84:	6840      	ldr	r0, [r0, #4]
   d5d86:	f7fe bc2b 	b.w	d45e0 <network_off>

000d5d8a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5d8a:	2300      	movs	r3, #0
   d5d8c:	461a      	mov	r2, r3
   d5d8e:	4619      	mov	r1, r3
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	f7fe bc1d 	b.w	d45d0 <network_on>

000d5d96 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d96:	2200      	movs	r2, #0
   d5d98:	4611      	mov	r1, r2
   d5d9a:	6840      	ldr	r0, [r0, #4]
   d5d9c:	f7fe bc00 	b.w	d45a0 <network_connecting>

000d5da0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5da0:	2200      	movs	r2, #0
   d5da2:	2102      	movs	r1, #2
   d5da4:	6840      	ldr	r0, [r0, #4]
   d5da6:	f7fe bc03 	b.w	d45b0 <network_disconnect>

000d5daa <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5daa:	2300      	movs	r3, #0
   d5dac:	461a      	mov	r2, r3
   d5dae:	6840      	ldr	r0, [r0, #4]
   d5db0:	f7fe bbee 	b.w	d4590 <network_connect>

000d5db4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5db4:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5db6:	2204      	movs	r2, #4
   d5db8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5dba:	4a02      	ldr	r2, [pc, #8]	; (d5dc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5dbc:	601a      	str	r2, [r3, #0]
   d5dbe:	4770      	bx	lr
   d5dc0:	2003e708 	.word	0x2003e708
   d5dc4:	000d6688 	.word	0x000d6688

000d5dc8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5dc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5dca:	4b0c      	ldr	r3, [pc, #48]	; (d5dfc <serialEventRun+0x34>)
   d5dcc:	b133      	cbz	r3, d5ddc <serialEventRun+0x14>
   d5dce:	f7ff ff97 	bl	d5d00 <_Z16_fetch_usbserialv>
   d5dd2:	6803      	ldr	r3, [r0, #0]
   d5dd4:	691b      	ldr	r3, [r3, #16]
   d5dd6:	4798      	blx	r3
   d5dd8:	2800      	cmp	r0, #0
   d5dda:	dc09      	bgt.n	d5df0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ddc:	4b08      	ldr	r3, [pc, #32]	; (d5e00 <serialEventRun+0x38>)
   d5dde:	b163      	cbz	r3, d5dfa <serialEventRun+0x32>
   d5de0:	f7ff ff06 	bl	d5bf0 <_Z22__fetch_global_Serial1v>
   d5de4:	6803      	ldr	r3, [r0, #0]
   d5de6:	691b      	ldr	r3, [r3, #16]
   d5de8:	4798      	blx	r3
   d5dea:	2800      	cmp	r0, #0
   d5dec:	dc03      	bgt.n	d5df6 <serialEventRun+0x2e>
   d5dee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5df0:	f3af 8000 	nop.w
   d5df4:	e7f2      	b.n	d5ddc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5df6:	f3af 8000 	nop.w
   d5dfa:	bd08      	pop	{r3, pc}
	...

000d5e04 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5e04:	b508      	push	{r3, lr}
	serialEventRun();
   d5e06:	f7ff ffdf 	bl	d5dc8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e0a:	f7fe fa75 	bl	d42f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e0e:	4b01      	ldr	r3, [pc, #4]	; (d5e14 <_post_loop+0x10>)
   d5e10:	6018      	str	r0, [r3, #0]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	2003e714 	.word	0x2003e714

000d5e18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e1a:	2300      	movs	r3, #0
   d5e1c:	9300      	str	r3, [sp, #0]
   d5e1e:	461a      	mov	r2, r3
   d5e20:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e24:	f7fe fb9a 	bl	d455c <system_ctrl_set_result>
}
   d5e28:	b003      	add	sp, #12
   d5e2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e30 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e32:	8843      	ldrh	r3, [r0, #2]
   d5e34:	2b0a      	cmp	r3, #10
   d5e36:	d008      	beq.n	d5e4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e38:	2b50      	cmp	r3, #80	; 0x50
   d5e3a:	d109      	bne.n	d5e50 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e3c:	4b09      	ldr	r3, [pc, #36]	; (d5e64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e3e:	681b      	ldr	r3, [r3, #0]
   d5e40:	b13b      	cbz	r3, d5e52 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e42:	b003      	add	sp, #12
   d5e44:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e48:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e4a:	f7ff ffe5 	bl	d5e18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e4e:	e006      	b.n	d5e5e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e50:	2300      	movs	r3, #0
   d5e52:	9300      	str	r3, [sp, #0]
   d5e54:	461a      	mov	r2, r3
   d5e56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e5a:	f7fe fb7f 	bl	d455c <system_ctrl_set_result>
        break;
    }
}
   d5e5e:	b003      	add	sp, #12
   d5e60:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e64:	2003e710 	.word	0x2003e710

000d5e68 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e68:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e6a:	f7fe fa35 	bl	d42d8 <HAL_RNG_GetRandomNumber>
   d5e6e:	4604      	mov	r4, r0
    srand(seed);
   d5e70:	f000 fa42 	bl	d62f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e74:	4b07      	ldr	r3, [pc, #28]	; (d5e94 <module_user_init_hook+0x2c>)
   d5e76:	b113      	cbz	r3, d5e7e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5e78:	4620      	mov	r0, r4
   d5e7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e7e:	2100      	movs	r1, #0
   d5e80:	4804      	ldr	r0, [pc, #16]	; (d5e94 <module_user_init_hook+0x2c>)
   d5e82:	f7fe fb7d 	bl	d4580 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e86:	2100      	movs	r1, #0
   d5e88:	4803      	ldr	r0, [pc, #12]	; (d5e98 <module_user_init_hook+0x30>)
}
   d5e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e8e:	f7fe bb5b 	b.w	d4548 <system_ctrl_set_app_request_handler>
   d5e92:	bf00      	nop
   d5e94:	00000000 	.word	0x00000000
   d5e98:	000d5e31 	.word	0x000d5e31

000d5e9c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5e9c:	b510      	push	{r4, lr}
   d5e9e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5ea0:	480f      	ldr	r0, [pc, #60]	; (d5ee0 <pinAvailable+0x44>)
   d5ea2:	f7ff fe2f 	bl	d5b04 <_ZN8SPIClass9isEnabledEv>
   d5ea6:	b128      	cbz	r0, d5eb4 <pinAvailable+0x18>
   d5ea8:	f1a4 030b 	sub.w	r3, r4, #11
   d5eac:	2b02      	cmp	r3, #2
   d5eae:	d801      	bhi.n	d5eb4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5eb0:	2000      	movs	r0, #0
   d5eb2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5eb4:	f000 f840 	bl	d5f38 <_Z19__fetch_global_Wirev>
   d5eb8:	f7ff fbca 	bl	d5650 <_ZN7TwoWire9isEnabledEv>
   d5ebc:	b108      	cbz	r0, d5ec2 <pinAvailable+0x26>
   d5ebe:	2c01      	cmp	r4, #1
   d5ec0:	d9f6      	bls.n	d5eb0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ec2:	f7ff fe95 	bl	d5bf0 <_Z22__fetch_global_Serial1v>
   d5ec6:	f7ff fe8f 	bl	d5be8 <_ZN11USARTSerial9isEnabledEv>
   d5eca:	b118      	cbz	r0, d5ed4 <pinAvailable+0x38>
   d5ecc:	f1a4 0309 	sub.w	r3, r4, #9
   d5ed0:	2b01      	cmp	r3, #1
   d5ed2:	d9ed      	bls.n	d5eb0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5ed4:	2c23      	cmp	r4, #35	; 0x23
   d5ed6:	bf8c      	ite	hi
   d5ed8:	2000      	movhi	r0, #0
   d5eda:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5edc:	bd10      	pop	{r4, pc}
   d5ede:	bf00      	nop
   d5ee0:	2003e730 	.word	0x2003e730

000d5ee4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5ee4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5ee6:	b538      	push	{r3, r4, r5, lr}
   d5ee8:	4604      	mov	r4, r0
   d5eea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5eec:	d80a      	bhi.n	d5f04 <pinMode+0x20>
   d5eee:	29ff      	cmp	r1, #255	; 0xff
   d5ef0:	d008      	beq.n	d5f04 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5ef2:	f7ff ffd3 	bl	d5e9c <pinAvailable>
   d5ef6:	b128      	cbz	r0, d5f04 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5ef8:	4629      	mov	r1, r5
   d5efa:	4620      	mov	r0, r4
}
   d5efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f00:	f7fe ba0a 	b.w	d4318 <HAL_Pin_Mode>
   d5f04:	bd38      	pop	{r3, r4, r5, pc}

000d5f06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5f06:	b538      	push	{r3, r4, r5, lr}
   d5f08:	4604      	mov	r4, r0
   d5f0a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5f0c:	f7fe fa0c 	bl	d4328 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5f10:	28ff      	cmp	r0, #255	; 0xff
   d5f12:	d010      	beq.n	d5f36 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5f14:	2806      	cmp	r0, #6
   d5f16:	d804      	bhi.n	d5f22 <digitalWrite+0x1c>
   d5f18:	234d      	movs	r3, #77	; 0x4d
   d5f1a:	fa23 f000 	lsr.w	r0, r3, r0
   d5f1e:	07c3      	lsls	r3, r0, #31
   d5f20:	d409      	bmi.n	d5f36 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5f22:	4620      	mov	r0, r4
   d5f24:	f7ff ffba 	bl	d5e9c <pinAvailable>
   d5f28:	b128      	cbz	r0, d5f36 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f2a:	4629      	mov	r1, r5
   d5f2c:	4620      	mov	r0, r4
}
   d5f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5f32:	f7fe ba01 	b.w	d4338 <HAL_GPIO_Write>
   d5f36:	bd38      	pop	{r3, r4, r5, pc}

000d5f38 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5f38:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5f3a:	4d0b      	ldr	r5, [pc, #44]	; (d5f68 <_Z19__fetch_global_Wirev+0x30>)
   d5f3c:	6829      	ldr	r1, [r5, #0]
   d5f3e:	f011 0401 	ands.w	r4, r1, #1
   d5f42:	d10f      	bne.n	d5f64 <_Z19__fetch_global_Wirev+0x2c>
   d5f44:	4628      	mov	r0, r5
   d5f46:	f7fe f8ac 	bl	d40a2 <__cxa_guard_acquire>
   d5f4a:	b158      	cbz	r0, d5f64 <_Z19__fetch_global_Wirev+0x2c>
   d5f4c:	4621      	mov	r1, r4
   d5f4e:	4807      	ldr	r0, [pc, #28]	; (d5f6c <_Z19__fetch_global_Wirev+0x34>)
   d5f50:	f7ff fb6c 	bl	d562c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5f54:	4628      	mov	r0, r5
   d5f56:	f7fe f8a9 	bl	d40ac <__cxa_guard_release>
   d5f5a:	4a05      	ldr	r2, [pc, #20]	; (d5f70 <_Z19__fetch_global_Wirev+0x38>)
   d5f5c:	4905      	ldr	r1, [pc, #20]	; (d5f74 <_Z19__fetch_global_Wirev+0x3c>)
   d5f5e:	4803      	ldr	r0, [pc, #12]	; (d5f6c <_Z19__fetch_global_Wirev+0x34>)
   d5f60:	f000 f82c 	bl	d5fbc <__aeabi_atexit>
	return wire;
}
   d5f64:	4801      	ldr	r0, [pc, #4]	; (d5f6c <_Z19__fetch_global_Wirev+0x34>)
   d5f66:	bd38      	pop	{r3, r4, r5, pc}
   d5f68:	2003e718 	.word	0x2003e718
   d5f6c:	2003e71c 	.word	0x2003e71c
   d5f70:	2003e388 	.word	0x2003e388
   d5f74:	000d55d5 	.word	0x000d55d5

000d5f78 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f78:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f7a:	4c0c      	ldr	r4, [pc, #48]	; (d5fac <_GLOBAL__sub_I_SPI+0x34>)
   d5f7c:	4e0c      	ldr	r6, [pc, #48]	; (d5fb0 <_GLOBAL__sub_I_SPI+0x38>)
   d5f7e:	4d0d      	ldr	r5, [pc, #52]	; (d5fb4 <_GLOBAL__sub_I_SPI+0x3c>)
   d5f80:	2100      	movs	r1, #0
   d5f82:	4620      	mov	r0, r4
   d5f84:	f7ff fdaa 	bl	d5adc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f88:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f8a:	4c0b      	ldr	r4, [pc, #44]	; (d5fb8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f8c:	4632      	mov	r2, r6
   d5f8e:	4629      	mov	r1, r5
   d5f90:	f000 f814 	bl	d5fbc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f94:	2101      	movs	r1, #1
   d5f96:	4620      	mov	r0, r4
   d5f98:	f7ff fda0 	bl	d5adc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f9c:	4632      	mov	r2, r6
   d5f9e:	4629      	mov	r1, r5
   d5fa0:	4620      	mov	r0, r4
   d5fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5fa6:	f000 b809 	b.w	d5fbc <__aeabi_atexit>
   d5faa:	bf00      	nop
   d5fac:	2003e730 	.word	0x2003e730
   d5fb0:	2003e388 	.word	0x2003e388
   d5fb4:	000d5acd 	.word	0x000d5acd
   d5fb8:	2003e740 	.word	0x2003e740

000d5fbc <__aeabi_atexit>:
   d5fbc:	460b      	mov	r3, r1
   d5fbe:	4601      	mov	r1, r0
   d5fc0:	4618      	mov	r0, r3
   d5fc2:	f000 b94d 	b.w	d6260 <__cxa_atexit>

000d5fc6 <_ZdlPvj>:
   d5fc6:	f7fe b868 	b.w	d409a <_ZdlPv>

000d5fca <_ZSt25__throw_bad_function_callv>:
   d5fca:	b508      	push	{r3, lr}
   d5fcc:	f7fe fb40 	bl	d4650 <abort>

000d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5fd0:	4b24      	ldr	r3, [pc, #144]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5fd2:	681a      	ldr	r2, [r3, #0]
   d5fd4:	07d0      	lsls	r0, r2, #31
   d5fd6:	bf5c      	itt	pl
   d5fd8:	2201      	movpl	r2, #1
   d5fda:	601a      	strpl	r2, [r3, #0]
   d5fdc:	4b22      	ldr	r3, [pc, #136]	; (d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5fde:	681a      	ldr	r2, [r3, #0]
   d5fe0:	07d1      	lsls	r1, r2, #31
   d5fe2:	bf5c      	itt	pl
   d5fe4:	2201      	movpl	r2, #1
   d5fe6:	601a      	strpl	r2, [r3, #0]
   d5fe8:	4b20      	ldr	r3, [pc, #128]	; (d606c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5fea:	681a      	ldr	r2, [r3, #0]
   d5fec:	07d2      	lsls	r2, r2, #31
   d5fee:	bf5c      	itt	pl
   d5ff0:	2201      	movpl	r2, #1
   d5ff2:	601a      	strpl	r2, [r3, #0]
   d5ff4:	4b1e      	ldr	r3, [pc, #120]	; (d6070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ff6:	681a      	ldr	r2, [r3, #0]
   d5ff8:	07d0      	lsls	r0, r2, #31
   d5ffa:	bf5c      	itt	pl
   d5ffc:	2201      	movpl	r2, #1
   d5ffe:	601a      	strpl	r2, [r3, #0]
   d6000:	4b1c      	ldr	r3, [pc, #112]	; (d6074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6002:	681a      	ldr	r2, [r3, #0]
   d6004:	07d1      	lsls	r1, r2, #31
   d6006:	bf5c      	itt	pl
   d6008:	2201      	movpl	r2, #1
   d600a:	601a      	strpl	r2, [r3, #0]
   d600c:	4b1a      	ldr	r3, [pc, #104]	; (d6078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d600e:	681a      	ldr	r2, [r3, #0]
   d6010:	07d2      	lsls	r2, r2, #31
   d6012:	bf5c      	itt	pl
   d6014:	2201      	movpl	r2, #1
   d6016:	601a      	strpl	r2, [r3, #0]
   d6018:	4b18      	ldr	r3, [pc, #96]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d0      	lsls	r0, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4b16      	ldr	r3, [pc, #88]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	07d1      	lsls	r1, r2, #31
   d602a:	bf5c      	itt	pl
   d602c:	2201      	movpl	r2, #1
   d602e:	601a      	strpl	r2, [r3, #0]
   d6030:	4b14      	ldr	r3, [pc, #80]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d2      	lsls	r2, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4b12      	ldr	r3, [pc, #72]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d603e:	681a      	ldr	r2, [r3, #0]
   d6040:	07d0      	lsls	r0, r2, #31
   d6042:	bf5c      	itt	pl
   d6044:	2201      	movpl	r2, #1
   d6046:	601a      	strpl	r2, [r3, #0]
   d6048:	4b10      	ldr	r3, [pc, #64]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d604a:	681a      	ldr	r2, [r3, #0]
   d604c:	07d1      	lsls	r1, r2, #31
   d604e:	bf5c      	itt	pl
   d6050:	2201      	movpl	r2, #1
   d6052:	601a      	strpl	r2, [r3, #0]
   d6054:	4b0e      	ldr	r3, [pc, #56]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d2      	lsls	r2, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4770      	bx	lr
   d6062:	bf00      	nop
   d6064:	2003e77c 	.word	0x2003e77c
   d6068:	2003e778 	.word	0x2003e778
   d606c:	2003e774 	.word	0x2003e774
   d6070:	2003e770 	.word	0x2003e770
   d6074:	2003e76c 	.word	0x2003e76c
   d6078:	2003e768 	.word	0x2003e768
   d607c:	2003e764 	.word	0x2003e764
   d6080:	2003e760 	.word	0x2003e760
   d6084:	2003e75c 	.word	0x2003e75c
   d6088:	2003e758 	.word	0x2003e758
   d608c:	2003e754 	.word	0x2003e754
   d6090:	2003e750 	.word	0x2003e750

000d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6094:	4b18      	ldr	r3, [pc, #96]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6096:	681a      	ldr	r2, [r3, #0]
   d6098:	07d1      	lsls	r1, r2, #31
   d609a:	bf5c      	itt	pl
   d609c:	2201      	movpl	r2, #1
   d609e:	601a      	strpl	r2, [r3, #0]
   d60a0:	4b16      	ldr	r3, [pc, #88]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d60a2:	681a      	ldr	r2, [r3, #0]
   d60a4:	07d2      	lsls	r2, r2, #31
   d60a6:	bf5c      	itt	pl
   d60a8:	2201      	movpl	r2, #1
   d60aa:	601a      	strpl	r2, [r3, #0]
   d60ac:	4b14      	ldr	r3, [pc, #80]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d60ae:	681a      	ldr	r2, [r3, #0]
   d60b0:	07d0      	lsls	r0, r2, #31
   d60b2:	bf5c      	itt	pl
   d60b4:	2201      	movpl	r2, #1
   d60b6:	601a      	strpl	r2, [r3, #0]
   d60b8:	4b12      	ldr	r3, [pc, #72]	; (d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d60ba:	681a      	ldr	r2, [r3, #0]
   d60bc:	07d1      	lsls	r1, r2, #31
   d60be:	bf5c      	itt	pl
   d60c0:	2201      	movpl	r2, #1
   d60c2:	601a      	strpl	r2, [r3, #0]
   d60c4:	4b10      	ldr	r3, [pc, #64]	; (d6108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d60c6:	681a      	ldr	r2, [r3, #0]
   d60c8:	07d2      	lsls	r2, r2, #31
   d60ca:	bf5c      	itt	pl
   d60cc:	2201      	movpl	r2, #1
   d60ce:	601a      	strpl	r2, [r3, #0]
   d60d0:	4b0e      	ldr	r3, [pc, #56]	; (d610c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d60d2:	681a      	ldr	r2, [r3, #0]
   d60d4:	07d0      	lsls	r0, r2, #31
   d60d6:	bf5c      	itt	pl
   d60d8:	2201      	movpl	r2, #1
   d60da:	601a      	strpl	r2, [r3, #0]
   d60dc:	4b0c      	ldr	r3, [pc, #48]	; (d6110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d60de:	681a      	ldr	r2, [r3, #0]
   d60e0:	07d1      	lsls	r1, r2, #31
   d60e2:	bf5c      	itt	pl
   d60e4:	2201      	movpl	r2, #1
   d60e6:	601a      	strpl	r2, [r3, #0]
   d60e8:	4b0a      	ldr	r3, [pc, #40]	; (d6114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	07d2      	lsls	r2, r2, #31
   d60ee:	bf5c      	itt	pl
   d60f0:	2201      	movpl	r2, #1
   d60f2:	601a      	strpl	r2, [r3, #0]
   d60f4:	4770      	bx	lr
   d60f6:	bf00      	nop
   d60f8:	2003e79c 	.word	0x2003e79c
   d60fc:	2003e798 	.word	0x2003e798
   d6100:	2003e794 	.word	0x2003e794
   d6104:	2003e790 	.word	0x2003e790
   d6108:	2003e78c 	.word	0x2003e78c
   d610c:	2003e788 	.word	0x2003e788
   d6110:	2003e784 	.word	0x2003e784
   d6114:	2003e780 	.word	0x2003e780

000d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6118:	4b18      	ldr	r3, [pc, #96]	; (d617c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d611a:	681a      	ldr	r2, [r3, #0]
   d611c:	07d1      	lsls	r1, r2, #31
   d611e:	bf5c      	itt	pl
   d6120:	2201      	movpl	r2, #1
   d6122:	601a      	strpl	r2, [r3, #0]
   d6124:	4b16      	ldr	r3, [pc, #88]	; (d6180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d2      	lsls	r2, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b14      	ldr	r3, [pc, #80]	; (d6184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d0      	lsls	r0, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b12      	ldr	r3, [pc, #72]	; (d6188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d1      	lsls	r1, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b10      	ldr	r3, [pc, #64]	; (d618c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d2      	lsls	r2, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b0e      	ldr	r3, [pc, #56]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d0      	lsls	r0, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b0c      	ldr	r3, [pc, #48]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d1      	lsls	r1, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b0a      	ldr	r3, [pc, #40]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d2      	lsls	r2, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4770      	bx	lr
   d617a:	bf00      	nop
   d617c:	2003e7bc 	.word	0x2003e7bc
   d6180:	2003e7b8 	.word	0x2003e7b8
   d6184:	2003e7b4 	.word	0x2003e7b4
   d6188:	2003e7b0 	.word	0x2003e7b0
   d618c:	2003e7ac 	.word	0x2003e7ac
   d6190:	2003e7a8 	.word	0x2003e7a8
   d6194:	2003e7a4 	.word	0x2003e7a4
   d6198:	2003e7a0 	.word	0x2003e7a0

000d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d619c:	4b24      	ldr	r3, [pc, #144]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d0      	lsls	r0, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b22      	ldr	r3, [pc, #136]	; (d6234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d1      	lsls	r1, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4b20      	ldr	r3, [pc, #128]	; (d6238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d61b6:	681a      	ldr	r2, [r3, #0]
   d61b8:	07d2      	lsls	r2, r2, #31
   d61ba:	bf5c      	itt	pl
   d61bc:	2201      	movpl	r2, #1
   d61be:	601a      	strpl	r2, [r3, #0]
   d61c0:	4b1e      	ldr	r3, [pc, #120]	; (d623c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d61c2:	681a      	ldr	r2, [r3, #0]
   d61c4:	07d0      	lsls	r0, r2, #31
   d61c6:	bf5c      	itt	pl
   d61c8:	2201      	movpl	r2, #1
   d61ca:	601a      	strpl	r2, [r3, #0]
   d61cc:	4b1c      	ldr	r3, [pc, #112]	; (d6240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d61ce:	681a      	ldr	r2, [r3, #0]
   d61d0:	07d1      	lsls	r1, r2, #31
   d61d2:	bf5c      	itt	pl
   d61d4:	2201      	movpl	r2, #1
   d61d6:	601a      	strpl	r2, [r3, #0]
   d61d8:	4b1a      	ldr	r3, [pc, #104]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d61da:	681a      	ldr	r2, [r3, #0]
   d61dc:	07d2      	lsls	r2, r2, #31
   d61de:	bf5c      	itt	pl
   d61e0:	2201      	movpl	r2, #1
   d61e2:	601a      	strpl	r2, [r3, #0]
   d61e4:	4b18      	ldr	r3, [pc, #96]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d61e6:	681a      	ldr	r2, [r3, #0]
   d61e8:	07d0      	lsls	r0, r2, #31
   d61ea:	bf5c      	itt	pl
   d61ec:	2201      	movpl	r2, #1
   d61ee:	601a      	strpl	r2, [r3, #0]
   d61f0:	4b16      	ldr	r3, [pc, #88]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d1      	lsls	r1, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4b14      	ldr	r3, [pc, #80]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d61fe:	681a      	ldr	r2, [r3, #0]
   d6200:	07d2      	lsls	r2, r2, #31
   d6202:	bf5c      	itt	pl
   d6204:	2201      	movpl	r2, #1
   d6206:	601a      	strpl	r2, [r3, #0]
   d6208:	4b12      	ldr	r3, [pc, #72]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d0      	lsls	r0, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b10      	ldr	r3, [pc, #64]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d1      	lsls	r1, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4b0e      	ldr	r3, [pc, #56]	; (d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d2      	lsls	r2, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4770      	bx	lr
   d622e:	bf00      	nop
   d6230:	2003e7ec 	.word	0x2003e7ec
   d6234:	2003e7e8 	.word	0x2003e7e8
   d6238:	2003e7e4 	.word	0x2003e7e4
   d623c:	2003e7e0 	.word	0x2003e7e0
   d6240:	2003e7dc 	.word	0x2003e7dc
   d6244:	2003e7d8 	.word	0x2003e7d8
   d6248:	2003e7d4 	.word	0x2003e7d4
   d624c:	2003e7d0 	.word	0x2003e7d0
   d6250:	2003e7cc 	.word	0x2003e7cc
   d6254:	2003e7c8 	.word	0x2003e7c8
   d6258:	2003e7c4 	.word	0x2003e7c4
   d625c:	2003e7c0 	.word	0x2003e7c0

000d6260 <__cxa_atexit>:
   d6260:	b510      	push	{r4, lr}
   d6262:	4c05      	ldr	r4, [pc, #20]	; (d6278 <__cxa_atexit+0x18>)
   d6264:	4613      	mov	r3, r2
   d6266:	b12c      	cbz	r4, d6274 <__cxa_atexit+0x14>
   d6268:	460a      	mov	r2, r1
   d626a:	4601      	mov	r1, r0
   d626c:	2002      	movs	r0, #2
   d626e:	f3af 8000 	nop.w
   d6272:	bd10      	pop	{r4, pc}
   d6274:	4620      	mov	r0, r4
   d6276:	bd10      	pop	{r4, pc}
   d6278:	00000000 	.word	0x00000000

000d627c <memcmp>:
   d627c:	b510      	push	{r4, lr}
   d627e:	3901      	subs	r1, #1
   d6280:	4402      	add	r2, r0
   d6282:	4290      	cmp	r0, r2
   d6284:	d007      	beq.n	d6296 <memcmp+0x1a>
   d6286:	f810 3b01 	ldrb.w	r3, [r0], #1
   d628a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d628e:	42a3      	cmp	r3, r4
   d6290:	d0f7      	beq.n	d6282 <memcmp+0x6>
   d6292:	1b18      	subs	r0, r3, r4
   d6294:	bd10      	pop	{r4, pc}
   d6296:	2000      	movs	r0, #0
   d6298:	bd10      	pop	{r4, pc}

000d629a <memcpy>:
   d629a:	b510      	push	{r4, lr}
   d629c:	1e43      	subs	r3, r0, #1
   d629e:	440a      	add	r2, r1
   d62a0:	4291      	cmp	r1, r2
   d62a2:	d004      	beq.n	d62ae <memcpy+0x14>
   d62a4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d62a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d62ac:	e7f8      	b.n	d62a0 <memcpy+0x6>
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <memmove>:
   d62b0:	4288      	cmp	r0, r1
   d62b2:	b510      	push	{r4, lr}
   d62b4:	eb01 0302 	add.w	r3, r1, r2
   d62b8:	d801      	bhi.n	d62be <memmove+0xe>
   d62ba:	1e42      	subs	r2, r0, #1
   d62bc:	e00b      	b.n	d62d6 <memmove+0x26>
   d62be:	4298      	cmp	r0, r3
   d62c0:	d2fb      	bcs.n	d62ba <memmove+0xa>
   d62c2:	1881      	adds	r1, r0, r2
   d62c4:	1ad2      	subs	r2, r2, r3
   d62c6:	42d3      	cmn	r3, r2
   d62c8:	d004      	beq.n	d62d4 <memmove+0x24>
   d62ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d62ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d62d2:	e7f8      	b.n	d62c6 <memmove+0x16>
   d62d4:	bd10      	pop	{r4, pc}
   d62d6:	4299      	cmp	r1, r3
   d62d8:	d004      	beq.n	d62e4 <memmove+0x34>
   d62da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d62de:	f802 4f01 	strb.w	r4, [r2, #1]!
   d62e2:	e7f8      	b.n	d62d6 <memmove+0x26>
   d62e4:	bd10      	pop	{r4, pc}

000d62e6 <memset>:
   d62e6:	4402      	add	r2, r0
   d62e8:	4603      	mov	r3, r0
   d62ea:	4293      	cmp	r3, r2
   d62ec:	d002      	beq.n	d62f4 <memset+0xe>
   d62ee:	f803 1b01 	strb.w	r1, [r3], #1
   d62f2:	e7fa      	b.n	d62ea <memset+0x4>
   d62f4:	4770      	bx	lr
	...

000d62f8 <srand>:
   d62f8:	b538      	push	{r3, r4, r5, lr}
   d62fa:	4b12      	ldr	r3, [pc, #72]	; (d6344 <srand+0x4c>)
   d62fc:	681c      	ldr	r4, [r3, #0]
   d62fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6300:	4605      	mov	r5, r0
   d6302:	b9d3      	cbnz	r3, d633a <srand+0x42>
   d6304:	2018      	movs	r0, #24
   d6306:	f7fe f993 	bl	d4630 <malloc>
   d630a:	f243 330e 	movw	r3, #13070	; 0x330e
   d630e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6310:	8003      	strh	r3, [r0, #0]
   d6312:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6316:	8043      	strh	r3, [r0, #2]
   d6318:	f241 2334 	movw	r3, #4660	; 0x1234
   d631c:	8083      	strh	r3, [r0, #4]
   d631e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6322:	80c3      	strh	r3, [r0, #6]
   d6324:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6328:	8103      	strh	r3, [r0, #8]
   d632a:	2305      	movs	r3, #5
   d632c:	8143      	strh	r3, [r0, #10]
   d632e:	230b      	movs	r3, #11
   d6330:	8183      	strh	r3, [r0, #12]
   d6332:	2201      	movs	r2, #1
   d6334:	2300      	movs	r3, #0
   d6336:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d633a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d633c:	2200      	movs	r2, #0
   d633e:	611d      	str	r5, [r3, #16]
   d6340:	615a      	str	r2, [r3, #20]
   d6342:	bd38      	pop	{r3, r4, r5, pc}
   d6344:	2003e384 	.word	0x2003e384

000d6348 <strdup>:
   d6348:	4b02      	ldr	r3, [pc, #8]	; (d6354 <strdup+0xc>)
   d634a:	4601      	mov	r1, r0
   d634c:	6818      	ldr	r0, [r3, #0]
   d634e:	f000 b803 	b.w	d6358 <_strdup_r>
   d6352:	bf00      	nop
   d6354:	2003e384 	.word	0x2003e384

000d6358 <_strdup_r>:
   d6358:	b570      	push	{r4, r5, r6, lr}
   d635a:	4606      	mov	r6, r0
   d635c:	4608      	mov	r0, r1
   d635e:	460c      	mov	r4, r1
   d6360:	f000 f80d 	bl	d637e <strlen>
   d6364:	1c45      	adds	r5, r0, #1
   d6366:	4629      	mov	r1, r5
   d6368:	4630      	mov	r0, r6
   d636a:	f7fe f979 	bl	d4660 <_malloc_r>
   d636e:	4606      	mov	r6, r0
   d6370:	b118      	cbz	r0, d637a <_strdup_r+0x22>
   d6372:	462a      	mov	r2, r5
   d6374:	4621      	mov	r1, r4
   d6376:	f7ff ff90 	bl	d629a <memcpy>
   d637a:	4630      	mov	r0, r6
   d637c:	bd70      	pop	{r4, r5, r6, pc}

000d637e <strlen>:
   d637e:	4603      	mov	r3, r0
   d6380:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6384:	2a00      	cmp	r2, #0
   d6386:	d1fb      	bne.n	d6380 <strlen+0x2>
   d6388:	1a18      	subs	r0, r3, r0
   d638a:	3801      	subs	r0, #1
   d638c:	4770      	bx	lr

000d638e <link_code_end>:
	...

000d6390 <dynalib_user>:
   d6390:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d63a0:	0000 0000 6554 6d61 7754 006f 6374 632d     ....TeamTwo.tc-c
   d63b0:	6674 702f 696f 746e 732d 6f63 6572 0064     tf/point-scored.
   d63c0:	3031 3337 3736 6661 382d 3433 2d61 3634     107367af-834a-46
   d63d0:	3039 622d 6366 2d34 3331 6333 6536 6336     90-bfc4-133c6e6c
   d63e0:	3661 3465 7400 2d63 7463 2f66 7575 6469     a6e4.tc-ctf/uuid
   d63f0:	0000 0000                                   ....

000d63f4 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d63fc:	469f 000d 46a5 000d 4b1f 000d 46b3 000d     .F...F...K...F..
   d640c:	46a1 000d                                   .F..

000d6410 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6418:	5015 000d 501b 000d 5045 000d 5029 000d     .P...P..EP..)P..
   d6428:	5017 000d                                   .P..

000d642c <_ZTVN5spark13EthernetClassE>:
	...
   d6434:	55b7 000d 55ad 000d 55a3 000d 5599 000d     .U...U...U...U..
   d6444:	558d 000d 5581 000d 5575 000d 556d 000d     .U...U..uU..mU..
   d6454:	5563 000d 5559 000d 5915 000d               cU..YU...Y..

000d6460 <_ZTV7TwoWire>:
	...
   d6468:	55d5 000d 561f 000d 55f7 000d 55d7 000d     .U...V...U...U..
   d6478:	55ff 000d 5607 000d 560f 000d 5617 000d     .U...V...V...V..

000d6488 <_ZTV9IPAddress>:
	...
   d6490:	5669 000d 5659 000d 565b 000d 0066 6e6c     iV..YV..[V..f.ln
   d64a0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d64b0:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d64c0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d64d0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d64e0:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d64f0:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d6500:	6d63 0064 6e68 0064 7473 6d72 6600 6c69     cmd.hnd.strm.fil
   d6510:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d6520:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d6530:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d6540:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d6550:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d6560:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6570:	6170 696e 0063 6c61 006c 0000               panic.all...

000d657c <_ZTVN5spark9MeshClassE>:
	...
   d6584:	57ab 000d 57a1 000d 5797 000d 578d 000d     .W...W...W...W..
   d6594:	5781 000d 5775 000d 5769 000d 5761 000d     .W..uW..iW..aW..
   d65a4:	5757 000d 574d 000d 5915 000d               WW..MW...Y..

000d65b0 <_ZTVN5spark12NetworkClassE>:
	...
   d65b8:	58ad 000d 58b7 000d 58c1 000d 58cb 000d     .X...X...X...X..
   d65c8:	58d5 000d 58e1 000d 58ed 000d 58f9 000d     .X...X...X...X..
   d65d8:	5901 000d 590b 000d 5915 000d               .Y...Y...Y..

000d65e4 <_ZTV8SPIClass>:
	...
   d65ec:	5acd 000d 5acf 000d 005a 2b25 3330 3a64     .Z...Z..Z.%+03d:
   d65fc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d660c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d661c:	0000 0000                                   ....

000d6620 <_ZTV11USARTSerial>:
	...
   d6628:	5b39 000d 5b89 000d 5b97 000d 59f5 000d     9[...[...[...Y..
   d6638:	5b4d 000d 5b6f 000d 5b5b 000d 5b83 000d     M[..o[..[[...[..
   d6648:	5b3b 000d 5b3f 000d                         ;[..?[..

000d6650 <_ZTV9USBSerial>:
	...
   d6658:	5c41 000d 5c91 000d 5c9f 000d 59f5 000d     A\...\...\...Y..
   d6668:	5c7d 000d 5c43 000d 5c59 000d 5c8b 000d     }\..C\..Y\...\..
   d6678:	5c6f 000d 5c3d 000d                         o\..=\..

000d6680 <_ZTVN5spark9WiFiClassE>:
	...
   d6688:	5dab 000d 5da1 000d 5d97 000d 5d4d 000d     .]...]...]..M]..
   d6698:	5d8b 000d 5d7f 000d 5d73 000d 5d6b 000d     .]...]..s]..k]..
   d66a8:	5d61 000d 5d57 000d 5915 000d               a]..W]...Y..

000d66b4 <__sf_fake_stdin>:
	...

000d66d4 <__sf_fake_stdout>:
	...

000d66f4 <__sf_fake_stderr>:
	...
   d6714:	0043                                        C.

000d6716 <link_const_variable_data_end>:
	...

000d6718 <link_constructors_location>:
   d6718:	000d41f5 	.word	0x000d41f5
   d671c:	000d5005 	.word	0x000d5005
   d6720:	000d55c1 	.word	0x000d55c1
   d6724:	000d573d 	.word	0x000d573d
   d6728:	000d5861 	.word	0x000d5861
   d672c:	000d59e1 	.word	0x000d59e1
   d6730:	000d5ab1 	.word	0x000d5ab1
   d6734:	000d5b0d 	.word	0x000d5b0d
   d6738:	000d5b25 	.word	0x000d5b25
   d673c:	000d5db5 	.word	0x000d5db5
   d6740:	000d5f79 	.word	0x000d5f79
   d6744:	000d5fd1 	.word	0x000d5fd1
   d6748:	000d6095 	.word	0x000d6095
   d674c:	000d6119 	.word	0x000d6119
   d6750:	000d619d 	.word	0x000d619d

000d6754 <link_constructors_end>:
	...
